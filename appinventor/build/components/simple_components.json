[{ "type": "com.google.appinventor.components.runtime.AccelerometerSensor",
  "name": "AccelerometerSensor",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:02:59+0530",
  "categoryString": "SENSORS",
  "helpString": "Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m\/s<sup>2<\/sup>).  The components are: <ul>\n<li> <strong>xAccel<\/strong>: 0 when the phone is at rest on a flat      surface, positive when the phone is tilted to the right (i.e.,      its left side is raised), and negative when the phone is tilted      to the left (i.e., its right size is raised).<\/li>\n <li> <strong>yAccel<\/strong>: 0 when the phone is at rest on a flat      surface, positive when its bottom is raised, and negative when      its top is raised. <\/li>\n <li> <strong>zAccel<\/strong>: Equal to -9.8 (earth's gravity in meters per      second per second when the device is at rest parallel to the ground      with the display facing up,      0 when perpendicular to the ground, and +9.8 when facing down.       The value can also be affected by accelerating it with or against      gravity. <\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/accelerometersensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "LegacyMode", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "400", "editorArgs": []},
{ "name": "Sensitivity", "editorType": "accelerometer_sensitivity", "defaultValue": "2", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Returns whether the accelerometer is available on the device.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If true, the sensor will generate events.  Otherwise, no events\n are generated even if the device is accelerated or shaken.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "LegacyMode", "description": "Prior to the release that added this property the AccelerometerSensor component passed through sensor values directly as received from the Android system. However these values do not compensate for tablets that default to Landscape mode, requiring the MIT App Inventor programmer to compensate. However compensating would result in incorrect results in Portrait mode devices such as phones. We now detect Landscape mode tablets and perform the compensation. However if your project is already compensating for the change, you will now get incorrect results. Although our preferred solution is for you to update your project, you can also just set this property to \u201ctrue\u201d and our compensation code will be deactivated. Note: We recommend that you update your project as we may remove this property in a future release.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "MinimumInterval", "description": "The minimum interval, in milliseconds, between phone shakes", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Sensitivity", "description": "A number that encodes how sensitive the accelerometer is. The choices are: 1 = weak, 2 = moderate,  3 = strong.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "XAccel", "description": "Returns the acceleration in the X-dimension in SI units (m\/s\u00b2).\n The sensor must be enabled to return meaningful values.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "YAccel", "description": "Returns the acceleration in the Y-dimension in SI units (m\/s\u00b2).\n The sensor must be enabled to return meaningful values.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ZAccel", "description": "Returns the acceleration in the Z-dimension in SI units (m\/s\u00b2).\n The sensor must be enabled to return meaningful values.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AccelerationChanged", "description": "Indicates the acceleration changed in the X, Y, and\/or Z dimensions.", "deprecated": "false", "params": [{ "name": "xAccel", "type": "number"},{ "name": "yAccel", "type": "number"},{ "name": "zAccel", "type": "number"}]}
,
    { "name": "Shaking", "description": "Indicates the device started being shaken or continues to be shaken.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ActivityStarter",
  "name": "ActivityStarter",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "CONNECTIVITY",
  "helpString": "A component that can launch an activity using the <code>StartActivity<\/code> method.<p>Activities that can be launched include: <ul> \n<li> starting other App Inventor for Android apps <\/li> \n<li> starting the camera application <\/li> \n<li> performing web search <\/li> \n<li> opening a browser to a specified web page<\/li> \n<li> opening the map application to a specified location<\/li><\/ul> \nYou can also launch activities that return text data.  See the documentation on using the Activity Starter for examples.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/activityStarter.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Action", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ActivityClass", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ActivityPackage", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "DataType", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "DataUri", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ExtraKey", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ExtraValue", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ResultName", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "Action", "description": "Returns the action that will be used to start the activity.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ActivityClass", "description": "Returns the class part of the specific component that will be started.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ActivityPackage", "description": "Returns the package part of the specific component that will be started.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DataType", "description": "Returns the MIME type to pass to the activity.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DataUri", "description": "Returns the data URI that will be used to start the activity.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ExtraKey", "description": "Returns the extra key that will be passed to the activity.\nDEPRECATED: New code should use Extras property instead.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ExtraValue", "description": "Returns the extra value that will be passed to the activity.\nDEPRECATED: New code should use Extras property instead.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Extras", "description": "Specifies the list of key-value pairs that will be passed as extra data to the activity.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "Result", "description": "Returns the result from the activity.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ResultName", "description": "Returns the name that will be used to retrieve a result from the activity.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ResultType", "description": "Returns the MIME type from the activity.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ResultUri", "description": "Returns the URI from the activity.", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "ActivityCanceled", "description": "Event raised if this ActivityStarter returns because the activity was canceled.", "deprecated": "false", "params": []}
,
    { "name": "ActivityError", "description": "The ActivityError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "AfterActivity", "description": "Event raised after this ActivityStarter returns.", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "ResolveActivity", "description": "Returns the name of the activity that corresponds to this ActivityStarter, or an empty string if no corresponding activity can be found.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "StartActivity", "description": "Start the activity corresponding to this ActivityStarter.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ball",
  "name": "Ball",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "ANIMATION",
  "helpString": "<p>A round 'sprite' that can be placed on a <code>Canvas<\/code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite<\/code>s and other <code>Ball<\/code>s) and the edge of the Canvas, and move according to its property values.<\/p><p>For example, to have a <code>Ball<\/code> move 4 pixels toward the top of a <code>Canvas<\/code> every 500 milliseconds (half second), you would set the <code>Speed<\/code> property to 4 [pixels], the <code>Interval<\/code> property to 500 [milliseconds], the <code>Heading<\/code> property to 90 [degrees], and the <code>Enabled<\/code> property to <code>True<\/code>.<\/p><p>The difference between a <code>Ball<\/code> and an <code>ImageSprite<\/code> is that the latter can get its appearance from an image file, while a <code>Ball<\/code>'s appearance can be changed only by varying its <code>PaintColor<\/code> and <code>Radius<\/code> properties.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Heading", "editorType": "float", "defaultValue": "0", "editorArgs": []},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100", "editorArgs": []},
{ "name": "OriginAtCenter", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Radius", "editorType": "non_negative_integer", "defaultValue": "5", "editorArgs": []},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "X", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0", "editorArgs": []}],
  "blockProperties": [{ "name": "Enabled", "description": "Controls whether the Ball moves and can be interacted with through collisions, dragging, touching, and flinging.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Heading", "description": "Returns the Ball's heading in degrees above the positive x-axis.  Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Interval", "description": "The interval in milliseconds at which the Ball's position is updated.  For example, if the interval is 50 and the speed is 10, then every 50 milliseconds the sprite will move 10 pixels in the heading direction.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "OriginAtCenter", "description": "Whether the x- and y-coordinates should represent the center of the Ball (true) or its left and top edges (false).", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "PaintColor", "description": "The color of the Ball.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Radius", "description": "The distance from the edge of the Ball to its center.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Speed", "description": "The number of pixels that the Ball should move every interval, if enabled.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Whether the Ball is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "X", "description": "The horizontal coordinate of the Ball, increasing as the Ball moves right. If the property OriginAtCenter is true, the coordinate is for the center of the Ball; otherwise, it is for the leftmost point of the Ball.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Y", "description": "The vertical coordinate of the Ball, increasing as the Ball moves down. If the property OriginAtCenter is true, the coordinate is for the center of the Ball; otherwise, it is for the uppermost point of the Ball.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Z", "description": "How the `Ball` should be layered relative to other", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "CollidedWith", "description": "Event handler called when two enabled sprites (", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "Dragged", "description": "Event handler called when a Ball is dragged. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Ball won't actually move anywhere in response to the Dragged event unless MoveTo is explicitly called. For smooth movement, each of its coordinates should be set to the sum of its initial value and the difference between its current and previous values.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"}]}
,
    { "name": "EdgeReached", "description": "Event handler called when the Ball reaches an edge of the screen. If Bounce is then called with that edge, the Ball will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north (1), northeast (2), east (3), southeast (4), south (-1), southwest (-2), west (-3), and northwest (-4).", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]}
,
    { "name": "Flung", "description": "Event handler called when a fling gesture (quick swipe) is made on an enabled Ball. This provides the x and y coordinates of the start of the fling (relative to the upper left of the canvas), the speed (pixels per millisecond), the heading (0-360 degrees), and the x and y velocity components of the fling's vector.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"}]}
,
    { "name": "NoLongerCollidingWith", "description": "Event handler called when a pair of sprites (Balls and ImageSprites) are no longer colliding.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "TouchDown", "description": "Event handler called when the user begins touching an enabled Ball (placing their finger on a Ball and leaving it there). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "Event handler called when the user stops touching an enabled Ball (lifting their finger after a TouchDown event). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "Event handler called when the user touches an enabled Ball and then immediately lifts their finger. The provided x and y coordinates are relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
],
  "methods": [{ "name": "Bounce", "description": "Makes the Ball bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]},
    { "name": "CollidingWith", "description": "Indicates whether a collision has been registered between this Ball and the passed sprite (Ball or ImageSprite).", "deprecated": "false", "params": [{ "name": "other", "type": "component"}], "returnType": "boolean"},
    { "name": "MoveIntoBounds", "description": "Moves the Ball back in bounds if part of it extends out of bounds, having no effect otherwise. If the Ball is too wide to fit on the canvas, this aligns the left side of the Ball with the left side of the canvas. If the Ball is too tall to fit on the canvas, this aligns the top side of the Ball with the top side of the canvas.", "deprecated": "false", "params": []},
    { "name": "MoveTo", "description": "Sets the x and y coordinates of the Ball. If CenterAtOrigin is true, the center of the Ball will be placed here. Otherwise, the top left edge of the Ball will be placed at the specified coordinates.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointInDirection", "description": "Sets the heading of the Ball toward the point with the coordinates (x, y).", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointTowards", "description": "Turns the Ball to point towards a designated target sprite (Ball or ImageSprite). The new heading will be parallel to the line joining the centerpoints of the two sprites.", "deprecated": "false", "params": [{ "name": "target", "type": "component"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.BarcodeScanner",
  "name": "BarcodeScanner",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "Component for using the Barcode Scanner to read a barcode",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/barcodeScanner.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "UseExternalScanner", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Result", "description": "Text result of the previous scan.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UseExternalScanner", "description": "If true App Inventor will look for and use an external scanning program such as \"Bar Code Scanner.\"", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterScan", "description": "Indicates that the scanner has read a (text) result and provides the result", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "DoScan", "description": "Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Barometer",
  "name": "Barometer",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "A sensor component that can measure the ambient air pressure.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/barometer.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "RefreshTime", "editorType": "non_negative_integer", "defaultValue": "1000", "editorArgs": []}],
  "blockProperties": [{ "name": "AirPressure", "description": "The air pressure in hPa (millibar), if the sensor is available and enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "Specifies whether or not the device has the hardware to support the Barometer component.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then device will listen for changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "RefreshTime", "description": "The requested minimum time in milliseconds between changes in readings being reported. Android is not guaranteed to honor the request. Setting this property has no effect on pre-Gingerbread devices.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AirPressureChanged", "description": "Called when a change is detected in the air pressure (provided in hPa).", "deprecated": "false", "params": [{ "name": "pressure", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.BluetoothClient",
  "name": "BluetoothClient",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "CONNECTIVITY",
  "helpString": "Bluetooth client component",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8", "editorArgs": []},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0", "editorArgs": []},
{ "name": "DisconnectOnError", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AddressesAndNames", "description": "The addresses and names of paired Bluetooth devices", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "Whether Bluetooth is available on the device", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "CharacterEncoding", "description": "Sets the character encoding to use when sending and receiving text. The\n default value is `\"UTF-8\"", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DelimiterByte", "description": "Sets the delimiter byte to use when passing a negative number for the\n numberOfBytes parameter when calling ReceiveText, ReceiveSignedBytes, or\n ReceiveUnsignedBytes. Those functions will continue to read bytes until\n they encounter the value specified here. The default delimiter is 0, the\n null byte.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "DisconnectOnError", "description": "Disconnects BluetoothClient automatically when an error occurs.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether Bluetooth is enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HighByteFirst", "description": "Returns `true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "IsConnected", "description": "On devices with API level 14 (LEVEL_ICE_CREAM_SANDWICH) or higher, this property returned is accurate. But on old devices with API level lower than 14, it may not return the current state of connection(e.g., it might be disconnected but you may not know until you attempt to read\/write the socket.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Secure", "description": "Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BluetoothError", "description": "The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "BytesAvailableToReceive", "description": "Returns an estimate of the number of bytes that can be received without blocking", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Connect", "description": "Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.", "deprecated": "false", "params": [{ "name": "address", "type": "text"}], "returnType": "boolean"},
    { "name": "ConnectWithUUID", "description": "Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.", "deprecated": "false", "params": [{ "name": "address", "type": "text"},{ "name": "uuid", "type": "text"}], "returnType": "boolean"},
    { "name": "Disconnect", "description": "Disconnect from the connected Bluetooth device.", "deprecated": "false", "params": []},
    { "name": "IsDevicePaired", "description": "Checks whether the Bluetooth device with the specified address is paired.", "deprecated": "false", "params": [{ "name": "address", "type": "text"}], "returnType": "boolean"},
    { "name": "ReceiveSigned1ByteNumber", "description": "Receive a signed 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned2ByteNumber", "description": "Receive a signed 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned4ByteNumber", "description": "Receive a signed 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSignedBytes", "description": "Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "ReceiveText", "description": "Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "text"},
    { "name": "ReceiveUnsigned1ByteNumber", "description": "Receive an unsigned 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned2ByteNumber", "description": "Receive a unsigned 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned4ByteNumber", "description": "Receive a unsigned 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsignedBytes", "description": "Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "Send1ByteNumber", "description": "Send a 1-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send2ByteNumber", "description": "Send a 2-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send4ByteNumber", "description": "Send a 4-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "SendBytes", "description": "Send a list of byte values to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}]},
    { "name": "SendText", "description": "Send text to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.BluetoothServer",
  "name": "BluetoothServer",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "CONNECTIVITY",
  "helpString": "Bluetooth server component",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8", "editorArgs": []},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0", "editorArgs": []},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Whether Bluetooth is available on the device", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "CharacterEncoding", "description": "Sets the character encoding to use when sending and receiving text. The\n default value is `\"UTF-8\"", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DelimiterByte", "description": "Sets the delimiter byte to use when passing a negative number for the\n numberOfBytes parameter when calling ReceiveText, ReceiveSignedBytes, or\n ReceiveUnsignedBytes. Those functions will continue to read bytes until\n they encounter the value specified here. The default delimiter is 0, the\n null byte.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether Bluetooth is enabled", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HighByteFirst", "description": "Returns `true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "IsAccepting", "description": "Returns true if this BluetoothServer component is accepting an\n incoming connection.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsConnected", "description": "On devices with API level 14 (LEVEL_ICE_CREAM_SANDWICH) or higher, this property returned is accurate. But on old devices with API level lower than 14, it may not return the current state of connection(e.g., it might be disconnected but you may not know until you attempt to read\/write the socket.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Secure", "description": "Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BluetoothError", "description": "The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
,
    { "name": "ConnectionAccepted", "description": "Indicates that a bluetooth connection has been accepted.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "AcceptConnection", "description": "Accept an incoming connection with the Serial Port Profile (SPP).", "deprecated": "false", "params": [{ "name": "serviceName", "type": "text"}]},
    { "name": "AcceptConnectionWithUUID", "description": "Accept an incoming connection with a specific UUID.", "deprecated": "false", "params": [{ "name": "serviceName", "type": "text"},{ "name": "uuid", "type": "text"}]},
    { "name": "BytesAvailableToReceive", "description": "Returns an estimate of the number of bytes that can be received without blocking", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Disconnect", "description": "Disconnect from the connected Bluetooth device.", "deprecated": "false", "params": []},
    { "name": "ReceiveSigned1ByteNumber", "description": "Receive a signed 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned2ByteNumber", "description": "Receive a signed 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSigned4ByteNumber", "description": "Receive a signed 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveSignedBytes", "description": "Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "ReceiveText", "description": "Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "text"},
    { "name": "ReceiveUnsigned1ByteNumber", "description": "Receive an unsigned 1-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned2ByteNumber", "description": "Receive a unsigned 2-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsigned4ByteNumber", "description": "Receive a unsigned 4-byte number from the connected Bluetooth device.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ReceiveUnsignedBytes", "description": "Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.", "deprecated": "false", "params": [{ "name": "numberOfBytes", "type": "number"}], "returnType": "list"},
    { "name": "Send1ByteNumber", "description": "Send a 1-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send2ByteNumber", "description": "Send a 2-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "Send4ByteNumber", "description": "Send a 4-byte number to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "number", "type": "text"}]},
    { "name": "SendBytes", "description": "Send a list of byte values to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}]},
    { "name": "SendText", "description": "Send text to the connected Bluetooth device.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "StopAccepting", "description": "Stop accepting an incoming connection.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Button",
  "name": "Button",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Button with the ability to detect clicks.  Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled<\/code>), can be changed in the Designer or in the Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap Button to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, Button text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, Button text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for Button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for Button text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Button, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Button as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `Button`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a Button that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on Button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Button should be visible on the screen. Value is true if the Button is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Button, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Button as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "User tapped and released the button.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the Button so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "User held the button down.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the Button so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the Button was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the Button has been released.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Camcorder",
  "name": "Camcorder",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "A component to record a video using the device's camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camcorder.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [],
  "blockProperties": [],
  "events": [{ "name": "AfterRecording", "description": "Indicates that a video was recorded with the camera and provides the path to\n the stored video.", "deprecated": "false", "params": [{ "name": "clip", "type": "text"}]}
],
  "methods": [{ "name": "RecordVideo", "description": "Records a video, then raises the", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Camera",
  "name": "Camera",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "A component to take a picture using the device's camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camera.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [],
  "blockProperties": [{ "name": "UseFront", "description": "Returns true if the front-facing camera is to be used (when available)", "type": "boolean", "rw": "read-write", "deprecated": "true"}],
  "events": [{ "name": "AfterPicture", "description": "Called after the picture is taken. The text argument `image` is the path that can be used to\n locate the image on the phone.", "deprecated": "false", "params": [{ "name": "image", "type": "text"}]}
],
  "methods": [{ "name": "TakePicture", "description": "Takes a picture, then raises the", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Canvas",
  "name": "Canvas",
  "external": "false",
  "version": "13",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "ANIMATION",
  "helpString": "<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.<\/p> <p>The <code>BackgroundColor<\/code>, <code>PaintColor<\/code>, <code>BackgroundImage<\/code>, <code>Width<\/code>, and <code>Height<\/code> of the Canvas can be set in either the Designer or in the Blocks Editor.  The <code>Width<\/code> and <code>Height<\/code> are measured in pixels and must be positive.<\/p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas<\/li><li>Y is the number of pixels away from the top edge of the Canvas<\/li><\/ul>.<\/p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite<\/code> (<code>ImageSprite<\/code> or <code>Ball<\/code>) has been dragged.  There are also methods for drawing points, lines, and circles.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "conditionals":{
    "permissions": {
      "Save": [
        "android.permission.WRITE_EXTERNAL_STORAGE"
      ],
      "SaveAs": [
        "android.permission.WRITE_EXTERNAL_STORAGE"
      ]
    }
  },
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "ExtendMovesOutsideCanvas", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "LineWidth", "editorType": "non_negative_float", "defaultValue": "2.0", "editorArgs": []},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The color of the canvas background.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundImage", "description": "The name of a file containing the background image for the canvas", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundImageinBase64", "description": "Set the background image in Base64 format. This requires API level >= 8. For devices with API level less than 8, setting this will end up with an empty background.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ExtendMovesOutsideCanvas", "description": "Determines whether moves can extend beyond the canvas borders.   Default is false. This should normally be false, and the property is provided for backwards compatibility.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size of text drawn on the canvas.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the `Canvas`'s vertical height, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Canvas as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "LineWidth", "description": "The width of lines drawn on the canvas.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "PaintColor", "description": "The color in which lines are drawn", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Determines the alignment of the text drawn by DrawText() or DrawAngle() with respect to the point specified by that command: point at the left of the text, point at the center of the text, or point at the right of the text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Canvas should be visible on the screen. Value is true if the Canvas is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the `Canvas`, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Canvas as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Dragged", "description": "When the user does a drag from one point (prevX, prevY) to\n another (x, y).  The pair (startX, startY) indicates where the\n user first touched the screen, and \"draggedAnySprite\" indicates whether a\n sprite is being dragged.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"},{ "name": "draggedAnySprite", "type": "boolean"}]}
,
    { "name": "Flung", "description": "When a fling gesture (quick swipe) is made on the canvas: provides\n the (x,y) position of the start of the fling, relative to the upper\n left of the canvas. Also provides the speed (pixels per millisecond) and heading\n (0-360 degrees) of the fling, as well as the x velocity and y velocity\n components of the fling's vector. The value \"flungSprite\" is true if a sprite\n was located near the the starting point of the fling gesture.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"},{ "name": "flungSprite", "type": "boolean"}]}
,
    { "name": "TouchDown", "description": "When the user begins touching the canvas (places finger on canvas and\n leaves it there): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "When the user stops touching the canvas (lifts finger after a\n TouchDown event): provides the (x,y) position of the touch, relative\n to the upper left of the canvas", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "When the user touches the canvas and then immediately lifts finger: provides\n the (x,y) position of the touch, relative to the upper left of the canvas.  TouchedAnySprite\n is true if the same touch also touched a sprite, and false otherwise.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "touchedAnySprite", "type": "boolean"}]}
],
  "methods": [{ "name": "Clear", "description": "Clears anything drawn on this Canvas but not any background color or image.", "deprecated": "false", "params": []},
    { "name": "DrawArc", "description": "Draw an arc on Canvas, by drawing an arc from a specified oval (specified by left, top, right & bottom). Start angle is 0 when heading to the right, and increase when rotate clockwise. When useCenter is true, a sector will be drawed instead of an arc. When fill is true, a filled arc (or sector) will be drawed instead of just an outline.", "deprecated": "false", "params": [{ "name": "left", "type": "number"},{ "name": "top", "type": "number"},{ "name": "right", "type": "number"},{ "name": "bottom", "type": "number"},{ "name": "startAngle", "type": "number"},{ "name": "sweepAngle", "type": "number"},{ "name": "useCenter", "type": "boolean"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawCircle", "description": "Draws a circle (filled in) with the given radius centered at the given coordinates on the\n Canvas.", "deprecated": "false", "params": [{ "name": "centerX", "type": "number"},{ "name": "centerY", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawLine", "description": "Draws a line between the given coordinates on the canvas.", "deprecated": "false", "params": [{ "name": "x1", "type": "number"},{ "name": "y1", "type": "number"},{ "name": "x2", "type": "number"},{ "name": "y2", "type": "number"}]},
    { "name": "DrawPoint", "description": "Draws a point at the given coordinates on the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawShape", "description": "Draws a shape on the canvas. pointList should be a list contains sub-lists with two number which represents a coordinate. The first point and last point does not need to be the same. e.g. ((x1 y1) (x2 y2) (x3 y3)) When fill is true, the shape will be filled.", "deprecated": "false", "params": [{ "name": "pointList", "type": "list"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawText", "description": "Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawTextAtAngle", "description": "Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "angle", "type": "number"}]},
    { "name": "GetBackgroundPixelColor", "description": "Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}], "returnType": "number"},
    { "name": "GetPixelColor", "description": "Gets the color of the specified point.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}], "returnType": "number"},
    { "name": "Save", "description": "Saves a picture of this Canvas to the device's external storage. If an error occurs, the Screen's ErrorOccurred event will be called.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "SaveAs", "description": "Saves a picture of this Canvas to the device's external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}], "returnType": "text"},
    { "name": "SetBackgroundPixelColor", "description": "Sets the color of the specified point. This differs from DrawPoint by having an argument for color.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.CheckBox",
  "name": "CheckBox",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF", "editorArgs": []},
{ "name": "Checked", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the CheckBox as an alpha-red-green-blue integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Checked", "description": "True if the box is checked, false otherwise.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "True if the CheckBox is active and clickable.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Set to true if the text of the CheckBox should be bold.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Set to true if the text of the CheckBox should be italic.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "Specifies the text font size of the CheckBox in scale-independent pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Specifies the text font face of the CheckBox.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the CheckBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the CheckBox as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Specifies the text displayed by the CheckBox.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "Specifies the text color of the CheckBox as an alpha-red-green-blue integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the CheckBox should be visible on the screen. Value is true if the CheckBox is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the CheckBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the CheckBox as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Changed", "description": "User tapped and released the CheckBox.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "CheckBox became the focused component.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "CheckBox stopped being the focused component.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Circle",
  "name": "Circle",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "Circle",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Description", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Draggable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EnableInfobox", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FillColor", "editorType": "color", "defaultValue": "&HFFFF0000", "editorArgs": []},
{ "name": "FillOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "Latitude", "editorType": "latitude", "defaultValue": "0", "editorArgs": []},
{ "name": "Longitude", "editorType": "longitude", "defaultValue": "0", "editorArgs": []},
{ "name": "Radius", "editorType": "non_negative_float", "defaultValue": "0", "editorArgs": []},
{ "name": "StrokeColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "StrokeOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "StrokeWidth", "editorType": "integer", "defaultValue": "1", "editorArgs": []},
{ "name": "Title", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Description", "description": "The description displayed in the info window that appears when the user clicks on the Circle.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Draggable", "description": "The Draggable property is used to set whether or not the user can drag the Circle by long-pressing and then dragging the Circle to a new location.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableInfobox", "description": "Enable or disable the infobox window display when the user taps the Circle.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FillColor", "description": "The paint color used to fill in the Circle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FillOpacity", "description": "The opacity of the interior of the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Latitude", "description": "The latitude of the center of the circle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Longitude", "description": "The longitude of the center of the circle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Radius", "description": "The radius of the circle in meters.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeColor", "description": "The paint color used to outline the Circle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeOpacity", "description": "The opacity of the stroke used to outline the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeWidth", "description": "The width of the stroke used to outline the Circle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "The title displayed in the info window that appears when the user clicks on the Circle.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Type", "description": "Returns the type of the feature. For Circles, this returns the text \"Circle\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Circle should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "The user clicked on the Circle.", "deprecated": "false", "params": []}
,
    { "name": "Drag", "description": "The user dragged the Circle.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "The user long-pressed on the Circle. This event will only trigger if Draggable is false.", "deprecated": "false", "params": []}
,
    { "name": "StartDrag", "description": "The user started a drag operation.", "deprecated": "false", "params": []}
,
    { "name": "StopDrag", "description": "The user stopped a drag operation.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "DistanceToFeature", "description": "Compute the distance, in meters, between two map features.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "DistanceToPoint", "description": "Compute the distance, in meters, between a Circle and a latitude, longitude point.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "centroid", "type": "boolean"}], "returnType": "number"},
    { "name": "HideInfobox", "description": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.", "deprecated": "false", "params": []},
    { "name": "SetLocation", "description": "Set the center of the Circle.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]},
    { "name": "ShowInfobox", "description": "Show the infobox for the Circle. This will show the infobox even if EnableInfobox is set to false.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Clock",
  "name": "Clock",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.<\/p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM\/DD\/YYYY HH:mm:ss a, or MMM d, yyyyHH:mm. The empty string will provide the default format, which is \"MMM d, yyyy HH:mm:ss a\" for FormatDateTime \"MMM d, yyyy\" for FormatDate. To see all possible format, please see <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/text\/SimpleDateFormat.html\" _target=\"_blank\">here<\/a>. <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/clock.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "TimerAlwaysFires", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "TimerEnabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "TimerInterval", "editorType": "non_negative_integer", "defaultValue": "1000", "editorArgs": []}],
  "blockProperties": [{ "name": "TimerAlwaysFires", "description": "Will fire even when application is not showing on the screen if true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TimerEnabled", "description": "Fires timer if true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TimerInterval", "description": "Interval between timer events in ms", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Timer", "description": "The Timer event runs when the timer has gone off.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "AddDays", "description": "Returns an instant in time some days after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddDuration", "description": "Returns an instant in time some duration after the argument", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddHours", "description": "Returns an instant in time some hours after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddMinutes", "description": "Returns an instant in time some minutes after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddMonths", "description": "Returns an instant in time some months after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddSeconds", "description": "Returns an instant in time some seconds after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddWeeks", "description": "Returns An instant in time some weeks after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "AddYears", "description": "Returns an instant in time some years after the given instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "quantity", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "DayOfMonth", "description": "Returns the day of the month (1-31) from the instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Duration", "description": "Returns duration, which is milliseconds elapsed between instants.", "deprecated": "false", "params": [{ "name": "start", "type": "InstantInTime"},{ "name": "end", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "DurationToDays", "description": "Converts the duration to the number of days.", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToHours", "description": "Converts the duration to the number of hours.", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToMinutes", "description": "Converts the duration to the number of minutes.", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToSeconds", "description": "Converts the duration to the number of seconds.", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "DurationToWeeks", "description": "Converts the duration to the number of weeks.", "deprecated": "false", "params": [{ "name": "duration", "type": "number"}], "returnType": "number"},
    { "name": "FormatDate", "description": "Text representing the date of an instant in the specified pattern", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "pattern", "type": "text"}], "returnType": "text"},
    { "name": "FormatDateTime", "description": "Returns text representing the date and time of an instant in the specified pattern", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"},{ "name": "pattern", "type": "text"}], "returnType": "text"},
    { "name": "FormatTime", "description": "Text representing the time of an instant", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "GetMillis", "description": "Returns the instant in time measured as milliseconds since 1970.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Hour", "description": "Returns the hour of the day (0-23) from the instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "MakeDate", "description": "Returns an instant in time specified by year, month, date in UTC.\nValid values for the month field are 1-12 and 1-31 for the day field.", "deprecated": "false", "params": [{ "name": "year", "type": "number"},{ "name": "month", "type": "number"},{ "name": "day", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "MakeInstant", "description": "Returns an instant in time specified by MM\/dd\/YYYY hh:mm:ss or MM\/dd\/YYYY or hh:mm.", "deprecated": "false", "params": [{ "name": "from", "type": "text"}], "returnType": "InstantInTime"},
    { "name": "MakeInstantFromMillis", "description": "Returns an instant in time specified by the milliseconds since 1970 in UTC.", "deprecated": "false", "params": [{ "name": "millis", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "MakeInstantFromParts", "description": "Returns an instant in time specified by year, month, date, hour, minute, second in UTC.", "deprecated": "false", "params": [{ "name": "year", "type": "number"},{ "name": "month", "type": "number"},{ "name": "day", "type": "number"},{ "name": "hour", "type": "number"},{ "name": "minute", "type": "number"},{ "name": "second", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "MakeTime", "description": "Returns an instant in time specified by hour, minute, second in UTC.", "deprecated": "false", "params": [{ "name": "hour", "type": "number"},{ "name": "minute", "type": "number"},{ "name": "second", "type": "number"}], "returnType": "InstantInTime"},
    { "name": "Minute", "description": "Returns the minute of the hour (0-59) from the instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "Month", "description": "Returns the month of the year represented as a number from 1 to 12).", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "MonthName", "description": "Returns the name of the month from the instant, e.g., January, February, March...", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "Now", "description": "Returns the current instant in time read from phone's clock.", "deprecated": "false", "params": [], "returnType": "InstantInTime"},
    { "name": "Second", "description": "Returns the second of the minute (0-59) from the instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "SystemTime", "description": "Returns the phone's internal time.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Weekday", "description": "Returns the day of the week represented as a number from 1 (Sunday) to 7 (Saturday).", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"},
    { "name": "WeekdayName", "description": "Returns the name of the day of the week from the instant.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "text"},
    { "name": "Year", "description": "The year", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.CloudDB",
  "name": "CloudDB",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component that communicates with CloudDB server to store and retrieve information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/cloudDB.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "DefaultRedisServer", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ProjectID", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "RedisPort", "editorType": "integer", "defaultValue": "6381", "editorArgs": []},
{ "name": "RedisServer", "editorType": "string", "defaultValue": "DEFAULT", "editorArgs": []},
{ "name": "Token", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "UseSSL", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "DefaultRedisServer", "description": "The Default Redis Server to use.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "ProjectID", "description": "Gets the ProjectID for this CloudDB project.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "RedisPort", "description": "The Redis Server port to use. Defaults to 6381", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "RedisServer", "description": "The Redis Server to use to store data. A setting of \"DEFAULT\" means that the MIT server will be used.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Token", "description": "This field contains the authentication token used to login to the backed Redis server. For the \"DEFAULT\" server, do not edit this value, the system will fill it in for you. A system administrator may also provide a special value to you which can be used to share data between multiple projects from multiple people. If using your own Redis server, set a password in the server's config and enter it here.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "UseSSL", "description": "Set to true to use SSL to talk to CloudDB\/Redis server. This should be set to True for the \"DEFAULT\" server.", "type": "boolean", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "CloudDBError", "description": "Indicates that an error occurred while communicating with the CloudDB Redis server.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "DataChanged", "description": "Indicates that the data in the CloudDB project has changed. Launches an event with the\n `tag`", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "FirstRemoved", "description": "Event triggered by the \"RemoveFirstFromList\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.", "deprecated": "false", "params": [{ "name": "value", "type": "any"}]}
,
    { "name": "GotValue", "description": "Indicates that a", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "TagList", "description": "Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.", "deprecated": "false", "params": [{ "name": "value", "type": "list"}]}
],
  "methods": [{ "name": "AppendValueToList", "description": "Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "itemToAdd", "type": "any"}]},
    { "name": "ClearTag", "description": "Remove the tag from CloudDB.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "CloudConnected", "description": "returns True if we are on the network and will likely be able to connect to the CloudDB server.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "GetTagList", "description": "Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.", "deprecated": "false", "params": []},
    { "name": "GetValue", "description": "Get the Value for a tag, doesn't return the value but will cause a GotValue event to fire when the value is looked up.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueIfTagNotThere", "type": "any"}]},
    { "name": "RemoveFirstFromList", "description": "Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "StoreValue", "description": "Store a value at a tag.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.ContactPicker",
  "name": "ContactPicker",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul>\n<li> <code>ContactName<\/code>: the contact's name <\/li>\n <li> <code>EmailAddress<\/code>: the contact's primary email address <\/li>\n <li> <code>ContactUri<\/code>: the contact's URI on the device <\/li>\n<li> <code>EmailAddressList<\/code>: a list of the contact's email addresses <\/li>\n <li> <code>PhoneNumber<\/code>: the contact's primary phone number (on Later Android Verisons)<\/li>\n <li> <code>PhoneNumberList<\/code>: a list of the contact's phone numbers (on Later Android Versions)<\/li>\n <li> <code>Picture<\/code>: the name of the file containing the contact's image, which can be used as a <code>Picture<\/code> property value for the <code>Image<\/code> or <code>ImageSprite<\/code> component.<\/li><\/ul>\n<\/p><p>Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).\n<\/p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ContactName", "description": "Returns the full name of the selected contact, or the empty string if a name is unavailable.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ContactUri", "description": "URI that specifies the location of the contact on the device.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddress", "description": "Returns the primary email address of the selected contact, or the empty string if an email\n address is unavailable.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddressList", "description": "Returns a list of email addresses associated with the selected contact.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap ContactPicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, ContactPicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, ContactPicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for ContactPicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for ContactPicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the ContactPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the ContactPicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "Returns the primary phone number associated with the selected contact, or the empty string if\n no phone number is associated with the contact.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PhoneNumberList", "description": "Returns a list of phone numbers associated with the selected contact.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Picture", "description": "Returns a picture URI for the selected contact, which can be\n used to retrieve the contact's photo and other fields.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `ContactPicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a ContactPicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on ContactPicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the ContactPicker should be visible on the screen. Value is true if the ContactPicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the ContactPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the ContactPicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the `ContactPicker` activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the `ContactPicker` is clicked or the picker is shown\n using the", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the ContactPicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the ContactPicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the ContactPicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the ContactPicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the ContactPicker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "ViewContact", "description": "view a contact via its URI", "deprecated": "false", "params": [{ "name": "uri", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.DatePicker",
  "name": "DatePicker",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Day", "description": "the Day of the month that was last picked using the DatePicker.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap DatePicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, DatePicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, DatePicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for DatePicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for DatePicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the DatePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the DatePicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Instant", "description": "the instant of the date that was last picked using the DatePicker.", "type": "InstantInTime", "rw": "read-only", "deprecated": "false"},
    { "name": "Month", "description": "the number of the Month that was last picked using the DatePicker. Note that months start in 1 = January, 12 = December.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "MonthInText", "description": "Returns the name of the Month that was last picked using the DatePicker, in textual format.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `DatePicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a DatePicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on DatePicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the DatePicker should be visible on the screen. Value is true if the DatePicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the DatePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the DatePicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Year", "description": "the Year that was last picked using the DatePicker", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "AfterDateSet", "description": "Event that runs after the user chooses a Date in the dialog", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the DatePicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the DatePicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the DatePicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the DatePicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LaunchPicker", "description": "Launches the DatePicker dialog.", "deprecated": "false", "params": []},
    { "name": "SetDateToDisplay", "description": "Allows the user to set the date to be displayed when the date picker opens.\nValid values for the month field are 1-12 and 1-31 for the day field.", "deprecated": "false", "params": [{ "name": "year", "type": "number"},{ "name": "month", "type": "number"},{ "name": "day", "type": "number"}]},
    { "name": "SetDateToDisplayFromInstant", "description": "Allows the user to set the date from the instant to be displayed when the date picker opens.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.EmailPicker",
  "name": "EmailPicker",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "An EmailPicker is a kind of text box.  If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry.  If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text<\/code> property.  If the <code>Text<\/code> property is initially empty, the contents of the <code>Hint<\/code> property will be faintly shown in the text box as a hint to the user.<\/p>\n <p>Other properties affect the appearance of the text box (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be used (<code>Enabled<\/code>).<\/p>\n<p>Text boxes like this are usually used with <code>Button<\/code> components, with the user clicking on the button when text entry is complete.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Hint", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Text", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into the EmailPicker.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the EmailPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the EmailPicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the EmailPicker to provide a hint as to what the user should enter.  This can only be seen if the Text property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Returns the textbox contents.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the EmailPicker should be visible on the screen. Value is true if the EmailPicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the EmailPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the EmailPicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when the `EmailPicker` is selected for input, such as by\n the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when the EmailPicker is no longer selected for input, such as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "RequestFocus", "description": "Sets the EmailPicker active.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3ColorSensor",
  "name": "Ev3ColorSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30", "editorArgs": []},
{ "name": "ColorChangedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Mode", "editorType": "lego_ev3_color_sensor_mode", "defaultValue": "reflected", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "60", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorChangedEventEnabled", "description": "Whether the ColorChanged event should fire when the Mode property is set to \"color\" and the detected color changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Mode", "description": "Specifies the mode of the sensor.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "ColorChanged", "description": "Called when the detected color has changed. The ColorChanged event will occur if the Mode property is set to \"color\" and the ColorChangedEventEnabled property is set to True.", "deprecated": "false", "params": [{ "name": "colorCode", "type": "number"},{ "name": "colorName", "type": "text"}]}
,
    { "name": "WithinRange", "description": "Light level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetColorCode", "description": "It returns the color code from 0 to 7 corresponding to no color, black, blue, green, yellow, red, white and brown.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetColorName", "description": "Return the color name in one of \"No Color\", \"Black\", \"Blue\", \"Green\", \"Yellow\", \"Red\", \"White\", \"Brown\".", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetLightLevel", "description": "It returns the light level in percentage, or -1 when the light level cannot be read.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetAmbientMode", "description": "Make the sensor read the light level without reflected light.", "deprecated": "false", "params": []},
    { "name": "SetColorMode", "description": "Enter the color detection mode.", "deprecated": "false", "params": []},
    { "name": "SetReflectedMode", "description": "Make the sensor read the light level with reflected light.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Commands",
  "name": "Ev3Commands",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "GetBatteryCurrent", "description": "Get the battery current.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetBatteryVoltage", "description": "Get the battery voltage.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetFirmwareBuild", "description": "Get the firmware build on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetFirmwareVersion", "description": "Get the firmware version on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetHardwareVersion", "description": "Get the hardware version of EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetOSBuild", "description": "Get the OS build on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetOSVersion", "description": "Get the OS version on EV3.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "KeepAlive", "description": "Keep the EV3 brick from shutdown for a period of time.", "deprecated": "false", "params": [{ "name": "minutes", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3GyroSensor",
  "name": "Ev3GyroSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "Mode", "editorType": "lego_ev3_gyro_sensor_mode", "defaultValue": "angle", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1", "editorArgs": []},
{ "name": "SensorValueChangedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "Mode", "description": "Specifies the mode of the sensor.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "SensorValueChangedEventEnabled", "description": "Whether the SensorValueChanged event should fire when the sensor value changed.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "SensorValueChanged", "description": "Called then the sensor value changed.", "deprecated": "false", "params": [{ "name": "sensorValue", "type": "number"}]}
],
  "methods": [{ "name": "GetSensorValue", "description": "Returns the current angle or rotation speed based on current mode, or -1 if the value cannot be read from sensor.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetAngleMode", "description": "Measures the orientation of the sensor.", "deprecated": "false", "params": []},
    { "name": "SetRateMode", "description": "Measures the angular velocity of the sensor.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Motors",
  "name": "Ev3Motors",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "EnableSpeedRegulation", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "MotorPorts", "editorType": "string", "defaultValue": "ABC", "editorArgs": []},
{ "name": "ReverseDirection", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "StopBeforeDisconnect", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "TachoCountChangedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "WheelDiameter", "editorType": "float", "defaultValue": "4.32", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableSpeedRegulation", "description": "Specifies whether to keep motor rotation at constant speed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MotorPorts", "description": "The motor ports that the motors are connected to. The ports are specified by a sequence of port letters.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "ReverseDirection", "description": "Set whether the direction of motors is reversed or not.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "StopBeforeDisconnect", "description": "Whether to stop the motor before disconnecting.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TachoCountChangedEventEnabled", "description": "Whether the TachoCountChanged event should fire when the angle is changed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WheelDiameter", "description": "Specifies the diameter of the wheels attached on motors.", "type": "number", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "TachoCountChanged", "description": "Called when the tacho count has changed.", "deprecated": "false", "params": [{ "name": "tachoCount", "type": "number"}]}
],
  "methods": [{ "name": "GetTachoCount", "description": "Get the current tacho count.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ResetTachoCount", "description": "Set the current tacho count to zero.", "deprecated": "false", "params": []},
    { "name": "RotateInDistance", "description": "Rotate the motors in a distance.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateInDuration", "description": "Rotate the motors in a period of time.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "milliseconds", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateInTachoCounts", "description": "Rotate the motors in a number of tacho counts.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "tachoCounts", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateIndefinitely", "description": "Start to rotate the motors.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "RotateSyncInDistance", "description": "Rotate the motors at the same speed for a distance in cm.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncInDuration", "description": "Rotate the motors at the same speed in a period of time.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "milliseconds", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncInTachoCounts", "description": "Rotate the motors at the same speed in a number of tacho counts.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "tachoCounts", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "useBrake", "type": "boolean"}]},
    { "name": "RotateSyncIndefinitely", "description": "Start to rotate the motors at the same speed.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "turnRatio", "type": "number"}]},
    { "name": "Stop", "description": "Stop the motors of the robot.", "deprecated": "false", "params": [{ "name": "useBrake", "type": "boolean"}]},
    { "name": "ToggleDirection", "description": "Toggle the direction of motors.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3Sound",
  "name": "Ev3Sound",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "PlayTone", "description": "Make the robot play a tone.", "deprecated": "false", "params": [{ "name": "volume", "type": "number"},{ "name": "frequency", "type": "number"},{ "name": "milliseconds", "type": "number"}]},
    { "name": "StopSound", "description": "Stop any sound on the robot.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3TouchSensor",
  "name": "Ev3TouchSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "PressedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ReleasedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "PressedEventEnabled", "description": "Specifies whether the Pressed event should fire when the touch sensor is\n pressed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ReleasedEventEnabled", "description": "Whether the Released event should fire when the touch sensor is released.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "Pressed", "description": "Called when the touch sensor is pressed.", "deprecated": "false", "params": []}
,
    { "name": "Released", "description": "Called when the touch sensor is pressed.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "IsPressed", "description": "Returns true if the touch sensor is pressed.", "deprecated": "false", "params": [], "returnType": "boolean"}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3UI",
  "name": "Ev3UI",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "DrawCircle", "description": "Draw a circle on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "radius", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "DrawIcon", "description": "Draw a built-in icon on screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "type", "type": "number"},{ "name": "no", "type": "number"}]},
    { "name": "DrawLine", "description": "Draw a line on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x1", "type": "number"},{ "name": "y1", "type": "number"},{ "name": "x2", "type": "number"},{ "name": "y2", "type": "number"}]},
    { "name": "DrawPoint", "description": "Draw a point on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "DrawRect", "description": "Draw a rectangle on the screen.", "deprecated": "false", "params": [{ "name": "color", "type": "number"},{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "width", "type": "number"},{ "name": "height", "type": "number"},{ "name": "fill", "type": "boolean"}]},
    { "name": "FillScreen", "description": "Fill the screen with a color.", "deprecated": "false", "params": [{ "name": "color", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Ev3UltrasonicSensor",
  "name": "Ev3UltrasonicSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsEv3.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_ev3_sensor_port", "defaultValue": "1", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "90", "editorArgs": []},
{ "name": "Unit", "editorType": "lego_ev3_ultrasonic_sensor_mode", "defaultValue": "cm", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the distance goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the distance goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "read-write", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Unit", "description": "Specifies the unit of distance.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Called when the detected distance has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Called when the detected distance has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Called when the detected distance has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetDistance", "description": "Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "SetCmUnit", "description": "Measure the distance in centimeters.", "deprecated": "false", "params": []},
    { "name": "SetInchUnit", "description": "Measure the distance in inches.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.FeatureCollection",
  "name": "FeatureCollection",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "A FeatureCollection contains one or more map features as a group. Any events fired on a feature in the collection will also trigger the corresponding event on the collection object. FeatureCollections can be loaded from external resources as a means of populating a Map with content.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "FeaturesFromGeoJSON", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "Source", "editorType": "geojson_type", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Features", "description": "The list of features placed on this FeatureCollection. This list also includes any features created by calls to FeatureFromDescription", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "FeaturesFromGeoJSON", "description": "Loads a collection of features from the given string. If the string is not valid GeoJSON, the ErrorLoadingFeatureCollection error will be run with url = <string>.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the FeatureCollection, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the FeatureCollection as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Source", "description": "Specifies the source URL used to populate the feature collection. If the feature collection was not loaded from a URL, this will be the empty string.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the FeatureCollection should be visible on the screen. Value is true if the FeatureCollection is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the FeatureCollection, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the FeatureCollection as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "FeatureClick", "description": "The user clicked on a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureDrag", "description": "The user dragged a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureLongClick", "description": "The user long-pressed on a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureStartDrag", "description": "The user started dragging a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureStopDrag", "description": "The user stopped dragging a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "GotFeatures", "description": "A GeoJSON document was successfully read from url. The features specified in the document are provided as a list in features.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "features", "type": "list"}]}
,
    { "name": "LoadError", "description": "An error was encountered while processing a GeoJSON document at the given url. The responseCode parameter will contain an HTTP status code and the errorMessage parameter will contain a detailed error message.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "errorMessage", "type": "text"}]}
],
  "methods": [{ "name": "FeatureFromDescription", "description": "Converts a feature description into an App Inventor map feature. Points are converted into", "deprecated": "false", "params": [{ "name": "description", "type": "list"}], "returnType": "any"},
    { "name": "LoadFromURL", "description": "<p>Load a feature collection in <a href=\"https:\/\/en.wikipedia.org\/wiki\/GeoJSON\">GeoJSON<\/a> format from the given url. On success, the event GotFeatures will be raised with the given url and a list of the features parsed from the GeoJSON as a list of (key, value) pairs. On failure, the LoadError event will be raised with any applicable HTTP response code and error message.<\/p>", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.File",
  "name": "File",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to \/sdcard\/AppInventor\/data to facilitate debugging. If the file path starts with a slash (\/), then the file is created relative to \/sdcard. For example writing a file to \/myFile.txt will write the file in \/sdcard\/myFile.txt.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/file.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "LegacyMode", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "LegacyMode", "description": "Allows app to access files from the root of the external storage directory (legacy mode).", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterFileSaved", "description": "Event indicating that the contents of the file have been written.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]}
,
    { "name": "GotText", "description": "Event indicating that the contents from the file have been read.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]}
],
  "methods": [{ "name": "AppendToFile", "description": "Appends text to the end of a file storage, creating the file if it does not exist. See the help text under SaveFile for information about where files are written.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "fileName", "type": "text"}]},
    { "name": "Delete", "description": "Deletes a file from storage. Prefix the filename with \/ to delete a specific file in the SD card, for instance \/myFile.txt. will delete the file \/sdcard\/myFile.txt. If the file does not begin with a \/, then the file located in the programs private storage will be deleted. Starting the file with \/\/ is an error because assets files cannot be deleted.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "ReadFrom", "description": "Reads text from a file in storage. Prefix the filename with \/ to read from a specific file on the SD card. for instance \/myFile.txt will read the file \/sdcard\/myFile.txt. To read assets packaged with an application (also works for the Companion) start the filename with \/\/ (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from \/sdcard\/AppInventor\/data for the Companion.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "SaveFile", "description": "Saves text to a file. If the filename begins with a slash (\/) the file is written to the sdcard. For example writing to \/myFile.txt will write the file to \/sdcard\/myFile.txt. If the filename does not start with a slash, it will be written in the programs private data directory where it will not be accessible to other programs on the phone. There is a special exception for the AI Companion where these files are written to \/sdcard\/AppInventor\/data to facilitate debugging. Note that this block will overwrite a file if it already exists.\n\nIf you want to add content to a file use the append block.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "fileName", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.FirebaseDB",
  "name": "FirebaseDB",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "EXPERIMENTAL",
  "helpString": "Non-visible component that communicates with a Firebase to store and retrieve information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/firebaseDB.png",
  "licenseName": "",
  "androidMinSdk": 10,
  "properties": [{ "name": "DefaultURL", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "DeveloperBucket", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "FirebaseToken", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "FirebaseURL", "editorType": "FirbaseURL", "defaultValue": "DEFAULT", "editorArgs": []},
{ "name": "Persist", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ProjectBucket", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "DefaultURL", "description": "Property for DefaultURL", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "DeveloperBucket", "description": "Specifies the unique developer path of the Firebase.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "FirebaseToken", "description": "Specifies the token for the default Firebase.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "FirebaseURL", "description": "Gets the URL for this FirebaseDB.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Persist", "description": "If true, variables will retain their values when off-line and the App exits. Values will be uploaded to Firebase the next time the App is run while connected to the network. This is useful for applications which will gather data while not connected to the network. Note: AppendValue and RemoveFirst will not work correctly when off-line, they require a network connection.<br\/><br\/> <i>Note<\/i>: If you set Persist on any Firebase component, on any screen, it makes all Firebase components on all screens persistent. This is a limitation of the low level Firebase library. Also be aware that if you want to set persist to true, you should do so before connecting the Companion for incremental development.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "ProjectBucket", "description": "Sets the ProjectBucket for this FirebaseDB.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "DataChanged", "description": "Indicates that the data in the Firebase has changed.\n Launches an event with the tag and value that have been updated.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "FirebaseError", "description": "Indicates that the communication with the Firebase signaled an error.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "FirstRemoved", "description": "Event triggered by the \"RemoveFirst\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.", "deprecated": "false", "params": [{ "name": "value", "type": "any"}]}
,
    { "name": "GotValue", "description": "Indicates that a GetValue request has succeeded.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "value", "type": "any"}]}
,
    { "name": "TagList", "description": "Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.", "deprecated": "false", "params": [{ "name": "value", "type": "list"}]}
],
  "methods": [{ "name": "AppendValue", "description": "Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToAdd", "type": "any"}]},
    { "name": "ClearTag", "description": "Remove the tag from Firebase", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "GetTagList", "description": "Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.", "deprecated": "false", "params": []},
    { "name": "GetValue", "description": "GetValue asks Firebase to get the value stored under the given tag.\n It will pass valueIfTagNotThere to GotValue if there is no value stored\n under the tag.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueIfTagNotThere", "type": "any"}]},
    { "name": "RemoveFirst", "description": "Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "StoreValue", "description": "Asks Firebase to store the given value under the given tag.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]},
    { "name": "Unauthenticate", "description": "If you are having difficulty with the Companion and you are switching between different Firebase accounts, you may need to use this function to clear internal Firebase caches. You can just use the \"Do It\" function on this block in the blocks editor. Note: You should not normally need to use this block as part of an application.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Form",
  "name": "Form",
  "external": "false",
  "version": "27",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Top-level component containing all other components in the program",
  "helpUrl": "",
  "showOnPalette": "false",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboutScreen", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "AccentColor", "editorType": "color", "defaultValue": "&HFFFF4081", "editorArgs": []},
{ "name": "ActionBar", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AppName", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "BlocksToolkit", "editorType": "subset_json", "defaultValue": "", "editorArgs": []},
{ "name": "CloseScreenAnimation", "editorType": "screen_animation", "defaultValue": "default", "editorArgs": []},
{ "name": "Icon", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "OpenScreenAnimation", "editorType": "screen_animation", "defaultValue": "default", "editorArgs": []},
{ "name": "PrimaryColor", "editorType": "color", "defaultValue": "&HFF3F51B5", "editorArgs": []},
{ "name": "PrimaryColorDark", "editorType": "color", "defaultValue": "&HFF303F9F", "editorArgs": []},
{ "name": "ScreenOrientation", "editorType": "screen_orientation", "defaultValue": "unspecified", "editorArgs": []},
{ "name": "Scrollable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ShowListsAsJson", "editorType": "boolean", "defaultValue": "True", "editorArgs": [], "alwaysSend": true},
{ "name": "ShowStatusBar", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Sizing", "editorType": "sizing", "defaultValue": "Responsive", "editorArgs": [], "alwaysSend": true},
{ "name": "Theme", "editorType": "theme", "defaultValue": "Classic", "editorArgs": []},
{ "name": "Title", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TitleVisible", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "TutorialURL", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "VersionCode", "editorType": "non_negative_integer", "defaultValue": "1", "editorArgs": []},
{ "name": "VersionName", "editorType": "string", "defaultValue": "1.0", "editorArgs": []}],
  "blockProperties": [{ "name": "AboutScreen", "description": "Information about the screen.  It appears when \"About this Application\" is selected from the system menu. Use it to inform people about your app.  In multiple screen apps, each screen has its own AboutScreen info.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "AccentColor", "description": "This is the accent color used for highlights and other user interface accents.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ActionBar", "description": "Property for ActionBar", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "AlignHorizontal", "description": "A number that encodes how contents of the screen are aligned  horizontally. The choices are: 1 = left aligned, 2 = horizontally centered,  3 = right aligned.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AppName", "description": "This is the display name of the installed application in the phone.If the AppName is blank, it will be set to the name of the project when the project is built.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "BackgroundColor property getter method.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundImage", "description": "The screen background image.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "BlocksToolkit", "description": "A JSON string representing the subset for the screen. Authors of template apps can use this to control what components, designer properties, and blocks are available in the project.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "CloseScreenAnimation", "description": "The animation for closing current screen and returning  to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Screen height (y-size).", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Icon", "description": "The image used for your App's display icon should be a square png or jpeg image with dimensions\n up to 1024x1024 pixels. Larger images may cause compiling or installing the app to fail.\n The build server will generate images of standard dimensions for Android devices.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "OpenScreenAnimation", "description": "The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Platform", "description": "The platform the app is running on, for example \"Android\" or \"iOS\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PlatformVersion", "description": "The dotted version number of the platform, such as 4.2.2 or 10.0. This is platform specific and there is no guarantee that it has a particular format.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PrimaryColor", "description": "This is the primary color used for Material UI elements, such as the ActionBar.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "PrimaryColorDark", "description": "This is the primary color used for darker elements in Material UI.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ScreenOrientation", "description": "The requested screen orientation, specified as a text value.  Commonly used values are landscape, portrait, sensor, user and unspecified.  See the Android developer documentation for ActivityInfo.Screen_Orientation for the complete list of possible settings.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Scrollable", "description": "When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowListsAsJson", "description": "If false, lists will be converted to strings using Lisp notation, i.e., as symbols separated by spaces, e.g., (a 1 b2 (c d). If true, lists will appear as in Json or Python, e.g.  [\"a\", 1, \"b\", 2, [\"c\", \"d\"]].  This property appears only in Screen 1, and the value for Screen 1 determines the behavior for all screens. The property defaults to \"true\" meaning that the App Inventor programmer must explicitly set it to \"false\" if Lisp syntax is desired. In older versions of App Inventor, this setting defaulted to false. Older projects should not have been affected by this default settings update.", "type": "boolean", "rw": "invisible", "deprecated": "false", "alwaysSend": true, "defaultValue": "True"},
    { "name": "ShowStatusBar", "description": "The status bar is the topmost bar on the screen. This property reports whether the status bar is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Sizing", "description": "If set to fixed,  screen layouts will be created for a single fixed-size screen and autoscaled. If set to responsive, screen layouts will use the actual resolution of the device.  See the documentation on responsive design in App Inventor for more information. This property appears on Screen1 only and controls the sizing for all screens in the app.", "type": "text", "rw": "invisible", "deprecated": "false", "alwaysSend": true, "defaultValue": "Responsive"},
    { "name": "Theme", "description": "Sets the theme used by the application.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Title", "description": "The caption for the form, which apears in the title bar", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TitleVisible", "description": "The title bar is the top gray bar on the screen. This property reports whether the title bar is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TutorialURL", "description": "A URL to use to populate the Tutorial Sidebar while editing a project. Used as a teaching aid.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "VersionCode", "description": "An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "VersionName", "description": "A string which can be changed to allow Google Play Store users to distinguish between different versions of the App.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "Width", "description": "Screen width (x-size).", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "BackPressed", "description": "Device back button pressed.", "deprecated": "false", "params": []}
,
    { "name": "ErrorOccurred", "description": "Event raised when an error occurs. Only some errors will raise this condition.  For those errors, the system will show a notification by default.  You can use this event handler to prescribe an error behavior different than the default.", "deprecated": "false", "params": [{ "name": "component", "type": "component"},{ "name": "functionName", "type": "text"},{ "name": "errorNumber", "type": "number"},{ "name": "message", "type": "text"}]}
,
    { "name": "Initialize", "description": "The Initialize event is run when the Screen starts and is only run once per screen.", "deprecated": "false", "params": []}
,
    { "name": "OtherScreenClosed", "description": "Event raised when another screen has closed and control has returned to this screen.", "deprecated": "false", "params": [{ "name": "otherScreenName", "type": "text"},{ "name": "result", "type": "any"}]}
,
    { "name": "PermissionDenied", "description": "Event to handle when the app user has denied a needed permission.", "deprecated": "false", "params": [{ "name": "component", "type": "component"},{ "name": "functionName", "type": "text"},{ "name": "permissionName", "type": "text"}]}
,
    { "name": "PermissionGranted", "description": "Event to handle when the app user has granted a needed permission. This event is only run when permission is granted in response to the AskForPermission method.", "deprecated": "false", "params": [{ "name": "permissionName", "type": "text"}]}
,
    { "name": "ScreenOrientationChanged", "description": "Screen orientation changed", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "AskForPermission", "description": "Ask the user to grant access to a dangerous permission.", "deprecated": "false", "params": [{ "name": "permissionName", "type": "text"}]},
    { "name": "HideKeyboard", "description": "Hide the onscreen soft keyboard.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.FusiontablesControl",
  "name": "FusiontablesControl",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "INTERNAL",
  "helpString": "<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.<\/p> <p><font color=red><b>NOTE:<\/b>&nbsp;Google shutdown the Fusion Tables service on December 3, 2019. This component no longer functions.<\/font><\/p> <p>This component uses the <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">Fusion Tables API V2.0<\/a>. <p>Applications using Fusion Tables must authentication to Google's servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special \"Service Account Email Address\" which you obtain from the <a href=\"https:\/\/code.google.com\/apis\/console\/\" target=\"_blank\">Google APIs Console<\/a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the \"UseServiceAuthentication\" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.<\/p> <p>To get an API key, follow these instructions.<\/p> <ol><li>Go to your <a href=\"https:\/\/code.google.com\/apis\/console\/\" target=\"_blank\">Google APIs Console<\/a> and login if necessary.<\/li><li>Select the <i>Services<\/i> item from the menu on the left.<\/li><li>Choose the <i>Fusiontables<\/i> service from the list provided and turn it on.<\/li><li>Go back to the main menu and select the <i>API Access<\/i> item. <\/li><\/ol><p>Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the <i>ApiKey<\/i> property in your Fusiontables app.<\/p><p>Once you have an API key, set the value of the <i>Query<\/i> property to a valid Fusiontables SQL query and call <i>SendQuery<\/i> to execute the query.  App Inventor will send the query to the Fusion Tables server and the <i>GotResult<\/i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.<\/p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">the reference manual<\/a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/fusiontables.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ApiKey", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "KeyFile", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "LoadingDialogMessage", "editorType": "string", "defaultValue": "Please wait loading...", "editorArgs": []},
{ "name": "Query", "editorType": "string", "defaultValue": "show tables", "editorArgs": []},
{ "name": "ServiceAccountEmail", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ShowLoadingDialog", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "UseServiceAuthentication", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "ApiKey", "description": "Setter for the app developer's API key.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "KeyFile", "description": "Specifies the path of the private key file.  This key file is used to get access to the FusionTables API.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "LoadingDialogMessage", "description": "Setter for the loading dialog's message.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Query", "description": "The query to send to the Fusion Tables API. <p>For legal query formats and examples, see the <a href=\"https:\/\/developers.google.com\/fusiontables\/docs\/v2\/getting_started\" target=\"_blank\">Fusion Tables API v2.0 reference manual<\/a>.<\/p> <p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them.<\/p>", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ServiceAccountEmail", "description": "The Service Account Email Address when service account authentication is in use.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowLoadingDialog", "description": "Setter for the loading dialog's visibility.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "UseServiceAuthentication", "description": "Indicates whether a service account should be used for authentication", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotResult", "description": "Indicates that the Fusion Tables query has finished processing, with a result.  The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.", "deprecated": "false", "params": [{ "name": "result", "type": "text"}]}
],
  "methods": [{ "name": "DoQuery", "description": "DEPRECATED. This block is deprecated as of the end of 2012.  Use SendQuery.", "deprecated": "true", "params": []},
    { "name": "ForgetLogin", "description": "Forget end-users login credentials. Has no effect on service authentication", "deprecated": "false", "params": []},
    { "name": "GetRows", "description": "Gets all the rows from a specified fusion table. The tableId field is the id of therequired fusion table. The columns field is a comma-separeted list of the columns to retrieve.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"}]},
    { "name": "GetRowsWithConditions", "description": "Gets all the rows from a fusion table that meet certain conditions. The tableId field isthe id of the required fusion table. The columns field is a comma-separeted list of the columns toretrieve. The conditions field specifies what rows to retrieve from the table, for example the rows in whicha particular column value is not null.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"},{ "name": "conditions", "type": "text"}]},
    { "name": "InsertRow", "description": "Inserts a row into the specified fusion table. The tableId field is the id of thefusion table. The columns is a comma-separated list of the columns to insert values into. The values field specifies what values to insert into each column.", "deprecated": "false", "params": [{ "name": "tableId", "type": "text"},{ "name": "columns", "type": "text"},{ "name": "values", "type": "text"}]},
    { "name": "SendQuery", "description": "Send the query to the Fusiontables server.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.GameClient",
  "name": "GameClient",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "INTERNAL",
  "helpString": "Provides a way for applications to communicate with online game servers",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/gameClient.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "GameId", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://appinvgameserver.appspot.com", "editorArgs": []}],
  "blockProperties": [{ "name": "GameId", "description": "The game name for this application. The same game ID can have one or more game instances.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "InstanceId", "description": "The game instance id.  Taken together,the game ID and the instance ID uniquely identify the game.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "InvitedInstances", "description": "The set of game instances to which this player has been invited but has not yet joined.  To ensure current values are returned, first invoke GetInstanceLists.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "JoinedInstances", "description": "The set of game instances in which this player is participating.  To ensure current values are returned, first invoke GetInstanceLists.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Leader", "description": "The game's leader. At any time, each game instance has only one leader, but the leader may change with time.  Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Players", "description": "The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "PublicInstances", "description": "The set of game instances that have been marked public. To ensure current values are returned, first invoke", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "ServiceURL", "description": "Set the URL of the game server.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "ServiceUrl", "description": "The URL of the game server.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UserEmailAddress", "description": "The email address that is being used as the player id for this game client.   At present, users must set this manually in oder to join a game.  But this property will change in the future so that is set automatically, and users will not be able to change it.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "FunctionCompleted", "description": "Indicates that a function call completed.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"}]}
,
    { "name": "GotMessage", "description": "Indicates that a new message has been received.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "sender", "type": "text"},{ "name": "contents", "type": "list"}]}
,
    { "name": "Info", "description": "Indicates that something has occurred which the player should know about.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "InstanceIdChanged", "description": "Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "Invited", "description": "Indicates that a user has been invited to this game instance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "NewInstanceMade", "description": "Indicates that a new instance was successfully created after calling MakeNewInstance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]}
,
    { "name": "NewLeader", "description": "Indicates that this game has a new leader as specified through SetLeader", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "PlayerJoined", "description": "Indicates that a new player has joined this game instance.", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "PlayerLeft", "description": "Indicates that a player has left this game instance.", "deprecated": "false", "params": [{ "name": "playerId", "type": "text"}]}
,
    { "name": "ServerCommandFailure", "description": "Indicates that a server command failed.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "arguments", "type": "list"}]}
,
    { "name": "ServerCommandSuccess", "description": "Indicates that a server command returned successfully.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "response", "type": "list"}]}
,
    { "name": "UserEmailAddressSet", "description": "Indicates that the user email address has been set.", "deprecated": "false", "params": [{ "name": "emailAddress", "type": "text"}]}
,
    { "name": "WebServiceError", "description": "Indicates that an error occurred while communicating with the web server.", "deprecated": "false", "params": [{ "name": "functionName", "type": "text"},{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetInstanceLists", "description": "Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.", "deprecated": "false", "params": []},
    { "name": "GetMessages", "description": "Retrieves messages of the specified type.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "count", "type": "number"}]},
    { "name": "Invite", "description": "Invites a player to this game instance.", "deprecated": "false", "params": [{ "name": "playerEmail", "type": "text"}]},
    { "name": "LeaveInstance", "description": "Leaves the current instance.", "deprecated": "false", "params": []},
    { "name": "MakeNewInstance", "description": "Asks the server to create a new instance of this game.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"},{ "name": "makePublic", "type": "boolean"}]},
    { "name": "SendMessage", "description": "Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list.", "deprecated": "false", "params": [{ "name": "type", "type": "text"},{ "name": "recipients", "type": "list"},{ "name": "contents", "type": "list"}]},
    { "name": "ServerCommand", "description": "Sends the specified command to the game server.", "deprecated": "false", "params": [{ "name": "command", "type": "text"},{ "name": "arguments", "type": "list"}]},
    { "name": "SetInstance", "description": "Sets InstanceId and joins the specified instance.", "deprecated": "false", "params": [{ "name": "instanceId", "type": "text"}]},
    { "name": "SetLeader", "description": "Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.", "deprecated": "false", "params": [{ "name": "playerEmail", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.GyroscopeSensor",
  "name": "GyroscopeSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.<\/p><p>In order to function, the component must have its <code>Enabled<\/code> property set to True, and the device must have a gyroscope sensor.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/gyroscopesensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Indicates whether a gyroscope sensor is available.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "Enabled property getter method.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "XAngularVelocity", "description": "The angular velocity around the X axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "YAngularVelocity", "description": "The angular velocity around the Y axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ZAngularVelocity", "description": "The angular velocity around the Z axis, in degrees per second.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "GyroscopeChanged", "description": "Indicates that the gyroscope sensor data has changed. The timestamp parameter is the time in nanoseconds at which the event occurred.", "deprecated": "false", "params": [{ "name": "xAngularVelocity", "type": "number"},{ "name": "yAngularVelocity", "type": "number"},{ "name": "zAngularVelocity", "type": "number"},{ "name": "timestamp", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.HorizontalArrangement",
  "name": "HorizontalArrangement",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed from left to right.  If you wish to have components displayed one over another, use <code>VerticalArrangement<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the HorizontalArrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the HorizontalArrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the background color of the HorizontalArrangement", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the HorizontalArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the HorizontalArrangement as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Returns the path of the background image of the `HorizontalArrangement`.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the HorizontalArrangement should be visible on the screen. Value is true if the HorizontalArrangement is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the HorizontalArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the HorizontalArrangement as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.HorizontalScrollArrangement",
  "name": "HorizontalScrollArrangement",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed from left to right.  If you wish to have components displayed one over another, use <code>VerticalArrangement<\/code> instead.<\/p><p>This version is scrollable.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the HorizontalScrollArrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the HorizontalScrollArrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the background color of the HorizontalScrollArrangement", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the HorizontalScrollArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the HorizontalScrollArrangement as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Returns the path of the background image of the `HorizontalScrollArrangement`.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the HorizontalScrollArrangement should be visible on the screen. Value is true if the HorizontalScrollArrangement is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the HorizontalScrollArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the HorizontalScrollArrangement as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Hygrometer",
  "name": "Hygrometer",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "A sensor component that can measure the relative ambient air humidity. Most Android devices do not have this sensor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/hygrometer.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "RefreshTime", "editorType": "non_negative_integer", "defaultValue": "1000", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Specifies whether or not the device has the hardware to support the Hygrometer component.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then device will listen for changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Humidity", "description": "The relative ambient humidity as a percentage, if the sensor is available and enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "RefreshTime", "description": "The requested minimum time in milliseconds between changes in readings being reported. Android is not guaranteed to honor the request. Setting this property has no effect on pre-Gingerbread devices.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "HumidityChanged", "description": "Called when a change is detected in the ambient air humidity (expressed as a percentage).", "deprecated": "false", "params": [{ "name": "humidity", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Image",
  "name": "Image",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Component for displaying images.  The picture to display, and other aspects of the Image's appearance, can be specified in the Designer or in the Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Clickable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Picture", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "RotationAngle", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "ScalePictureToFit", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Animation", "description": "This is a limited form of animation that can attach a small number of motion types to images.  The allowable motions are ScrollRightSlow, ScrollRight, ScrollRightFast, ScrollLeftSlow, ScrollLeft, ScrollLeftFast, and Stop", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Clickable", "description": "Specifies whether the image should be clickable or not.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Image, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Image as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Picture", "description": "Returns the path of the image's picture.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "RotationAngle", "description": "Specifies the angle, in degrees, at which the image picture appears rotated.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ScalePictureToFit", "description": "Specifies whether the image should be resized to match the size of the ImageView.", "type": "boolean", "rw": "write-only", "deprecated": "false"},
    { "name": "Scaling", "description": "This property determines how the picture scales according to the Height or Width of the Image. Scale proportionally (0) preserves the picture aspect ratio. Scale to fit (1) matches the Image area, even if the aspect ratio changes.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Image should be visible on the screen. Value is true if the Image is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Image, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Image as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "An event that occurs when an image is clicked.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.ImagePicker",
  "name": "ImagePicker",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "A special-purpose button. When the user taps an image picker, the device's image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected<\/code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored.  Picking more images will delete previous images, in order from oldest to newest.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap ImagePicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, ImagePicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, ImagePicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for ImagePicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for ImagePicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the ImagePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the ImagePicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Path to the file containing the image that was selected.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `ImagePicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a ImagePicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on ImagePicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the ImagePicker should be visible on the screen. Value is true if the ImagePicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the ImagePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the ImagePicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the `ImagePicker` activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the `ImagePicker` is clicked or the picker is shown\n using the", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the ImagePicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the ImagePicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the ImagePicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the ImagePicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the ImagePicker, as though the user clicked on it.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.ImageSprite",
  "name": "ImageSprite",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "ANIMATION",
  "helpString": "<p>A 'sprite' that can be placed on a <code>Canvas<\/code>, where it can react to touches and drags, interact with other sprites (<code>Ball<\/code>s and other <code>ImageSprite<\/code>s) and the edge of the Canvas, and move according to its property values.  Its appearance is that of the image specified in its <code>Picture<\/code> property (unless its <code>Visible<\/code> property is <code>False<\/code>).<\/p> <p>To have an <code>ImageSprite<\/code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed<\/code> property to 10 [pixels], the <code>Interval<\/code> property to 1000 [milliseconds], the <code>Heading<\/code> property to 180 [degrees], and the <code>Enabled<\/code> property to <code>True<\/code>.  A sprite whose <code>Rotates<\/code> property is <code>True<\/code> will rotate its image as the sprite's <code>Heading<\/code> changes.  Checking for collisions with a rotated sprite currently checks the sprite's unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.  Any of the sprite properties can be changed at any time under program control.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Heading", "editorType": "float", "defaultValue": "0", "editorArgs": []},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100", "editorArgs": []},
{ "name": "Picture", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Rotates", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "X", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0", "editorArgs": []}],
  "blockProperties": [{ "name": "Enabled", "description": "Controls whether the ImageSprite moves and can be interacted with through collisions, dragging, touching, and flinging.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Heading", "description": "Returns the ImageSprite's heading in degrees above the positive x-axis.  Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "The height of the ImageSprite in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Interval", "description": "The interval in milliseconds at which the ImageSprite's position is updated.  For example, if the interval is 50 and the speed is 10, then every 50 milliseconds the sprite will move 10 pixels in the heading direction.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Picture", "description": "The picture that determines the ImageSprite's appearance.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Rotates", "description": "Whether the image should rotate to match the ImageSprite's heading. The sprite rotates around its centerpoint.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Speed", "description": "The number of pixels that the ImageSprite should move every interval, if enabled.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Whether the ImageSprite is visible.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "The width of the ImageSprite in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "X", "description": "The horizontal coordinate of the left edge of the ImageSprite, increasing as the ImageSprite moves right.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Y", "description": "The vertical coordinate of the top edge of the ImageSprite, increasing as the ImageSprite moves down.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Z", "description": "How the `ImageSprite` should be layered relative to other", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "CollidedWith", "description": "Event handler called when two enabled sprites (", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "Dragged", "description": "Event handler called when a ImageSprite is dragged. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the ImageSprite won't actually move anywhere in response to the Dragged event unless MoveTo is explicitly called. For smooth movement, each of its coordinates should be set to the sum of its initial value and the difference between its current and previous values.", "deprecated": "false", "params": [{ "name": "startX", "type": "number"},{ "name": "startY", "type": "number"},{ "name": "prevX", "type": "number"},{ "name": "prevY", "type": "number"},{ "name": "currentX", "type": "number"},{ "name": "currentY", "type": "number"}]}
,
    { "name": "EdgeReached", "description": "Event handler called when the ImageSprite reaches an edge of the screen. If Bounce is then called with that edge, the ImageSprite will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north (1), northeast (2), east (3), southeast (4), south (-1), southwest (-2), west (-3), and northwest (-4).", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]}
,
    { "name": "Flung", "description": "Event handler called when a fling gesture (quick swipe) is made on an enabled ImageSprite. This provides the x and y coordinates of the start of the fling (relative to the upper left of the canvas), the speed (pixels per millisecond), the heading (0-360 degrees), and the x and y velocity components of the fling's vector.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"},{ "name": "speed", "type": "number"},{ "name": "heading", "type": "number"},{ "name": "xvel", "type": "number"},{ "name": "yvel", "type": "number"}]}
,
    { "name": "NoLongerCollidingWith", "description": "Event handler called when a pair of sprites (Balls and ImageSprites) are no longer colliding.", "deprecated": "false", "params": [{ "name": "other", "type": "component"}]}
,
    { "name": "TouchDown", "description": "Event handler called when the user begins touching an enabled ImageSprite (placing their finger on a ImageSprite and leaving it there). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "TouchUp", "description": "Event handler called when the user stops touching an enabled ImageSprite (lifting their finger after a TouchDown event). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
,
    { "name": "Touched", "description": "Event handler called when the user touches an enabled ImageSprite and then immediately lifts their finger. The provided x and y coordinates are relative to the upper left of the canvas.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]}
],
  "methods": [{ "name": "Bounce", "description": "Makes the ImageSprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.", "deprecated": "false", "params": [{ "name": "edge", "type": "number"}]},
    { "name": "CollidingWith", "description": "Indicates whether a collision has been registered between this ImageSprite and the passed sprite (Ball or ImageSprite).", "deprecated": "false", "params": [{ "name": "other", "type": "component"}], "returnType": "boolean"},
    { "name": "MoveIntoBounds", "description": "Moves the ImageSprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the ImageSprite is too wide to fit on the canvas, this aligns the left side of the ImageSprite with the left side of the canvas. If the ImageSprite is too tall to fit on the canvas, this aligns the top side of the ImageSprite with the top side of the canvas.", "deprecated": "false", "params": []},
    { "name": "MoveTo", "description": "Moves the ImageSprite so that its left top corner is at the specified x and y coordinates.", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointInDirection", "description": "Sets the heading of the ImageSprite toward the point with the coordinates (x, y).", "deprecated": "false", "params": [{ "name": "x", "type": "number"},{ "name": "y", "type": "number"}]},
    { "name": "PointTowards", "description": "Turns the ImageSprite to point towards a designated target sprite (Ball or ImageSprite). The new heading will be parallel to the line joining the centerpoints of the two sprites.", "deprecated": "false", "params": [{ "name": "target", "type": "component"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Label",
  "name": "Label",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "A Label displays a piece of text, which is specified through the <code>Text<\/code> property.  Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "HTMLFormat", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "HasMargins", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the label's background color as an alpha-red-green-blue\n integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FontBold", "description": "Returns true if the label's text should be bold.\n If bold has been requested, this property will return true, even if the\n font does not support bold.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Returns true if the label's text should be italic.\n If italic has been requested, this property will return true, even if the\n font does not support italic.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "Returns the label's text's font size, measured in sp(scale-independent pixels).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Returns the label's text's font face as default, serif, sans\n serif, or monospace.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "HTMLContent", "description": "Returns the content of the Label as HTML. This is only useful if the\n HTMLFormat property is true.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "HTMLFormat", "description": "If true, then this label will show html text else it will show plain text. Note: Not all HTML is supported.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "HasMargins", "description": "Reports whether or not the label appears with margins.  All four margins (left, right, top, bottom) are the same.  This property has no effect in the designer, where labels are always shown with margins.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Label, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Label as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Returns the text displayed by the label.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Returns the alignment of the label's text: center, normal\n (e.g., left-justified if text is written left to right), or\n opposite (e.g., right-justified if text is written left to right).", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Returns the label's text color as an alpha-red-green-blue\n integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Label should be visible on the screen. Value is true if the Label is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Label, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Label as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.LightSensor",
  "name": "LightSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "A sensor component that can measure the light level.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/lightsensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "RefreshTime", "editorType": "non_negative_integer", "defaultValue": "1000", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Specifies whether or not the device has the hardware to support the LightSensor component.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "AverageLux", "description": "The average of the 10 most recent light levels measured, in lux.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then device will listen for changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Lux", "description": "The most recent light level, in lux, if the sensor is available and enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "RefreshTime", "description": "The requested minimum time in milliseconds between changes in readings being reported. Android is not guaranteed to honor the request. Setting this property has no effect on pre-Gingerbread devices.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "LightChanged", "description": "Called when a change is detected in the light level.", "deprecated": "false", "params": [{ "name": "lux", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.LineString",
  "name": "LineString",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "LineString",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Description", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Draggable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EnableInfobox", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "PointsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "StrokeColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "StrokeOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "StrokeWidth", "editorType": "text", "defaultValue": "3", "editorArgs": []},
{ "name": "Title", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Description", "description": "The description displayed in the info window that appears when the user clicks on the LineString.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Draggable", "description": "The Draggable property is used to set whether or not the user can drag the LineString by long-pressing and then dragging the LineString to a new location.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableInfobox", "description": "Enable or disable the infobox window display when the user taps the LineString.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Points", "description": "The list of points, as pairs of latitudes and longitudes, in the `LineString`.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "PointsFromString", "description": "Set the points of the LineString from a specially-coded character string of the form:\n [[latitude1, longitude1], [latitude2, longitude2], ...]", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "StrokeColor", "description": "The paint color used to outline the LineString.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeOpacity", "description": "The opacity of the stroke used to outline the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeWidth", "description": "Sets or gets the width of the stroke used to outline the `LineString`.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "The title displayed in the info window that appears when the user clicks on the LineString.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Type", "description": "Returns the type of the map feature. For LineString, this returns the text \"LineString\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the LineString should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "The user clicked on the LineString.", "deprecated": "false", "params": []}
,
    { "name": "Drag", "description": "The user dragged the LineString.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "The user long-pressed on the LineString. This event will only trigger if Draggable is false.", "deprecated": "false", "params": []}
,
    { "name": "StartDrag", "description": "The user started a drag operation.", "deprecated": "false", "params": []}
,
    { "name": "StopDrag", "description": "The user stopped a drag operation.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "DistanceToFeature", "description": "Compute the distance, in meters, between two map features.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "DistanceToPoint", "description": "Compute the distance, in meters, between a LineString and a latitude, longitude point.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "centroid", "type": "boolean"}], "returnType": "number"},
    { "name": "HideInfobox", "description": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.", "deprecated": "false", "params": []},
    { "name": "ShowInfobox", "description": "Show the infobox for the LineString. This will show the infobox even if EnableInfobox is set to false.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.ListPicker",
  "name": "ListPicker",
  "external": "false",
  "version": "9",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString<\/code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3<\/em>) or by setting the <code>Elements<\/code> property to a List in the Blocks editor.<\/p><p>Setting property ShowFilterBar to true, will make the list searchable.  Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "ElementsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "ItemBackgroundColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "ItemTextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []},
{ "name": "Selection", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Title", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "Specifies the list of choices to display.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "Set the list of choices from a string of comma-separated values.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap ListPicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, ListPicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, ListPicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for ListPicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for ListPicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the ListPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the ListPicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemBackgroundColor", "description": "The background color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ItemTextColor", "description": "The text color of the ListPicker items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "The selected item.  When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value.  If the value does not appear, SelectionIndex will be set to 0.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `ListPicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a ListPicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Returns current state of ShowFilterBar indicating if Search Filter Bar will be displayed on ListPicker or not", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on ListPicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "Optional title displayed at the top of the list of choices.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the ListPicker should be visible on the screen. Value is true if the ListPicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the ListPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the ListPicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the `ListPicker` activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the `ListPicker` is clicked or the picker is shown\n using the", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the ListPicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the ListPicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the ListPicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the ListPicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the ListPicker, as though the user clicked on it.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.ListView",
  "name": "ListView",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>This is a visible component that displays a list of text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/listView.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "ElementsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "Selection", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "SelectionColor", "editorType": "color", "defaultValue": "&HFFCCCCCC", "editorArgs": []},
{ "name": "ShowFilterBar", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []},
{ "name": "TextSize", "editorType": "non_negative_integer", "defaultValue": "22", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The color of the listview background.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "List of text elements to show in the ListView.  This will signal an error if the elements are not text strings.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "The TextView elements specified as a string with the items separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Height", "description": "Determines the height of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the ListView as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Returns the text last selected in the ListView.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionColor", "description": "The color of the item when it is selected.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1.  If no item is selected, the value will be 0.  If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListView, SelectionIndex will be set to 0, and Selection will be set to the empty text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowFilterBar", "description": "Sets visibility of ShowFilterBar. True will show the bar, False will hide it.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "The text color of the listview items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TextSize", "description": "The text size of the listview items.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the ListView should be visible on the screen. Value is true if the ListView is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Determines the width of the list on the view.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the ListView as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Simple event to be raised after the an element has been chosen in the list. The selected element is available in the Selection property.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.LocationSensor",
  "name": "LocationSensor",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address.  This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress<\/code> method) and a longitude (with the <code>LongitudeFromAddress<\/code> method).<\/p>\n<p>In order to function, the component must have its <code>Enabled<\/code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).<\/p>\nLocation information might not be immediately available when an app starts.  You'll have to wait a short time for a location provider to be found and used, or wait for the LocationChanged event",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/locationSensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "DistanceInterval", "editorType": "sensor_dist_interval", "defaultValue": "5", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "TimeInterval", "editorType": "sensor_time_interval", "defaultValue": "60000", "editorArgs": []}],
  "blockProperties": [{ "name": "Accuracy", "description": "The most recent measure of accuracy, in meters.  If no value is available, 0 will be returned.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Altitude", "description": "The most recently available altitude value, in meters.  If no value is available, 0 will be returned.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "AvailableProviders", "description": "List of available service providers, such as gps or network. This information is provided\n as a list and in text form.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "CurrentAddress", "description": "Provides a textual representation of the current address or \"No address available\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "DistanceInterval", "description": "Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Enabled", "description": "Indicates whether the user has specified that the sensor should\n listen for location changes and raise the corresponding events.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "HasAccuracy", "description": "If `true", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HasAltitude", "description": "If `true", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "HasLongitudeLatitude", "description": "If `true", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Latitude", "description": "The most recently available latitude value in degrees reported to 5 decimal places.\n If no value is available, 0 will be returned.\n Latitude is a value between 90 (north) and -90 (south), where 0 marks the Equator.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Longitude", "description": "The most recent available longitude value in degrees reported to 5 decimal places.\n If no value is available, 0 will be returned.\n Longitude is a value between 180 (east) and -180 (west), where 0 marks the Prime Meridian.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ProviderLocked", "description": "The device will not change the service provider.\n\n   It is possible for a device to switch service providers when the current provider is unable\n to provide adequate location information. `ProviderLocked` is a Boolean value: true\/false.\n Set to `true", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ProviderName", "description": "Indicates the source of the location information.  If there is no provider, the\n string \"NO PROVIDER\" is returned.  This is useful primarily for debugging.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TimeInterval", "description": "Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "LocationChanged", "description": "Indicates that a new location has been detected.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "altitude", "type": "number"},{ "name": "speed", "type": "number"}]}
,
    { "name": "StatusChanged", "description": "Indicates that the status of the location provider service has changed, such as when a\n provider is lost or a new provider starts being used.", "deprecated": "false", "params": [{ "name": "provider", "type": "text"},{ "name": "status", "type": "text"}]}
],
  "methods": [{ "name": "LatitudeFromAddress", "description": "Derives latitude of given address", "deprecated": "false", "params": [{ "name": "locationName", "type": "text"}], "returnType": "number"},
    { "name": "LongitudeFromAddress", "description": "Derives longitude of given address", "deprecated": "false", "params": [{ "name": "locationName", "type": "text"}], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.MagneticFieldSensor",
  "name": "MagneticFieldSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that measures the ambient geomagnetic field for all three physical axes (x, y, z) in Tesla https:\/\/en.wikipedia.org\/wiki\/Tesla_(unit).<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/magneticSensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AbsoluteStrength", "description": "Indicates the absolute strength of the field.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "Indicates that there is a magnetic field sensor in the device and it is available.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "Indicates whether or not the magnetic field sensor is enabled and working.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "Indicates the maximum range the magnetic sensor can reach.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "XStrength", "description": "Indicates the field's strength in the X-axis.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "YStrength", "description": "Indicates the field's strength in the Y-axis.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ZStrength", "description": "Indicates the field's strength in the Z-axis.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "MagneticChanged", "description": "Triggers when magnetic field has changed, setting the new values in parameters.", "deprecated": "false", "params": [{ "name": "xStrength", "type": "number"},{ "name": "yStrength", "type": "number"},{ "name": "zStrength", "type": "number"},{ "name": "absoluteStrength", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Map",
  "name": "Map",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "<p>A two-dimensional container that renders map tiles in the background and allows for multiple Marker elements to identify points on the map. Map tiles are supplied by OpenStreetMap contributors and the United States Geological Survey.<\/p><p>The Map component provides three utilities for manipulating its boundaries within App Inventor. First, a locking mechanism is provided to allow the map to be moved relative to other components on the Screen. Second, when unlocked, the user can pan the Map to any location. At this new location, the &quot;Set Initial Boundary&quot; button can be pressed to save the current Map coordinates to its properties. Lastly, if the Map is moved to a different location, for example to add Markers off-screen, then the &quot;Reset Map to Initial Bounds&quot; button can be used to re-center the Map at the starting location.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 8,
  "properties": [{ "name": "CenterFromString", "editorType": "geographic_point", "defaultValue": "42.359144, -71.093612", "editorArgs": []},
{ "name": "EnablePan", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "EnableRotation", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EnableZoom", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "LocationSensor", "editorType": "component:com.google.appinventor.components.runtime.LocationSensor", "defaultValue": "", "editorArgs": []},
{ "name": "MapType", "editorType": "map_type", "defaultValue": "1", "editorArgs": []},
{ "name": "Rotation", "editorType": "float", "defaultValue": "0.0", "editorArgs": []},
{ "name": "ScaleUnits", "editorType": "map_unit_system", "defaultValue": "1", "editorArgs": []},
{ "name": "ShowCompass", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ShowScale", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ShowUser", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ShowZoom", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []},
{ "name": "ZoomLevel", "editorType": "map_zoom", "defaultValue": "13", "editorArgs": []}],
  "blockProperties": [{ "name": "BoundingBox", "description": "Bounding box for the map stored as [[North, West], [South, East]].", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "CenterFromString", "description": "<p>Set the initial center coordinate of the map. The value is specified as a comma-separated pair of decimal latitude and longitude coordinates, for example, <code>42.359144, -71.093612<\/code>.<\/p><p>In blocks code, it is recommended for performance reasons to use SetCenter with numerical latitude and longitude rather than convert to the string representation for use with this property.<\/p>", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "EnablePan", "description": "Enable two-finger panning of the Map", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableRotation", "description": "Enable rotating the map based on the user's orientation.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableZoom", "description": "Set whether the user can zoom the map using touch gestures. This value does not affect\n whether the user can zoom using the zoom controls provided by\n <a href=\"#Map.ShowZoom\">ShowZoom<\/a>.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Features", "description": "The list of features placed on this Map. This list also includes any features created by calls to FeatureFromDescription", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Map, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Map as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Latitude", "description": "The latitude of the center of the map.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "LocationSensor", "description": "Uses the provided LocationSensor for user location data rather than the built-in location provider.", "type": "component", "rw": "write-only", "deprecated": "false"},
    { "name": "Longitude", "description": "The longitude of the center of the map.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "MapType", "description": "Set the type of map tile used for the base tile layer.\n Valid values are:\n\n   1. Roads\n   2. Aerial\n   3. Terrain", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Rotation", "description": "Sets or gets the rotation of the map in decimal degrees if any", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ScaleUnits", "description": "Specifies the units used for the scale overlay. 1 (the default) will give metric units\n (km, m) whereas 2 will give imperial units (mi, ft).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowCompass", "description": "Show a compass on the map. If the device provides a digital compass, orientation changes will\n be used to rotate the compass icon.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowScale", "description": "Shows or hides a scale overlay on the", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowUser", "description": "Shows or hides an icon indicating the user's current location on the", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowZoom", "description": "Shows or hides an icon indicating the user's current location on the", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "UserLatitude", "description": "Returns the user's latitude if ShowUser is enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "UserLongitude", "description": "Returns the user's longitude if ShowUser is enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Map should be visible on the screen. Value is true if the Map is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Map, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Map as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ZoomLevel", "description": "Specifies the zoom level of the map.\n Valid values of ZoomLevel are dependent on the tile provider and the latitude and\n longitude of the map. For example, zoom levels are more constrained over oceans than dense\n city centers to conserve space for storing tiles, so valid values may be 1-7 over ocean and\n 1-20 over cities. Tile providers may send warning or error tiles if the zoom level is too\n great for the server to support.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "BoundsChange", "description": "User has changed the map bounds by panning or zooming the map.", "deprecated": "false", "params": []}
,
    { "name": "DoubleTapAtPoint", "description": "The user double-tapped at a point on the map. This event will be followed by a ZoomChanged event if zooming gestures are enabled and the map is not at the highest possible zoom level.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "FeatureClick", "description": "The user clicked on a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureDrag", "description": "The user dragged a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureLongClick", "description": "The user long-pressed on a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureStartDrag", "description": "The user started dragging a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "FeatureStopDrag", "description": "The user stopped dragging a map feature.", "deprecated": "false", "params": [{ "name": "feature", "type": "component"}]}
,
    { "name": "GotFeatures", "description": "A GeoJSON document was successfully read from url. The features specified in the document are provided as a list in features.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "features", "type": "list"}]}
,
    { "name": "InvalidPoint", "description": "An invalid coordinate was supplied during a maps operation. The message parameter will have more details about the issue.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "LoadError", "description": "An error was encountered while processing a GeoJSON document at the given url. The responseCode parameter will contain an HTTP status code and the errorMessage parameter will contain a detailed error message.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "errorMessage", "type": "text"}]}
,
    { "name": "LongPressAtPoint", "description": "The user long-pressed at a point on the map.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "Ready", "description": "Map has been initialized and is ready for user interaction.", "deprecated": "false", "params": []}
,
    { "name": "TapAtPoint", "description": "The user tapped at a point on the map.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]}
,
    { "name": "ZoomChange", "description": "User has changed the zoom level of the map.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "CreateMarker", "description": "Create a new marker with default properties at the specified latitude and longitude.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}], "returnType": "component"},
    { "name": "FeatureFromDescription", "description": "Converts a feature description into an App Inventor map feature. Points are converted into", "deprecated": "false", "params": [{ "name": "description", "type": "list"}], "returnType": "any"},
    { "name": "LoadFromURL", "description": "<p>Load a feature collection in <a href=\"https:\/\/en.wikipedia.org\/wiki\/GeoJSON\">GeoJSON<\/a> format from the given url. On success, the event GotFeatures will be raised with the given url and a list of the features parsed from the GeoJSON as a list of (key, value) pairs. On failure, the LoadError event will be raised with any applicable HTTP response code and error message.<\/p>", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]},
    { "name": "PanTo", "description": "Pans the map center to the given latitude and longitude and adjust the zoom level to the specified zoom.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "zoom", "type": "number"}]},
    { "name": "Save", "description": "Save the contents of the Map to the specified path.", "deprecated": "false", "params": [{ "name": "path", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Marker",
  "name": "Marker",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "<p>An icon positioned at a point to indicate information on a map. Markers can be used to provide an info window, custom fill and stroke colors, and custom images to convey information to the user.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AnchorHorizontal", "editorType": "horizontal_alignment", "defaultValue": "3", "editorArgs": []},
{ "name": "AnchorVertical", "editorType": "vertical_alignment", "defaultValue": "3", "editorArgs": []},
{ "name": "Description", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Draggable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EnableInfobox", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FillColor", "editorType": "color", "defaultValue": "&HFFFF0000", "editorArgs": []},
{ "name": "FillOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "ImageAsset", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Latitude", "editorType": "latitude", "defaultValue": "0", "editorArgs": []},
{ "name": "Longitude", "editorType": "longitude", "defaultValue": "0", "editorArgs": []},
{ "name": "StrokeColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "StrokeOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "StrokeWidth", "editorType": "integer", "defaultValue": "1", "editorArgs": []},
{ "name": "Title", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AnchorHorizontal", "description": "The horizontal alignment property controls where the Marker's anchor is located relative to its width.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AnchorVertical", "description": "The vertical alignment property controls where the Marker's anchor is located relative to its height.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Description", "description": "The description displayed in the info window that appears when the user clicks on the Marker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Draggable", "description": "The Draggable property is used to set whether or not the user can drag the Marker by long-pressing and then dragging the Marker to a new location.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableInfobox", "description": "Enable or disable the infobox window display when the user taps the Marker.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FillColor", "description": "The paint color used to fill in the Marker.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FillOpacity", "description": "The opacity of the interior of the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the `Marker`'s vertical height, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the `Marker`'s vertical height as a percentage\n of the [`Screen`'s `Height`](userinterface.html#Screen.Height).", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "ImageAsset", "description": "Specifies the image shown for the `Marker`. If set to the empty string \"\", then the default\n marker icon will be used.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Latitude", "description": "Sets or gets the latitude of the `Marker`, in degrees, with positive values representing\n north of the equator and negative values representing south of the equator. To update the\n `Latitude` and", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Longitude", "description": "Sets or gets the longitude of the `Marker`, in degrees, with positive values representing east\n of the prime meridian and negative values representing west of the prime meridian. To update\n the", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ShowShadow", "description": "Gets whether or not the shadow of the Marker is shown.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "StrokeColor", "description": "The paint color used to outline the Marker.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeOpacity", "description": "The opacity of the stroke used to outline the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeWidth", "description": "The width of the stroke used to outline the Marker.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "The title displayed in the info window that appears when the user clicks on the Marker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Type", "description": "Return the type of the map feature. For Marker, this returns the text \"Marker\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Marker should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the `Marker`, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the `Marker` as a percentage\n of the [`Screen`'s `Width`](userinterface.html#Screen.Width).", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "The user clicked on the Marker.", "deprecated": "false", "params": []}
,
    { "name": "Drag", "description": "The user dragged the Marker.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "The user long-pressed on the Marker. This event will only trigger if Draggable is false.", "deprecated": "false", "params": []}
,
    { "name": "StartDrag", "description": "The user started a drag operation.", "deprecated": "false", "params": []}
,
    { "name": "StopDrag", "description": "The user stopped a drag operation.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "BearingToFeature", "description": "Returns the bearing from the Marker to the given map feature, in degrees from due north. If the centroids parameter is true, the bearing will be to the center of the map feature. Otherwise, the bearing will be computed to the point in the feature nearest the Marker.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "BearingToPoint", "description": "Returns the bearing from the Marker to the given latitude and longitude, in degrees from due north.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}], "returnType": "number"},
    { "name": "DistanceToFeature", "description": "Compute the distance, in meters, between two map features.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "DistanceToPoint", "description": "Compute the distance, in meters, between a Marker and a latitude, longitude point.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}], "returnType": "number"},
    { "name": "HideInfobox", "description": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.", "deprecated": "false", "params": []},
    { "name": "SetLocation", "description": "Set the location of the marker.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]},
    { "name": "ShowInfobox", "description": "Show the infobox for the Marker. This will show the infobox even if EnableInfobox is set to false.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.MediaStore",
  "name": "MediaStore",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "INTERNAL",
  "helpString": "Non-visible component that communicates with a Web service and stores media files.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/mediastore.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://ai-mediaservice.appspot.com", "editorArgs": []}],
  "blockProperties": [{ "name": "ServiceURL", "description": "Returns the URL of the MediaStore web service.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "MediaStored", "description": "Indicates that a MediaStored server request has succeeded.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}
,
    { "name": "WebServiceError", "description": "Indicates that the communication with the Web service signaled an error", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "PostMedia", "description": "Asks the Web service to store the given media file.", "deprecated": "false", "params": [{ "name": "mediafile", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Navigation",
  "name": "Navigation",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "Navigation",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/navigation.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ApiKey", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "EndLatitude", "editorType": "latitude", "defaultValue": "0.0", "editorArgs": []},
{ "name": "EndLongitude", "editorType": "longitude", "defaultValue": "0.0", "editorArgs": []},
{ "name": "Language", "editorType": "text", "defaultValue": "en", "editorArgs": []},
{ "name": "StartLatitude", "editorType": "latitude", "defaultValue": "0.0", "editorArgs": []},
{ "name": "StartLongitude", "editorType": "longitude", "defaultValue": "0.0", "editorArgs": []},
{ "name": "TransportationMethod", "editorType": "navigation_method", "defaultValue": "foot-walking", "editorArgs": []}],
  "blockProperties": [{ "name": "ApiKey", "description": "API Key for Open Route Service.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "EndLatitude", "description": "The latitude of the end location.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "EndLocation", "description": "Set the end location.", "type": "component", "rw": "write-only", "deprecated": "false"},
    { "name": "EndLongitude", "description": "The longitude of the end location.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Language", "description": "The language to use for textual directions.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ResponseContent", "description": "Content of the last response as a dictionary.", "type": "dictionary", "rw": "read-only", "deprecated": "false"},
    { "name": "ServiceURL", "description": "Reserved for future use in case we decide to run our own service some day.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "StartLatitude", "description": "The latitude of the start location.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StartLocation", "description": "Set the start location.", "type": "component", "rw": "write-only", "deprecated": "false"},
    { "name": "StartLongitude", "description": "The longitude of the start location.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TransportationMethod", "description": "The transportation method used for determining the route.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotDirections", "description": "Event triggered when the Openrouteservice returns the directions.", "deprecated": "false", "params": [{ "name": "directions", "type": "list"},{ "name": "points", "type": "list"},{ "name": "distance", "type": "number"},{ "name": "duration", "type": "number"}]}
],
  "methods": [{ "name": "RequestDirections", "description": "Request directions from the routing service.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.NearField",
  "name": "NearField",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component to provide NFC capabilities.  For now this component supports the reading and writing of text tags only (if supported by the device)<\/p><p>In order to read and write text tags, the component must have its <code>ReadMode<\/code> property set to True or False respectively.<\/p><p><strong>Note:<\/strong> This component will only work on Screen1 of any App Inventor app.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/nearfield.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ReadMode", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "LastMessage", "description": "Returns the content of the most recently received tag.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ReadMode", "description": "Returns true if in read mode, false if in write mode.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "TextToWrite", "description": "Returns the content of the text that's going to be written to the tag.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "WriteType", "description": "Returns the write type for the NFC component. For this version of the component, it is always\n `1`.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "TagRead", "description": "Indicates that a new tag has been detected.\n Currently this is only a plain text tag, as specified in the\n manifest.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
,
    { "name": "TagWritten", "description": "Indicates that a tag has come into range of the NFC sensor and has been written.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Notifier",
  "name": "Notifier",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: <ul><li> ShowMessageDialog: displays a message which the user must dismiss by pressing a button.<\/li><li> ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.<\/li><li> ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowPasswordDialog: lets the user enter password in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert: displays a temporary  alert that goes away by itself after a short time.<\/li><li> ShowProgressDialog: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.<\/li><li> DismissProgressDialog: Dismisses the progress dialog displayed by ShowProgressDialog.<\/li><li> LogError: logs an error message to the Android log. <\/li><li> LogInfo: logs an info message to the Android log.<\/li><li> LogWarning: logs a warning message to the Android log.<\/li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;<\/li><li>You can also use the font tag to specify color, for example, &lt;font color=\"blue\"&gt;.  Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow<\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/notifier.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFF444444", "editorArgs": []},
{ "name": "NotifierLength", "editorType": "toast_length", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Specifies the background color for alerts (not dialogs).", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "NotifierLength", "description": "Specifies the length of time that the alert is shown -- either \"short\" or \"long\".", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Specifies the text color for alerts (not dialogs).", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterChoosing", "description": "Event after the user has made a selection for ShowChooseDialog.", "deprecated": "false", "params": [{ "name": "choice", "type": "text"}]}
,
    { "name": "AfterTextInput", "description": "Event raised after the user has responded to ShowTextDialog.", "deprecated": "false", "params": [{ "name": "response", "type": "text"}]}
,
    { "name": "ChoosingCanceled", "description": "Event raised when the user canceled ShowChooseDialog.", "deprecated": "false", "params": []}
,
    { "name": "TextInputCanceled", "description": "Event raised when the user canceled ShowTextDialog.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "DismissProgressDialog", "description": "Dismiss a previously displayed ProgressDialog box", "deprecated": "false", "params": []},
    { "name": "LogError", "description": "Writes an error message to the Android system log. See the Google Android documentation for how to access the log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "LogInfo", "description": "Writes an information message to the Android log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "LogWarning", "description": "Writes a warning message to the Android log. See the Google Android documentation for how to access the log.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]},
    { "name": "ShowAlert", "description": "Display a temporary notification.", "deprecated": "false", "params": [{ "name": "notice", "type": "text"}]},
    { "name": "ShowChooseDialog", "description": "Shows a dialog box with two buttons, from which the user can choose.  If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event.  The \"choice\" parameter to AfterChoosing will be the text on the button that was pressed, or \"Cancel\" if the  CANCEL button was pressed.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "button1Text", "type": "text"},{ "name": "button2Text", "type": "text"},{ "name": "cancelable", "type": "boolean"}]},
    { "name": "ShowMessageDialog", "description": "Display an alert dialog with a single button that dismisses the alert.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "buttonText", "type": "text"}]},
    { "name": "ShowPasswordDialog", "description": "Shows a dialog box where the user can enter password (input is masked), after which the AfterTextInput event will be raised.  If cancelable is true there will be an additional CANCEL button. Entering password will raise the AfterTextInput event.  The \"response\" parameter to AfterTextInput will be the entered password, or \"Cancel\" if CANCEL button was pressed.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "cancelable", "type": "boolean"}]},
    { "name": "ShowProgressDialog", "description": "Shows a dialog box with an optional title and message (use empty strings if they are not wanted). This dialog box contains a spinning artifact to indicate that the program is working. It cannot be canceled by the user but must be dismissed by the App Inventor Program by using the DismissProgressDialog block.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"}]},
    { "name": "ShowTextDialog", "description": "Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised.  If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event.  The \"response\" parameter to AfterTextInput will be the text that was entered, or \"Cancel\" if the CANCEL button was pressed.", "deprecated": "false", "params": [{ "name": "message", "type": "text"},{ "name": "title", "type": "text"},{ "name": "cancelable", "type": "boolean"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtColorSensor",
  "name": "NxtColorSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256", "editorArgs": []},
{ "name": "ColorChangedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "DetectColor", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "GenerateColor", "editorType": "lego_nxt_generated_color", "defaultValue": "&H00FFFFFF", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the DetectColor property is set to False and the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the DetectColor property is set to False and the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorChangedEventEnabled", "description": "Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "DetectColor", "description": "Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "GenerateColor", "description": "The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the DetectColor property is set to False and the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range. The AboveRange event will not occur if the DetectColor property is set to True or if the AboveRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range. The BelowRange event will not occur if the DetectColor property is set to True or if the BelowRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
,
    { "name": "ColorChanged", "description": "Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.", "deprecated": "false", "params": [{ "name": "color", "type": "number"}]}
,
    { "name": "WithinRange", "description": "Light level has gone within the range. The WithinRange event will not occur if the DetectColor property is set to True or if the WithinRangeEventEnabled property is set to False.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetColor", "description": "Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetLightLevel", "description": "Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtDirectCommands",
  "name": "NxtDirectCommands",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "DeleteFile", "description": "Delete a file on the robot.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "DownloadFile", "description": "Download a file to the robot.", "deprecated": "false", "params": [{ "name": "source", "type": "text"},{ "name": "destination", "type": "text"}]},
    { "name": "GetBatteryLevel", "description": "Get the battery level for the robot. Returns the voltage in millivolts.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "GetBrickName", "description": "Get the brick name of the robot.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetCurrentProgramName", "description": "Get the name of currently running program on the robot.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetFirmwareVersion", "description": "Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "GetInputValues", "description": "Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "GetOutputState", "description": "Reads the output state of a motor on the robot.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "KeepAlive", "description": "Keep Alive. Returns the current sleep time limit in milliseconds.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "ListFiles", "description": "Returns a list containing the names of matching files found on the robot.", "deprecated": "false", "params": [{ "name": "wildcard", "type": "text"}], "returnType": "list"},
    { "name": "LsGetStatus", "description": "Returns the count of available bytes to read.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "number"},
    { "name": "LsRead", "description": "Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}], "returnType": "list"},
    { "name": "LsWrite", "description": "Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"},{ "name": "list", "type": "list"},{ "name": "rxDataLength", "type": "number"}]},
    { "name": "MessageRead", "description": "Read a message from a mailbox (1-10) on the robot.", "deprecated": "false", "params": [{ "name": "mailbox", "type": "number"}], "returnType": "text"},
    { "name": "MessageWrite", "description": "Write a message to a mailbox (1-10) on the robot.", "deprecated": "false", "params": [{ "name": "mailbox", "type": "number"},{ "name": "message", "type": "text"}]},
    { "name": "PlaySoundFile", "description": "Play a sound file on the robot.", "deprecated": "false", "params": [{ "name": "fileName", "type": "text"}]},
    { "name": "PlayTone", "description": "Make the robot play a tone.", "deprecated": "false", "params": [{ "name": "frequencyHz", "type": "number"},{ "name": "durationMs", "type": "number"}]},
    { "name": "ResetInputScaledValue", "description": "Reset the scaled value of an input sensor on the robot.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"}]},
    { "name": "ResetMotorPosition", "description": "Reset motor position.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"},{ "name": "relative", "type": "boolean"}]},
    { "name": "SetBrickName", "description": "Set the brick name of the robot.", "deprecated": "false", "params": [{ "name": "name", "type": "text"}]},
    { "name": "SetInputMode", "description": "Configure an input sensor on the robot.", "deprecated": "false", "params": [{ "name": "sensorPortLetter", "type": "text"},{ "name": "sensorType", "type": "number"},{ "name": "sensorMode", "type": "number"}]},
    { "name": "SetOutputState", "description": "Sets the output state of a motor on the robot.", "deprecated": "false", "params": [{ "name": "motorPortLetter", "type": "text"},{ "name": "power", "type": "number"},{ "name": "mode", "type": "number"},{ "name": "regulationMode", "type": "number"},{ "name": "turnRatio", "type": "number"},{ "name": "runState", "type": "number"},{ "name": "tachoLimit", "type": "number"}]},
    { "name": "StartProgram", "description": "Start execution of a previously downloaded program on the robot.", "deprecated": "false", "params": [{ "name": "programName", "type": "text"}]},
    { "name": "StopProgram", "description": "Stop execution of the currently running program on the robot.", "deprecated": "false", "params": []},
    { "name": "StopSoundPlayback", "description": "Stop sound playback.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtDrive",
  "name": "NxtDrive",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "DriveMotors", "editorType": "string", "defaultValue": "CB", "editorArgs": []},
{ "name": "StopBeforeDisconnect", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "WheelDiameter", "editorType": "float", "defaultValue": "4.32", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "DriveMotors", "description": "The motor ports that are used for driving: the left wheel's motor port followed by the right wheel's motor port.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "StopBeforeDisconnect", "description": "Whether to stop the drive motors before disconnecting.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WheelDiameter", "description": "The diameter of the wheels used for driving.", "type": "number", "rw": "invisible", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "MoveBackward", "description": "Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"}]},
    { "name": "MoveBackwardIndefinitely", "description": "Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "MoveForward", "description": "Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"},{ "name": "distance", "type": "number"}]},
    { "name": "MoveForwardIndefinitely", "description": "Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "Stop", "description": "Stop the drive motors of the robot.", "deprecated": "false", "params": []},
    { "name": "TurnClockwiseIndefinitely", "description": "Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]},
    { "name": "TurnCounterClockwiseIndefinitely", "description": "Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.", "deprecated": "false", "params": [{ "name": "power", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtLightSensor",
  "name": "NxtLightSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256", "editorArgs": []},
{ "name": "GenerateLight", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the light level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the light level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "GenerateLight", "description": "Whether the light sensor should generate light.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Light level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Light level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Light level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetLightLevel", "description": "Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtSoundSensor",
  "name": "NxtSoundSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "2", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the sound level goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the sound level goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the sound level goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Sound level has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Sound level has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Sound level has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetSoundLevel", "description": "Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtTouchSensor",
  "name": "NxtTouchSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "PressedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ReleasedEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "1", "editorArgs": []}],
  "blockProperties": [{ "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "PressedEventEnabled", "description": "Whether the Pressed event should fire when the touch sensor is pressed.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ReleasedEventEnabled", "description": "Whether the Released event should fire when the touch sensor is released.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "Pressed", "description": "Touch sensor has been pressed.", "deprecated": "false", "params": []}
,
    { "name": "Released", "description": "Touch sensor has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "IsPressed", "description": "Returns true if the touch sensor is pressed.", "deprecated": "false", "params": [], "returnType": "boolean"}]}
,
{ "type": "com.google.appinventor.components.runtime.NxtUltrasonicSensor",
  "name": "NxtUltrasonicSensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": "", "editorArgs": []},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30", "editorArgs": []},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "4", "editorArgs": []},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "90", "editorArgs": []},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "AboveRangeEventEnabled", "description": "Whether the AboveRange event should fire when the distance goes above the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BelowRangeEventEnabled", "description": "Whether the BelowRange event should fire when the distance goes below the BottomOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "BluetoothClient", "description": "The BluetoothClient component that should be used for communication.", "type": "component", "rw": "invisible", "deprecated": "false"},
    { "name": "BottomOfRange", "description": "The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SensorPort", "description": "The sensor port that the sensor is connected to.", "type": "text", "rw": "invisible", "deprecated": "false"},
    { "name": "TopOfRange", "description": "The top of the range used for the BelowRange, WithinRange, and AboveRange events.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WithinRangeEventEnabled", "description": "Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AboveRange", "description": "Distance has gone above the range.", "deprecated": "false", "params": []}
,
    { "name": "BelowRange", "description": "Distance has gone below the range.", "deprecated": "false", "params": []}
,
    { "name": "WithinRange", "description": "Distance has gone within the range.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetDistance", "description": "Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.", "deprecated": "false", "params": [], "returnType": "number"}]}
,
{ "type": "com.google.appinventor.components.runtime.OrientationSensor",
  "name": "OrientationSensor",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component providing information about the device's physical orientation in three dimensions: <ul> <li> <strong>Roll<\/strong>: 0 degrees when the device is level, increases to      90 degrees as the device is tilted up on its left side, and      decreases to -90 degrees when the device is tilted up on its right side.      <\/li> <li> <strong>Pitch<\/strong>: 0 degrees when the device is level, up to      90 degrees as the device is tilted so its top is pointing down,      up to 180 degrees as it gets turned over.  Similarly, as the device      is tilted so its bottom points down, pitch decreases to -90      degrees, then further decreases to -180 degrees as it gets turned all the way      over.<\/li> <li> <strong>Azimuth<\/strong>: 0 degrees when the top of the device is      pointing north, 90 degrees when it is pointing east, 180 degrees      when it is pointing south, 270 degrees when it is pointing west,      etc.<\/li><\/ul>     These measurements assume that the device itself is not moving.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/orientationsensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Angle", "description": "Returns an angle that tells the direction in which the device is tiled. That is, it tells the\n direction of the force that would be felt by a ball rolling on the surface of the device.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Available", "description": "Indicates whether the orientation sensor is present on the device.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Azimuth", "description": "Returns the azimuth angle of the device.\n To return meaningful values the sensor must be enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "Specifies whether the orientation sensor is enabled.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Magnitude", "description": "Returns a number between 0 and 1 indicating how much the device\n is tilted. It gives the magnitude of the force that would be felt\n by a ball rolling on the surface of the device. For the angle of\n tilt, use", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Pitch", "description": "Returns the pitch angle of the device.\n To return meaningful values the sensor must be enabled.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Roll", "description": "Returns the roll angle of the device.\n To return meaningful values the sensor must be enabled.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "OrientationChanged", "description": "Called when the orientation has changed.", "deprecated": "false", "params": [{ "name": "azimuth", "type": "number"},{ "name": "pitch", "type": "number"},{ "name": "roll", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.PasswordTextBox",
  "name": "PasswordTextBox",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A box for entering passwords.  This is the same as the ordinary <code>TextBox<\/code> component except this does not display the characters typed by the user.<\/p><p>The value of the text in the box can be found or set through the <code>Text<\/code> property. If blank, the <code>Hint<\/code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.<\/p> <p>Text boxes are usually used with the <code>Button<\/code> component, with the user clicking on the button when text entry is complete.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Hint", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Text", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into the PasswordTextBox.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the PasswordTextBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the PasswordTextBox as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the PasswordTextBox to provide a hint as to what the user should enter.  This can only be seen if the Text property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PasswordVisible", "description": "Visibility of password.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Returns the textbox contents.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the PasswordTextBox should be visible on the screen. Value is true if the PasswordTextBox is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the PasswordTextBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the PasswordTextBox as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when the PasswordTextBox is selected for input, such as by the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when the PasswordTextBox is no longer selected for input, such as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "RequestFocus", "description": "Sets the PasswordTextBox active.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Pedometer",
  "name": "Pedometer",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "A Component that acts like a Pedometer. It senses motion via the Accerleromter and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/pedometer.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "StopDetectionTimeout", "editorType": "non_negative_integer", "defaultValue": "2000", "editorArgs": []},
{ "name": "StrideLength", "editorType": "non_negative_float", "defaultValue": "0.73", "editorArgs": []}],
  "blockProperties": [{ "name": "CalibrateStrideLength", "description": "This property has been deprecated.", "type": "boolean", "rw": "read-write", "deprecated": "true"},
    { "name": "Distance", "description": "The approximate distance traveled in meters.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "ElapsedTime", "description": "Time elapsed in milliseconds since the pedometer was started.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Moving", "description": "This property has been deprecated.", "type": "boolean", "rw": "read-only", "deprecated": "true"},
    { "name": "SimpleSteps", "description": "The number of simple steps taken since the pedometer has started.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "StopDetectionTimeout", "description": "The duration in milliseconds of idleness (no steps detected) after which to go into a \"stopped\" state", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrideLength", "description": "Set the average stride length in meters.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "UseGPS", "description": "This property has been deprecated.", "type": "boolean", "rw": "write-only", "deprecated": "true"},
    { "name": "WalkSteps", "description": "the number of walk steps taken since the pedometer has started.", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "CalibrationFailed", "description": "This event has been deprecated.", "deprecated": "true", "params": []}
,
    { "name": "GPSAvailable", "description": "This event has been deprecated.", "deprecated": "true", "params": []}
,
    { "name": "GPSLost", "description": "This event has been deprecated.", "deprecated": "true", "params": []}
,
    { "name": "SimpleStep", "description": "This event is run when a raw step is detected.", "deprecated": "false", "params": [{ "name": "simpleSteps", "type": "number"},{ "name": "distance", "type": "number"}]}
,
    { "name": "StartedMoving", "description": "This event has been deprecated.", "deprecated": "true", "params": []}
,
    { "name": "StoppedMoving", "description": "This event has been deprecated.", "deprecated": "true", "params": []}
,
    { "name": "WalkStep", "description": "This event is run when a walking step is detected. A walking step is a step that appears to be involved in forward motion.", "deprecated": "false", "params": [{ "name": "walkSteps", "type": "number"},{ "name": "distance", "type": "number"}]}
],
  "methods": [{ "name": "Pause", "description": "Pause counting of steps and distance.", "deprecated": "true", "params": []},
    { "name": "Reset", "description": "Resets the step counter, distance measure and time running.", "deprecated": "false", "params": []},
    { "name": "Resume", "description": "Resumes counting, synonym of Start.", "deprecated": "true", "params": []},
    { "name": "Save", "description": "Saves the pedometer state to the phone. Permits permits accumulation of steps and distance between invocations of an App that uses the pedometer. Different Apps will have their own saved state.", "deprecated": "false", "params": []},
    { "name": "Start", "description": "Start counting steps", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stop counting steps", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneCall",
  "name": "PhoneCall",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber<\/code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall<\/code> method, enabling the program to launch a phone call.<\/p><p>Often, this component is used with the <code>ContactPicker<\/code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber<\/code> property to the contact's phone number.<\/p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber<\/code> property to a Text with the specified digits (e.g., \"6505551212\").  Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneCall.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "conditionals":{
    "permissions": {
      "IncomingCallAnswered": [
        "android.permission.PROCESS_OUTGOING_CALLS",
        "android.permission.READ_CALL_LOG",
        "android.permission.READ_PHONE_STATE"
      ],
      "MakePhoneCallDirect": [
        "android.permission.CALL_PHONE"
      ],
      "PhoneCallEnded": [
        "android.permission.PROCESS_OUTGOING_CALLS",
        "android.permission.READ_CALL_LOG",
        "android.permission.READ_PHONE_STATE"
      ],
      "PhoneCallStarted": [
        "android.permission.PROCESS_OUTGOING_CALLS",
        "android.permission.READ_CALL_LOG",
        "android.permission.READ_PHONE_STATE"
      ]
    }
  },
  "properties": [{ "name": "PhoneNumber", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "PhoneNumber", "description": "PhoneNumber property getter method.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "IncomingCallAnswered", "description": "Event indicating that an incoming phone call is answered. phoneNumber is the incoming call phone number.", "deprecated": "false", "params": [{ "name": "phoneNumber", "type": "text"}]}
,
    { "name": "PhoneCallEnded", "description": "Event indicating that a phone call has ended. If status is 1, incoming call is missed or rejected; if status is 2, incoming call is answered before hanging up; if status is 3, outgoing call is hung up. phoneNumber is the ended call phone number.", "deprecated": "false", "params": [{ "name": "status", "type": "number"},{ "name": "phoneNumber", "type": "text"}]}
,
    { "name": "PhoneCallStarted", "description": "Event indicating that a phonecall has started. If status is 1, incoming call is ringing; if status is 2, outgoing call is dialled. phoneNumber is the incoming\/outgoing phone number.", "deprecated": "false", "params": [{ "name": "status", "type": "number"},{ "name": "phoneNumber", "type": "text"}]}
],
  "methods": [{ "name": "MakePhoneCall", "description": "Launches the default dialer app set to start a phone call usingthe number in the PhoneNumber property.", "deprecated": "false", "params": []},
    { "name": "MakePhoneCallDirect", "description": "Directly initiates a phone call using the number in the PhoneNumber property.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneNumberPicker",
  "name": "PhoneNumberPicker",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "A button that, when clicked on, displays a list of the contacts' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul>\n<li> <code>ContactName<\/code>: the contact's name <\/li>\n <li> <code>PhoneNumber<\/code>: the contact's phone number <\/li>\n <li> <code>EmailAddress<\/code>: the contact's email address <\/li> <li> <code>Picture<\/code>: the name of the file containing the contact's image, which can be used as a <code>Picture<\/code> property value for the <code>Image<\/code> or <code>ImageSprite<\/code> component.<\/li><\/ul>\n<\/p><p>Other properties affect the appearance of the button (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be clicked on (<code>Enabled<\/code>).<\/p>\n<p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ContactName", "description": "Returns the full name of the selected contact, or the empty string if a name is unavailable.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ContactUri", "description": "URI that specifies the location of the contact on the device.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddress", "description": "Returns the primary email address of the selected contact, or the empty string if an email\n address is unavailable.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "EmailAddressList", "description": "Returns a list of email addresses associated with the selected contact.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap ContactPicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, ContactPicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, ContactPicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for ContactPicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for ContactPicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the ContactPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the ContactPicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "Returns the primary phone number associated with the selected contact, or the empty string if\n no phone number is associated with the contact.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "PhoneNumberList", "description": "Returns a list of phone numbers associated with the selected contact.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Picture", "description": "Returns a picture URI for the selected contact, which can be\n used to retrieve the contact's photo and other fields.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `ContactPicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a ContactPicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on ContactPicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the ContactPicker should be visible on the screen. Value is true if the ContactPicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the ContactPicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the ContactPicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterPicking", "description": "Event to be raised after the `ContactPicker` activity returns its\n result and the properties have been filled in.", "deprecated": "false", "params": []}
,
    { "name": "BeforePicking", "description": "Event to raise when the `ContactPicker` is clicked or the picker is shown\n using the", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the ContactPicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the ContactPicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the ContactPicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the ContactPicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Open", "description": "Opens the ContactPicker, as though the user clicked on it.", "deprecated": "false", "params": []},
    { "name": "ViewContact", "description": "view a contact via its URI", "deprecated": "false", "params": [{ "name": "uri", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.PhoneStatus",
  "name": "PhoneStatus",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "INTERNAL",
  "helpString": "Component that returns information about the phone.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneip.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "WebRTC", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "WebRTC", "description": "Set whether or not we will use WebRTC to communicate with the server", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "OnSettings", "description": "This event is fired when the \"settings\" menu item is selected (only available in the\n Companion App, defined in ReplForm.java).", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetInstaller", "description": "Return the app that installed us", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetVersionName", "description": "Return the our VersionName property", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "GetWifiIpAddress", "description": "Returns the IP address of the phone in the form of a String", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "InstallationId", "description": "Return the ACRA Installation ID", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "SdkLevel", "description": "Get the current Android SDK Level", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "doFault", "description": "Causes an Exception, used to debug exception processing.", "deprecated": "false", "params": []},
    { "name": "installURL", "description": "Downloads the URL and installs it as an Android Package via the installed browser", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]},
    { "name": "isConnected", "description": "Returns TRUE if the phone is on Wifi, FALSE otherwise", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "isDirect", "description": "Returns true if we are running in the emulator or USB Connection", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "setAssetsLoaded", "description": "Declare that we have loaded our initial assets and other assets should come from the sdcard", "deprecated": "false", "params": []},
    { "name": "setHmacSeedReturnCode", "description": "Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server. Note: This code also starts the connection negotiation process if we are using WebRTC. This is a bit of a kludge...", "deprecated": "false", "params": [{ "name": "seed", "type": "text"},{ "name": "rendezvousServer", "type": "text"}], "returnType": "text"},
    { "name": "shutdown", "description": "Really Exit the Application", "deprecated": "false", "params": []},
    { "name": "startHTTPD", "description": "Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!", "deprecated": "false", "params": [{ "name": "secure", "type": "boolean"}]},
    { "name": "startWebRTC", "description": "Start the WebRTC engine", "deprecated": "false", "params": [{ "name": "rendezvousServer", "type": "text"},{ "name": "iceServers", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Player",
  "name": "Player",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "Multimedia component that plays audio and controls phone vibration.  The name of a multimedia field is specified in the <code>Source<\/code> property, which can be set in the Designer or in the Blocks Editor.  The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).\n<p>For supported audio formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p>\n<p>This component is best for long sound files, such as songs, while the <code>Sound<\/code> component is more efficient for short files, such as sound effects.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/player.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "conditionals":{
    "permissions": {
      "Source": [
        "android.permission.READ_EXTERNAL_STORAGE"
      ]
    }
  },
  "properties": [{ "name": "Loop", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "PlayOnlyInForeground", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Source", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Volume", "editorType": "non_negative_float", "defaultValue": "50", "editorArgs": []}],
  "blockProperties": [{ "name": "IsPlaying", "description": "Reports whether the media is playing", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Loop", "description": "If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "PlayOnlyInForeground", "description": "If true, the player will pause playing when leaving the current screen; if false (default option), the player continues playing whenever the current screen is displaying or not.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Source", "description": "Returns the path to the audio source", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Volume", "description": "Sets the volume to a number between 0 and 100", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Completed", "description": "Indicates that the media has reached the end", "deprecated": "false", "params": []}
,
    { "name": "OtherPlayerStarted", "description": "This event is signaled when another player has started (and the current player is playing or paused, but not stopped).", "deprecated": "false", "params": []}
,
    { "name": "PlayerError", "description": "The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "Pause", "description": "Suspends playing the media if it is playing.", "deprecated": "false", "params": []},
    { "name": "Start", "description": "Plays the media.  If it was previously paused, the playing is resumed.\n If it was previously stopped, it starts from the beginning.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops playing the media and seeks to the beginning of the song.", "deprecated": "false", "params": []},
    { "name": "Vibrate", "description": "Vibrates for specified number of milliseconds.", "deprecated": "false", "params": [{ "name": "milliseconds", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Polygon",
  "name": "Polygon",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "Polygon",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Description", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Draggable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EnableInfobox", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FillColor", "editorType": "color", "defaultValue": "&HFFFF0000", "editorArgs": []},
{ "name": "FillOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "HolePointsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "PointsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "StrokeColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "StrokeOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "StrokeWidth", "editorType": "integer", "defaultValue": "1", "editorArgs": []},
{ "name": "Title", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Description", "description": "The description displayed in the info window that appears when the user clicks on the Polygon.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Draggable", "description": "The Draggable property is used to set whether or not the user can drag the Polygon by long-pressing and then dragging the Polygon to a new location.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableInfobox", "description": "Enable or disable the infobox window display when the user taps the Polygon.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FillColor", "description": "The paint color used to fill in the Polygon.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FillOpacity", "description": "The opacity of the interior of the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HolePoints", "description": "Specifies the points of any holes in the `Polygon`. The `HolePoints` property is a list of\n lists, with each sublist containing `(latitude, longitude)` points representing a hole.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "HolePointsFromString", "description": "Constructs holes in a polygon from a given list of coordinates per hole.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Points", "description": "Specifies the Points used for drawing the `Polygon`. The Points are specified as a list of\n lists containing latitude and longitude values, such as `[[lat1, long1], [lat2, long2], ...]`.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "PointsFromString", "description": "Constructs a polygon from the given list of coordinates.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "StrokeColor", "description": "The paint color used to outline the Polygon.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeOpacity", "description": "The opacity of the stroke used to outline the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeWidth", "description": "The width of the stroke used to outline the Polygon.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "The title displayed in the info window that appears when the user clicks on the Polygon.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Type", "description": "Returns the type of the feature. For polygons, this returns the text \"Polygon\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Polygon should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "The user clicked on the Polygon.", "deprecated": "false", "params": []}
,
    { "name": "Drag", "description": "The user dragged the Polygon.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "The user long-pressed on the Polygon. This event will only trigger if Draggable is false.", "deprecated": "false", "params": []}
,
    { "name": "StartDrag", "description": "The user started a drag operation.", "deprecated": "false", "params": []}
,
    { "name": "StopDrag", "description": "The user stopped a drag operation.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Centroid", "description": "Returns the centroid of the Polygon as a (latitude, longitude) pair.", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "DistanceToFeature", "description": "Compute the distance, in meters, between two map features.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "DistanceToPoint", "description": "Compute the distance, in meters, between a Polygon and a latitude, longitude point.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "centroid", "type": "boolean"}], "returnType": "number"},
    { "name": "HideInfobox", "description": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.", "deprecated": "false", "params": []},
    { "name": "ShowInfobox", "description": "Show the infobox for the Polygon. This will show the infobox even if EnableInfobox is set to false.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.ProximitySensor",
  "name": "ProximitySensor",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/proximitysensor.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "KeepRunningWhenOnPause", "editorType": "boolean", "defaultValue": "False", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Reports whether or not the device has a proximity sensor.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Distance", "description": "Returns the distance from the object to the device", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If true, the sensor will generate events.  Otherwise, no events\n are generated.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "KeepRunningWhenOnPause", "description": "Returns value of keepRunningWhenOnPause", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "MaximumRange", "description": "Reports the Maximum Range of the device's ProximitySensor", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "ProximityChanged", "description": "Triggered when distance (in cm) of the object to the device changes.", "deprecated": "false", "params": [{ "name": "distance", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Rectangle",
  "name": "Rectangle",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MAPS",
  "helpString": "Rectangle",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Description", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Draggable", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "EastLongitude", "editorType": "float", "defaultValue": "0", "editorArgs": []},
{ "name": "EnableInfobox", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FillColor", "editorType": "color", "defaultValue": "&HFFFF0000", "editorArgs": []},
{ "name": "FillOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "NorthLatitude", "editorType": "float", "defaultValue": "0", "editorArgs": []},
{ "name": "SouthLatitude", "editorType": "float", "defaultValue": "0", "editorArgs": []},
{ "name": "StrokeColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "StrokeOpacity", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "StrokeWidth", "editorType": "integer", "defaultValue": "1", "editorArgs": []},
{ "name": "Title", "editorType": "text", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []},
{ "name": "WestLongitude", "editorType": "float", "defaultValue": "0", "editorArgs": []}],
  "blockProperties": [{ "name": "Description", "description": "The description displayed in the info window that appears when the user clicks on the Rectangle.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Draggable", "description": "The Draggable property is used to set whether or not the user can drag the Rectangle by long-pressing and then dragging the Rectangle to a new location.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "EastLongitude", "description": "The east edge of the rectangle, in decimal degrees east of the prime meridian.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "EnableInfobox", "description": "Enable or disable the infobox window display when the user taps the Rectangle.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FillColor", "description": "The paint color used to fill in the Rectangle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FillOpacity", "description": "The opacity of the interior of the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "NorthLatitude", "description": "The north edge of the rectangle, in decimal degrees north of the equator.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "SouthLatitude", "description": "The south edge of the rectangle, in decimal degrees north of the equator.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeColor", "description": "The paint color used to outline the Rectangle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeOpacity", "description": "The opacity of the stroke used to outline the map feature.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "StrokeWidth", "description": "The width of the stroke used to outline the Rectangle.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Title", "description": "The title displayed in the info window that appears when the user clicks on the Rectangle.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Type", "description": "Returns the type of the feature. For rectangles, this returns the text \"Rectangle\".", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Rectangle should be visible on the screen. Value is true if the component is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WestLongitude", "description": "The west edge of the rectangle, in decimal degrees east of the equator.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "Click", "description": "The user clicked on the Rectangle.", "deprecated": "false", "params": []}
,
    { "name": "Drag", "description": "The user dragged the Rectangle.", "deprecated": "false", "params": []}
,
    { "name": "LongClick", "description": "The user long-pressed on the Rectangle. This event will only trigger if Draggable is false.", "deprecated": "false", "params": []}
,
    { "name": "StartDrag", "description": "The user started a drag operation.", "deprecated": "false", "params": []}
,
    { "name": "StopDrag", "description": "The user stopped a drag operation.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Bounds", "description": "Returns the bounding box of the Rectangle in the format ((North West) (South East)).", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "Center", "description": "Returns the center of the Rectangle as a list of the form (Latitude Longitude).", "deprecated": "false", "params": [], "returnType": "list"},
    { "name": "DistanceToFeature", "description": "Compute the distance, in meters, between two map features.", "deprecated": "false", "params": [{ "name": "mapFeature", "type": "component"},{ "name": "centroids", "type": "boolean"}], "returnType": "number"},
    { "name": "DistanceToPoint", "description": "Compute the distance, in meters, between a Rectangle and a latitude, longitude point.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"},{ "name": "centroid", "type": "boolean"}], "returnType": "number"},
    { "name": "HideInfobox", "description": "Hide the infobox if it is shown. If the infobox is not visible this function has no effect.", "deprecated": "false", "params": []},
    { "name": "SetCenter", "description": "Moves the Rectangle so that it is centered on the given latitude and longitude while attempting to maintain the width and height of the Rectangle as measured from the center to the edges.", "deprecated": "false", "params": [{ "name": "latitude", "type": "number"},{ "name": "longitude", "type": "number"}]},
    { "name": "ShowInfobox", "description": "Show the infobox for the Rectangle. This will show the infobox even if EnableInfobox is set to false.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Serial",
  "name": "Serial",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "CONNECTIVITY",
  "helpString": "Serial component which can be used to connect to devices like Arduino",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/arduino.png",
  "licenseName": "",
  "androidMinSdk": 12,
  "properties": [{ "name": "BaudRate", "editorType": "integer", "defaultValue": "9600", "editorArgs": []},
{ "name": "BufferSize", "editorType": "integer", "defaultValue": "256", "editorArgs": []}],
  "blockProperties": [{ "name": "BaudRate", "description": "Returns the current baud rate", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BufferSize", "description": "Returns the buffer size in bytes", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "IsInitialized", "description": "Returns true when the Serial has been initialized.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "IsOpen", "description": "Returns true when the Serial connection is open.", "type": "boolean", "rw": "read-only", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "CloseSerial", "description": "Closes serial connection. Returns true when closed.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "InitializeSerial", "description": "Initializes serial connection.", "deprecated": "false", "params": []},
    { "name": "OpenSerial", "description": "Opens serial connection. Returns true when opened.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "PrintSerial", "description": "Writes given data to serial, and appends a new line at the end.", "deprecated": "false", "params": [{ "name": "data", "type": "text"}]},
    { "name": "ReadSerial", "description": "Reads data from serial.", "deprecated": "false", "params": [], "returnType": "text"},
    { "name": "WriteSerial", "description": "Writes given data to serial.", "deprecated": "false", "params": [{ "name": "data", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Sharing",
  "name": "Sharing",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "Sharing is a non-visible component that enables sharing files and\/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor\/assets<\/code>, would be: <ul><li><code>\"file:\/\/\/sdcard\/Appinventor\/assets\/arrow.gif\"<\/code><\/li> or <li><code>\"\/storage\/Appinventor\/assets\/arrow.gif\"<\/code><\/li><\/ul>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/sharing.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [],
  "blockProperties": [],
  "events": [],
  "methods": [{ "name": "ShareFile", "description": "Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.", "deprecated": "false", "params": [{ "name": "file", "type": "text"}]},
    { "name": "ShareFileWithMessage", "description": "Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to  choose one from the list. The selected app will open with the file and message inserted on it.", "deprecated": "false", "params": [{ "name": "file", "type": "text"},{ "name": "message", "type": "text"}]},
    { "name": "ShareMessage", "description": "Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Slider",
  "name": "Slider",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ColorLeft", "editorType": "color", "defaultValue": "&HFFFFC800", "editorArgs": []},
{ "name": "ColorRight", "editorType": "color", "defaultValue": "&HFF888888", "editorArgs": []},
{ "name": "MaxValue", "editorType": "float", "defaultValue": "50.0", "editorArgs": []},
{ "name": "MinValue", "editorType": "float", "defaultValue": "10.0", "editorArgs": []},
{ "name": "ThumbEnabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "ThumbPosition", "editorType": "float", "defaultValue": "30.0", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "ColorLeft", "description": "The color of slider to the left of the thumb.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ColorRight", "description": "The color of slider to the right of the thumb.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Slider as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "MaxValue", "description": "Sets the maximum value of slider.  Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value.  Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "MinValue", "description": "Sets the minimum value of slider.  Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value.  Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ThumbEnabled", "description": "Sets whether or not to display the slider thumb.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbPosition", "description": "Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Slider should be visible on the screen. Value is true if the Slider is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Slider, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Slider as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "PositionChanged", "description": "Indicates that position of the slider thumb has changed.", "deprecated": "false", "params": [{ "name": "thumbPosition", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.Sound",
  "name": "Sound",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor.  The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.<\/p> <p>For supported sound file formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p><p>This <code>Sound<\/code> component is best for short sound files, such as sound effects, while the <code>Player<\/code> component is more efficient for longer sounds, such as songs.<\/p><p>You might get an error if you attempt to play a sound immeditely after setting the source.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundEffect.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "500", "editorArgs": []},
{ "name": "Source", "editorType": "asset", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "MinimumInterval", "description": "The minimum interval, in milliseconds, between sounds.  If you play a sound, all further Play() calls will be ignored until the interval has elapsed.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Source", "description": "The name of the sound file.  Only certain formats are supported.  See http:\/\/developer.android.com\/guide\/appendix\/media-formats.html.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "SoundError", "description": "The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "Pause", "description": "Pauses playing the sound if it is being played.", "deprecated": "false", "params": []},
    { "name": "Play", "description": "Plays the sound specified by the Source property.", "deprecated": "false", "params": []},
    { "name": "Resume", "description": "Resumes playing the sound after a pause.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops playing the sound if it is being played.", "deprecated": "false", "params": []},
    { "name": "Vibrate", "description": "Vibrates for the specified number of milliseconds.", "deprecated": "false", "params": [{ "name": "millisecs", "type": "number"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.SoundRecorder",
  "name": "SoundRecorder",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "<p>Multimedia component that records audio.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundRecorder.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "SavedRecording", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "SavedRecording", "description": "Specifies the path to the file where the recording should be stored. If this property is the empty string, then starting a recording will create a file in an appropriate location.  If the property is not the empty string, it should specify a complete path to a file in an existing directory, including a file name with the extension .3gp.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterSoundRecorded", "description": "Provides the location of the newly created sound.", "deprecated": "false", "params": [{ "name": "sound", "type": "text"}]}
,
    { "name": "StartedRecording", "description": "Indicates that the recorder has started, and can be stopped.", "deprecated": "false", "params": []}
,
    { "name": "StoppedRecording", "description": "Indicates that the recorder has stopped, and can be started again.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Start", "description": "Starts recording.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Stops recording.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.SpeechRecognizer",
  "name": "SpeechRecognizer",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "Component for using Voice Recognition to convert from speech to text",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/speechRecognizer.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "UseLegacy", "editorType": "boolean", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Result", "description": "Returns the last text produced by the recognizer.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UseLegacy", "description": "If true, an app can retain their older behaviour.", "type": "boolean", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterGettingText", "description": "Simple event to raise after the SpeechRecognizer has recognized speech. If", "deprecated": "false", "params": [{ "name": "result", "type": "text"},{ "name": "partial", "type": "boolean"}]}
,
    { "name": "BeforeGettingText", "description": "Simple event to raise when the `SpeechRecognizer` is invoked but before its\n activity is started.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "GetText", "description": "Asks the user to speak, and converts the speech to text. Signals the", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Function used to forcefully stop listening speech in cases where\n SpeechRecognizer cannot stop automatically.\n This function works only when the", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Spinner",
  "name": "Spinner",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString<\/code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3<\/em>) or by setting the <code>Elements<\/code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting  it does not generate an After Picking event. Consequently it's useful to make the  first Spinner item be a non-choice like \"Select from below...\". <\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "images/spinner.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ElementsFromString", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "Prompt", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Selection", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Elements", "description": "returns a list of text elements to be picked from.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ElementsFromString", "description": "Sets the Spinner list to the elements passed in the comma-separated string", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Spinner, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Spinner as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Prompt", "description": "Text with the current title for the Spinner window", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Selection", "description": "Returns the current selected item in the spinner", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SelectionIndex", "description": "The index of the currently selected item, starting at 1. If no item is selected, the value will be 0.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Spinner should be visible on the screen. Value is true if the Spinner is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Spinner, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Spinner as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterSelecting", "description": "Event called after the user selects an item from the dropdown list.", "deprecated": "false", "params": [{ "name": "selection", "type": "text"}]}
],
  "methods": [{ "name": "DisplayDropdown", "description": "Displays the dropdown list for selection, same action as when the user clicks on the spinner.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Switch",
  "name": "Switch",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Toggle switch that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "On", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "ThumbColorActive", "editorType": "color", "defaultValue": "&HFFFFFFFF", "editorArgs": []},
{ "name": "ThumbColorInactive", "editorType": "color", "defaultValue": "&HFFCCCCCC", "editorArgs": []},
{ "name": "TrackColorActive", "editorType": "color", "defaultValue": "&HFF00FF00", "editorArgs": []},
{ "name": "TrackColorInactive", "editorType": "color", "defaultValue": "&HFF444444", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the Switch as an alpha-red-green-blue integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "True if the Switch is active and clickable.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Set to true if the text of the Switch should be bold.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Set to true if the text of the Switch should be italic.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "Specifies the text font size of the Switch in scale-independent pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Specifies the text font face of the Switch.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the Switch, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the Switch as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "On", "description": "Returns true if the `Switch` is on.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Specifies the text displayed by the Switch.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextColor", "description": "Specifies the text color of the Switch as an alpha-red-green-blue integer.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbColorActive", "description": "Returns the `Switch`'s thumb color (button that toggles back and forth)\n when the switch is ON\/Checked", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ThumbColorInactive", "description": "Returns the `Switch`'s thumb color (button that toggles back and forth)\n when the switch is Off\/Unchecked", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TrackColorActive", "description": "Returns the `Switch`'s track color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "TrackColorInactive", "description": "Color of the toggle track when switched off", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the Switch should be visible on the screen. Value is true if the Switch is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the Switch, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the Switch as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Changed", "description": "User change the state of the `Switch` from On to Off or back.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Switch became the focused component.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Switch stopped being the focused component.", "deprecated": "false", "params": []}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TableArrangement",
  "name": "TableArrangement",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed in tabular form.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Columns", "editorType": "non_negative_integer", "defaultValue": "2", "editorArgs": []},
{ "name": "Rows", "editorType": "non_negative_integer", "defaultValue": "2", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Columns", "description": "Columns property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the TableArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the TableArrangement as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Rows", "description": "Rows property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the TableArrangement should be visible on the screen. Value is true if the TableArrangement is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the TableArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the TableArrangement as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TextBox",
  "name": "TextBox",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A box for the user to enter text.  The initial or user-entered text value is in the <code>Text<\/code> property.  If blank, the <code>Hint<\/code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.<\/p><p>The <code>MultiLine<\/code> property determines if the text can havemore than one line.  For a single line text box, the keyboard will closeautomatically when the user presses the Done key.  To close the keyboard for multiline text boxes, the app should use  the HideKeyboard method or  rely on the user to press the Back key.<\/p><p>The <code> NumbersOnly<\/code> property restricts the keyboard to acceptnumeric input only.<\/p><p>Other properties affect the appearance of the text box (<code>TextAlignment<\/code>, <code>BackgroundColor<\/code>, etc.) and whether it can be used (<code>Enabled<\/code>).<\/p><p>Text boxes are usually used with the <code>Button<\/code> component, with the user clicking on the button when text entry is complete.<\/p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Hint", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "MultiLine", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "NumbersOnly", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "ReadOnly", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Text", "editorType": "textArea", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "The background color of the input box.  You can choose a color by name in the Designer or in the Blocks Editor.  The default background color is 'default' (shaded 3-D look).", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "Whether the user can enter text into the TextBox.  By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "Whether the font for the text should be bold.  By default, it is not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontItalic", "description": "Whether the text should appear in italics.  By default, it does not.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "FontSize", "description": "The font size for the text.  By default, it is 14.0 points.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "The font for the text.  The value can be changed in the Designer.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the TextBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the TextBox as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hint", "description": "Text that should appear faintly in the TextBox to provide a hint as to what the user should enter.  This can only be seen if the Text property is empty.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "MultiLine", "description": "If true, then this text box accepts multiple lines of input, which are entered using the return key.  For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard.  The app should call the HideKeyboard method to hide the keyboard for a mutiline text box.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "NumbersOnly", "description": "If true, then this text box accepts only numbers as keyboard input.  Numbers can include a decimal point and an optional leading minus sign.  This applies to keyboard input only.  Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "ReadOnly", "description": "Whether the TextBox is read-only. By default, this is true.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Text", "description": "Returns the textbox contents.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Whether the text should be left justified, centered, or right justified.  By default, text is left justified.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "The color for the text.  You can choose a color by name in the Designer or in the Blocks Editor.  The default text color is black.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the TextBox should be visible on the screen. Value is true if the TextBox is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the TextBox, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the TextBox as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotFocus", "description": "Event raised when the TextBox is selected for input, such as by the user touching it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Event raised when the TextBox is no longer selected for input, such as if the user touches a different text box.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "HideKeyboard", "description": "Hide the keyboard.  Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.", "deprecated": "false", "params": []},
    { "name": "RequestFocus", "description": "Sets the TextBox active.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.TextToSpeech",
  "name": "TextToSpeech",
  "external": "false",
  "version": "5",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "The TestToSpeech component speaks a given text aloud.  You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code.  This changes the pronunciation of words, not the actual language spoken.  For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.<\/p> <p>You can also specify a country by supplying a country code. This can affect the pronunciation.  For example, British English (GBR) will sound different from US English (USA).  Not every country code will affect every language.<\/p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/textToSpeech.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Country", "editorType": "countries", "defaultValue": "", "editorArgs": []},
{ "name": "Language", "editorType": "languages", "defaultValue": "", "editorArgs": []},
{ "name": "Pitch", "editorType": "float", "defaultValue": "1.0", "editorArgs": []},
{ "name": "SpeechRate", "editorType": "float", "defaultValue": "1.0", "editorArgs": []}],
  "blockProperties": [{ "name": "AvailableCountries", "description": "List of the country codes available on this device for use with TextToSpeech.  Check the Android developer documentation under supported languages to find the meanings of these abbreviations.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "AvailableLanguages", "description": "List of the languages available on this device for use with TextToSpeech.  Check the Android developer documentation under supported languages to find the meanings of these abbreviations.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Country", "description": "Country code to use for speech generation.  This can affect the pronounciation.  For example, British English (GBR) will sound different from US English (USA).  Not every country code will affect every language.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Language", "description": "Sets the language for TextToSpeech. This changes the way that words are pronounced, not the actual language that is spoken.  For example setting the language to and speaking English text with sound like someone speaking English with a Frernch accent.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Pitch", "description": "Sets the Pitch for TextToSpeech The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values raise it.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Result", "description": "Returns `true", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "SpeechRate", "description": "Sets the SpeechRate for TextToSpeech. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it.", "type": "number", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "AfterSpeaking", "description": "Event to raise after the message is spoken. The result will be true if the message is spoken successfully, otherwise it will be false.", "deprecated": "false", "params": [{ "name": "result", "type": "boolean"}]}
,
    { "name": "BeforeSpeaking", "description": "Event to raise when Speak is invoked, before the message is spoken.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "Speak", "description": "Speaks the given message.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Texting",
  "name": "Texting",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "<p>A component that will, when the <code>SendMessage<\/code> method is called, send the text message specified in the <code>Message<\/code> property to the phone number specified in the <code>PhoneNumber<\/code> property.<\/p> <p>If the <code>ReceivingEnabled<\/code> property is set to 1 messages will <b>not<\/b> be received. If <code>ReceivingEnabled<\/code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled<\/code> is set to 3, messages will be received when the application is running <b>and<\/b> when the application is not running they will be queued and a notification displayed to the user.<\/p> <p>When a message arrives, the <code>MessageReceived<\/code> event is raised and provides the sending number and message.<\/p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it's not visible on the screen) and, moreso, even if the app is not running, so long as it's installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar.  Selecting the notification will bring up the app.  As an app developer, you'll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.<\/p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.<\/p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber<\/code> property to a Text string with the specified digits (e.g., 6505551212).  Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.<\/p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker<\/code> component, which lets the users select a phone numbers from the ones stored in the the phone's contacts.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/texting.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "conditionals":{
    "permissions": {
      "ReceivingEnabled": [
        "android.permission.RECEIVE_SMS"
      ],
      "SendMessageDirect": [
        "android.permission.SEND_SMS",
        "android.permission.READ_PHONE_STATE"
      ]
    },
    "broadcastReceivers": {
      "GoogleVoiceEnabled": [
        "<receiver android:name=\"com.google.appinventor.components.runtime.util.SmsBroadcastReceiver\">\n      <intent-filter >\n        <action android:name=\"com.google.android.apps.googlevoice.SMS_RECEIVED\"/>\n    </intent-filter>\n    </receiver>\n"
      ],
      "ReceivingEnabled": [
        "<receiver android:name=\"com.google.appinventor.components.runtime.util.SmsBroadcastReceiver\">\n      <intent-filter >\n        <action android:name=\"android.provider.Telephony.SMS_RECEIVED\"/>\n    </intent-filter>\n    </receiver>\n"
      ]
    }
  },
  "properties": [{ "name": "GoogleVoiceEnabled", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Message", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "PhoneNumber", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ReceivingEnabled", "editorType": "text_receiving", "defaultValue": "1", "editorArgs": [], "alwaysSend": true}],
  "blockProperties": [{ "name": "GoogleVoiceEnabled", "description": "If true, then SendMessage will attempt to send messages over Wifi using Google Voice.  This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account.  If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Message", "description": "The message that will be sent when the SendMessage method is called.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "PhoneNumber", "description": "Sets the phone number to send the text message to when the SendMessage function is called.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ReceivingEnabled", "description": "If set to 1 (OFF) no messages will be received.  If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification.  Selecting the notification will bring up the app and signal the MessageReceived event.  Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens.  As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed.", "type": "number", "rw": "read-write", "deprecated": "false", "alwaysSend": true, "defaultValue": "1"}],
  "events": [{ "name": "MessageReceived", "description": "Event that's raised when a text message is received by the phone. **Using this block will add\n [dangerous permissions](\/\/developer.android.com\/guide\/topics\/permissions\/overview#dangerous_permissions)\n that will require additional approval if your app is submitted to the Google Play Store.**", "deprecated": "false", "params": [{ "name": "number", "type": "text"},{ "name": "messageText", "type": "text"}]}
],
  "methods": [{ "name": "SendMessage", "description": "Launch the phone's default text messaging app with the message and phone number prepopulated.", "deprecated": "false", "params": []},
    { "name": "SendMessageDirect", "description": "Send a text message. **Using this block will add\n [dangerous permissions](https:\/\/developer.android.com\/guide\/topics\/permissions\/overview#dangerous_permissions)\n that will require additional approval if your app is submitted to the Google Play Store.**", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Thermometer",
  "name": "Thermometer",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SENSORS",
  "helpString": "A sensor component that can measure the ambient (external) temperature. Most Android devices do not have this sensor.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/thermometer.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "RefreshTime", "editorType": "non_negative_integer", "defaultValue": "1000", "editorArgs": []}],
  "blockProperties": [{ "name": "Available", "description": "Specifies whether or not the device has the hardware to support the Thermometer component.", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "Enabled", "description": "If enabled, then device will listen for changes.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "RefreshTime", "description": "The requested minimum time in milliseconds between changes in readings being reported. Android is not guaranteed to honor the request. Setting this property has no effect on pre-Gingerbread devices.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Temperature", "description": "The temperature in degrees Celsius, if the sensor is available and enabled", "type": "number", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "TemperatureChanged", "description": "Called when a change is detected in the temperature (in degrees Celsius).", "deprecated": "false", "params": [{ "name": "temperature", "type": "number"}]}
],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.TimePicker",
  "name": "TimePicker",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "<p>A button that, when clicked on, launches  a popup dialog to allow the user to select a time.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0", "editorArgs": []},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0", "editorArgs": []},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "Text", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1", "editorArgs": []},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "BackgroundColor", "description": "Returns the button's background color", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Enabled", "description": "If set, user can tap TimePicker to cause action.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontBold", "description": "If set, TimePicker text is displayed in bold.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontItalic", "description": "If set, TimePicker text is displayed in italics.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "FontSize", "description": "Point size for TimePicker text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "FontTypeface", "description": "Font family for TimePicker text.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the TimePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the TimePicker as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Hour", "description": "The hour of the last time set using the time picker. The hour is in a 24 hour format. If the last time set was 11:53 pm, this property will return 23.", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Image", "description": "Image to display on button.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Instant", "description": "The instant of the last time set using the time picker", "type": "InstantInTime", "rw": "read-only", "deprecated": "false"},
    { "name": "Minute", "description": "The minute of the last time set using the time picker", "type": "number", "rw": "read-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Shape", "description": "Returns the style of the `TimePicker`.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "ShowFeedback", "description": "Specifies if a visual feedback should be shown  for a TimePicker that has an image as background.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Text", "description": "Text to display on TimePicker.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "TextAlignment", "description": "Left, center, or right.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "TextColor", "description": "Color for button text.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the TimePicker should be visible on the screen. Value is true if the TimePicker is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the TimePicker, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the TimePicker as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "AfterTimeSet", "description": "This event is run when a user has set the time in the popup dialog.", "deprecated": "false", "params": []}
,
    { "name": "GotFocus", "description": "Indicates the cursor moved over the TimePicker so it is now possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "LostFocus", "description": "Indicates the cursor moved away from the TimePicker so it is now no longer possible to click it.", "deprecated": "false", "params": []}
,
    { "name": "TouchDown", "description": "Indicates that the TimePicker was pressed down.", "deprecated": "false", "params": []}
,
    { "name": "TouchUp", "description": "Indicates that the TimePicker has been released.", "deprecated": "false", "params": []}
],
  "methods": [{ "name": "LaunchPicker", "description": "Launches the TimePicker dialog.", "deprecated": "false", "params": []},
    { "name": "SetTimeToDisplay", "description": "Set the time to be shown in the Time Picker popup. Current time is shown by default.", "deprecated": "false", "params": [{ "name": "hour", "type": "number"},{ "name": "minute", "type": "number"}]},
    { "name": "SetTimeToDisplayFromInstant", "description": "Set the time from the instant to be shown in the Time Picker dialog. Current time is shown by default.", "deprecated": "false", "params": [{ "name": "instant", "type": "InstantInTime"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.TinyDB",
  "name": "TinyDB",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "STORAGE",
  "helpString": "TinyDB is a non-visible component that stores data for an app. <p> Apps created with App Inventor are initialized each time they run: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent <\/em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. <\/<p> <p> Data items are strings stored under <em>tags<\/em> . To store a data item, you specify the tag it should be stored under.  Subsequently, you can retrieve the data that was stored under a given tag. <\/p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can<\/em> use TinyDb to shares data between the different screens of a multi-screen app. <\/p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb.  That sharing will disappear once the apps are packaged.  But, during development, you should be careful to clear the TinyDb each time you start working on a new app.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyDB.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "Namespace", "editorType": "string", "defaultValue": "TinyDB1", "editorArgs": []}],
  "blockProperties": [{ "name": "Namespace", "description": "Namespace for storing data.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [],
  "methods": [{ "name": "ClearAll", "description": "Clear the entire data store.", "deprecated": "false", "params": []},
    { "name": "ClearTag", "description": "Clear the entry with the given tag.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "GetTags", "description": "Return a list of all the tags in the data store.", "deprecated": "false", "params": [], "returnType": "any"},
    { "name": "GetValue", "description": "Retrieve the value stored under the given tag. If there's no such tag, then return valueIfTagNotThere.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueIfTagNotThere", "type": "any"}], "returnType": "any"},
    { "name": "StoreValue", "description": "Store the given value under the given tag.  The storage persists on the phone when the app is restarted.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.TinyWebDB",
  "name": "TinyWebDB",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "STORAGE",
  "helpString": "Non-visible component that communicates with a Web service to store and retrieve information.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyWebDB.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://tinywebdb.appinventor.mit.edu", "editorArgs": []}],
  "blockProperties": [{ "name": "ServiceURL", "description": "The URL of the web service database.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotValue", "description": "Indicates that a GetValue server request has succeeded.", "deprecated": "false", "params": [{ "name": "tagFromWebDB", "type": "text"},{ "name": "valueFromWebDB", "type": "any"}]}
,
    { "name": "ValueStored", "description": "Event indicating that a StoreValue server request has succeeded.", "deprecated": "false", "params": []}
,
    { "name": "WebServiceError", "description": "Indicates that the communication with the Web service signaled an error.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetValue", "description": "Sends a request to the Web service to get the value stored under the given tag. The Web service must decide what to return if there is no value stored under the tag. This component accepts whatever is returned.", "deprecated": "false", "params": [{ "name": "tag", "type": "text"}]},
    { "name": "StoreValue", "description": "Asks the Web service to store the given value under the given tag", "deprecated": "false", "params": [{ "name": "tag", "type": "text"},{ "name": "valueToStore", "type": "any"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.Twitter",
  "name": "Twitter",
  "external": "false",
  "version": "4",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "SOCIAL",
  "helpString": "A non-visible component that enables communication with <a href=\"http:\/\/www.twitter.com\" target=\"_blank\">Twitter<\/a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized<\/code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter<\/code>)<\/li>\n<li> Sending a Tweet (<code>Tweet<\/code>)     <\/li>\n<li> Sending a Tweet with an Image (<code>TweetWithImage<\/code>)     <\/li>\n<li> Directing a message to a specific user      (<code>DirectMessage<\/code>)<\/li>\n <li> Receiving the most recent messages directed to the logged-in user      (<code>RequestDirectMessages<\/code>)<\/li>\n <li> Following a specific user (<code>Follow<\/code>)<\/li>\n<li> Ceasing to follow a specific user (<code>StopFollowing<\/code>)<\/li>\n<li> Getting a list of users following the logged-in user      (<code>RequestFollowers<\/code>)<\/li>\n <li> Getting the most recent messages of users followed by the      logged-in user (<code>RequestFriendTimeline<\/code>)<\/li>\n <li> Getting the most recent mentions of the logged-in user      (<code>RequestMentions<\/code>)<\/li><\/ul><\/p>\n <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization  specific to your app from http:\/\/twitter.com\/oauth_clients\/new",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/twitter.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ConsumerKey", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "ConsumerSecret", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "ConsumerKey", "description": "ConsumerKey property getter method.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "ConsumerSecret", "description": "ConsumerSecret property getter method.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "DirectMessages", "description": "This property contains a list of the most recent messages mentioning the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>Authorized<\/code> event.<\/li> <li> Call the <code>RequestDirectMessages<\/code> method.<\/li> <li> Wait for the <code>DirectMessagesReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to <code>RequestDirectMessages<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Followers", "description": "This property contains a list of the followers of the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Call the <code>RequestFollowers<\/code> method.<\/li> <li> Wait for the <code>FollowersReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of followers (and maintain its value until any subsequent call to <code>RequestFollowers<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "FriendTimeline", "description": "This property contains the 20 most recent messages of users being followed.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Specify users to follow with one or more calls to the <code>Follow<\/code> method.<\/li> <li> Call the <code>RequestFriendTimeline<\/code> method.<\/li> <li> Wait for the <code>FriendTimelineReceived<\/code> event.<\/li> <\/ol>\nThe value of this property will then be set to the list of messages (and maintain its value until any subsequent call to <code>RequestFriendTimeline<\/code>.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Mentions", "description": "This property contains a list of mentions of the logged-in user.  Initially, the list is empty.  To set it, the program must: <ol> <li> Call the <code>Authorize<\/code> method.<\/li> <li> Wait for the <code>IsAuthorized<\/code> event.<\/li> <li> Call the <code>RequestMentions<\/code> method.<\/li> <li> Wait for the <code>MentionsReceived<\/code> event.<\/li><\/ol>\nThe value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to <code>RequestMentions<\/code>).", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "SearchResults", "description": "This property, which is initially empty, is set to a list of search results after the program: <ol><li>Calls the <code>SearchTwitter<\/code> method.<\/li> <li>Waits for the <code>SearchSuccessful<\/code> event.<\/li><\/ol>\nThe value of the property will then be the same as the parameter to <code>SearchSuccessful<\/code>.  Note that it is not necessary to call the <code>Authorize<\/code> method before calling <code>SearchTwitter<\/code>.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "TwitPic_API_Key", "description": "TwitPicAPIkey property getter method.", "type": "text", "rw": "read-write", "deprecated": "true"},
    { "name": "Username", "description": "The user name of the authorized user. Empty if there is no authorized user.", "type": "text", "rw": "read-only", "deprecated": "false"}],
  "events": [{ "name": "DirectMessagesReceived", "description": "This event is raised when the recent messages requested through <code>RequestDirectMessages<\/code> have been retrieved. A list of the messages can then be found in the <code>messages<\/code> parameter or the <code>Messages<\/code> property.", "deprecated": "false", "params": [{ "name": "messages", "type": "list"}]}
,
    { "name": "FollowersReceived", "description": "This event is raised when all of the followers of the logged-in user requested through <code>RequestFollowers<\/code> have been retrieved. A list of the followers can then be found in the <code>followers<\/code> parameter or the <code>Followers<\/code> property.", "deprecated": "false", "params": [{ "name": "followers2", "type": "list"}]}
,
    { "name": "FriendTimelineReceived", "description": "This event is raised when the messages requested through <code>RequestFriendTimeline<\/code> have been retrieved. The <code>timeline<\/code> parameter and the <code>Timeline<\/code> property will contain a list of lists, where each sub-list contains a status update of the form (username message)", "deprecated": "false", "params": [{ "name": "timeline", "type": "list"}]}
,
    { "name": "IsAuthorized", "description": "This event is raised after the program calls <code>Authorize<\/code> if the authorization was successful.  It is also called after a call to <code>CheckAuthorized<\/code> if we already have a valid access token. After this event has been raised, any other method for this component can be called.", "deprecated": "false", "params": []}
,
    { "name": "MentionsReceived", "description": "This event is raised when the mentions of the logged-in user requested through <code>RequestMentions<\/code> have been retrieved.  A list of the mentions can then be found in the <code>mentions<\/code> parameter or the <code>Mentions<\/code> property.", "deprecated": "false", "params": [{ "name": "mentions", "type": "list"}]}
,
    { "name": "SearchSuccessful", "description": "This event is raised when the results of the search requested through <code>SearchSuccessful<\/code> have been retrieved. A list of the results can then be found in the <code>results<\/code> parameter or the <code>Results<\/code> property.", "deprecated": "false", "params": [{ "name": "searchResults", "type": "list"}]}
],
  "methods": [{ "name": "Authorize", "description": "Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don't already have authorization.", "deprecated": "false", "params": []},
    { "name": "CheckAuthorized", "description": "Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.", "deprecated": "false", "params": []},
    { "name": "DeAuthorize", "description": "Removes Twitter authorization from this running app instance", "deprecated": "false", "params": []},
    { "name": "DirectMessage", "description": "This sends a direct (private) message to the specified user.  The message will be trimmed if it exceeds 160characters. <p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "user", "type": "text"},{ "name": "message", "type": "text"}]},
    { "name": "Follow", "description": "Starts following a user.", "deprecated": "false", "params": [{ "name": "user", "type": "text"}]},
    { "name": "Login", "description": "Twitter's API no longer supports login via username and password. Use the Authorize call instead.", "deprecated": "false", "params": [{ "name": "username", "type": "text"},{ "name": "password", "type": "text"}]},
    { "name": "RequestDirectMessages", "description": "Requests the 20 most recent direct messages sent to the logged-in user.  When the messages have been retrieved, the system will raise the <code>DirectMessagesReceived<\/code> event and set the <code>DirectMessages<\/code> property to the list of messages.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": []},
    { "name": "RequestFollowers", "description": "Gets who is following you.", "deprecated": "false", "params": []},
    { "name": "RequestFriendTimeline", "description": "Gets the most recent 20 messages in the user's timeline.", "deprecated": "false", "params": []},
    { "name": "RequestMentions", "description": "Requests the 20 most recent mentions of the logged-in user.  When the mentions have been retrieved, the system will raise the <code>MentionsReceived<\/code> event and set the <code>Mentions<\/code> property to the list of mentions.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": []},
    { "name": "SearchTwitter", "description": "This searches Twitter for the given String query.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "query", "type": "text"}]},
    { "name": "StopFollowing", "description": "Stops following a user.", "deprecated": "false", "params": [{ "name": "user", "type": "text"}]},
    { "name": "Tweet", "description": "This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. <p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "status", "type": "text"}]},
    { "name": "TweetWithImage", "description": "This sends a tweet as the logged-in user with the specified Text and a path to the image to be uploaded, which will be trimmed if it exceeds 160 characters. If an image is not found or invalid, only the text will be tweeted.<p><u>Requirements<\/u>: This should only be called after the <code>IsAuthorized<\/code> event has been raised, indicating that the user has successfully logged in to Twitter.<\/p>", "deprecated": "false", "params": [{ "name": "status", "type": "text"},{ "name": "imagePath", "type": "text"}]}]}
,
{ "type": "com.google.appinventor.components.runtime.VerticalArrangement",
  "name": "VerticalArrangement",
  "external": "false",
  "version": "3",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed one below another.  (The first child component is stored on top, the second beneath it, etc.)  If you wish to have components displayed next to one another, use <code>HorizontalArrangement<\/code> instead.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the VerticalArrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the VerticalArrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the background color of the VerticalArrangement", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the VerticalArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the VerticalArrangement as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Returns the path of the background image of the `VerticalArrangement`.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the VerticalArrangement should be visible on the screen. Value is true if the VerticalArrangement is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the VerticalArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the VerticalArrangement as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.VerticalScrollArrangement",
  "name": "VerticalScrollArrangement",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "LAYOUT",
  "helpString": "<p>A formatting element in which to place components that should be displayed one below another.  (The first child component is stored on top, the second beneath it, etc.)  If you wish to have components displayed next to one another, use <code>HorizontalArrangement<\/code> instead.<\/p><p> This version is scrollable",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1", "editorArgs": []},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000", "editorArgs": []},
{ "name": "Image", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "AlignHorizontal", "description": "A number that encodes how contents of the VerticalScrollArrangement are aligned  horizontally. The choices are: 1 = left aligned, 2 = right aligned,  3 = horizontally centered.  Alignment has no effect if the arrangement's width is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "AlignVertical", "description": "A number that encodes how the contents of the VerticalScrollArrangement are aligned  vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.  Alignment has no effect if the arrangement's height is automatic.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "BackgroundColor", "description": "Returns the background color of the VerticalScrollArrangement", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the vertical height of the VerticalScrollArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the VerticalScrollArrangement as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Image", "description": "Returns the path of the background image of the `VerticalScrollArrangement`.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the VerticalScrollArrangement should be visible on the screen. Value is true if the VerticalScrollArrangement is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the VerticalScrollArrangement, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the VerticalScrollArrangement as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [],
  "methods": []}
,
{ "type": "com.google.appinventor.components.runtime.VideoPlayer",
  "name": "VideoPlayer",
  "external": "false",
  "version": "6",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen.  If the user touches the rectangle, controls will appear to play\/pause, skip ahead, and skip backward within the video.  The application can also control behavior by calling the <code>Start<\/code>, <code>Pause<\/code>, and <code>SeekTo<\/code> methods.  <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats.  For more details about legal formats, see <a href=\"http:\/\/developer.android.com\/guide\/appendix\/media-formats.html\" target=\"_blank\">Android Supported Media Formats<\/a>.<\/p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files.  If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes.  Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.<\/p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "conditionals":{
    "permissions": {
      "Source": [
        "android.permission.READ_EXTERNAL_STORAGE"
      ]
    }
  },
  "properties": [{ "name": "Source", "editorType": "asset", "defaultValue": "", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []},
{ "name": "Volume", "editorType": "non_negative_float", "defaultValue": "50", "editorArgs": []}],
  "blockProperties": [{ "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "FullScreen", "description": "Returns whether the VideoPlayer's video is currently being\n shown in fullscreen mode or not.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the component's vertical height, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the VideoPlayer as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "Source", "description": "The \"path\" to the video.  Usually, this will be the name of the video file, which should be added in the Designer.", "type": "text", "rw": "write-only", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the VideoPlayer should be visible on the screen. Value is true if the VideoPlayer is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Volume", "description": "Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the component's horizontal width, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the VideoPlayer as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "Completed", "description": "Indicates that the video has reached the end", "deprecated": "false", "params": []}
,
    { "name": "VideoPlayerError", "description": "The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "GetDuration", "description": "Returns duration of the video in milliseconds.", "deprecated": "false", "params": [], "returnType": "number"},
    { "name": "Pause", "description": "Pauses playback of the video.  Playback can be resumed at the same location by calling the <code>Start<\/code> method.", "deprecated": "false", "params": []},
    { "name": "SeekTo", "description": "Seeks to the requested time (specified in milliseconds) in the video. If the video is paused, the frame shown will not be updated by the seek. The player can jump only to key frames in the video, so seeking to times that differ by short intervals may not actually move to different frames.", "deprecated": "false", "params": [{ "name": "ms", "type": "number"}]},
    { "name": "Start", "description": "Starts playback of the video.", "deprecated": "false", "params": []},
    { "name": "Stop", "description": "Resets to start of video and pauses it if video was playing.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Voting",
  "name": "Voting",
  "external": "false",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "INTERNAL",
  "helpString": "<p>The Voting component enables users to vote on a question by communicating with a Web service to retrieve a ballot and later sending back users' votes.<\/p>",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/voting.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://androvote.appspot.com", "editorArgs": []}],
  "blockProperties": [{ "name": "BallotOptions", "description": "The list of ballot options.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "BallotQuestion", "description": "The question to be voted on.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "ServiceURL", "description": "The URL of the Voting service", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "UserChoice", "description": "The ballot choice to send to the server, which must be set before <code>SendBallot<\/code> is called.  This must be one of <code>BallotOptions<\/code>.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "UserEmailAddress", "description": "The email address associated with this device. This property has been deprecated and always returns the empty text value.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "UserId", "description": "A text identifying the voter that is sent to the Voting server along with the vote.  This must be set before <code>SendBallot<\/code> is called.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotBallot", "description": "Event indicating that a ballot was retrieved from the Web service and that the properties <code>BallotQuestion<\/code> and <code>BallotOptions<\/code> have been set.  This is always preceded by a call to the method <code>RequestBallot<\/code>.", "deprecated": "false", "params": []}
,
    { "name": "GotBallotConfirmation", "description": "Event confirming that the Voting service received the ballot.", "deprecated": "false", "params": []}
,
    { "name": "NoOpenPoll", "description": "Event indicating that the service has no open poll.", "deprecated": "false", "params": []}
,
    { "name": "WebServiceError", "description": "Event indicating that the communication with the Web service resulted in\n an error.", "deprecated": "false", "params": [{ "name": "message", "type": "text"}]}
],
  "methods": [{ "name": "RequestBallot", "description": "Send a request for a ballot to the Web service specified by the property <code>ServiceURL<\/code>.  When the completes, one of the following events will be raised: <code>GotBallot<\/code>, <code>NoOpenPoll<\/code>, or <code>WebServiceError<\/code>.", "deprecated": "false", "params": []},
    { "name": "SendBallot", "description": "Send a completed ballot to the Web service.  This should not be called until the properties <code>UserId<\/code> and <code>UserChoice<\/code> have been set by the application.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.Web",
  "name": "Web",
  "external": "false",
  "version": "7",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "CONNECTIVITY",
  "helpString": "Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/web.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "AllowCookies", "editorType": "boolean", "defaultValue": "false", "editorArgs": []},
{ "name": "ResponseFileName", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "SaveResponse", "editorType": "boolean", "defaultValue": "false", "editorArgs": []},
{ "name": "Timeout", "editorType": "non_negative_integer", "defaultValue": "0", "editorArgs": []},
{ "name": "Url", "editorType": "string", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "AllowCookies", "description": "Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "RequestHeaders", "description": "The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values.", "type": "list", "rw": "read-write", "deprecated": "false"},
    { "name": "ResponseFileName", "description": "The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "SaveResponse", "description": "Whether the response should be saved in a file.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Timeout", "description": "The number of milliseconds that a web request will wait for a response before giving up. If set to 0, then there is no time limit on how long the request will wait.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "Url", "description": "The URL for the web request.", "type": "text", "rw": "read-write", "deprecated": "false"}],
  "events": [{ "name": "GotFile", "description": "Event indicating that a request has finished.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "responseType", "type": "text"},{ "name": "fileName", "type": "text"}]}
,
    { "name": "GotText", "description": "Event indicating that a request has finished.", "deprecated": "false", "params": [{ "name": "url", "type": "text"},{ "name": "responseCode", "type": "number"},{ "name": "responseType", "type": "text"},{ "name": "responseContent", "type": "text"}]}
,
    { "name": "TimedOut", "description": "Event indicating that a request has timed out.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}
],
  "methods": [{ "name": "BuildRequestData", "description": "Converts a list of two-element sublists, representing name and value pairs, to a\n string formatted as application\/x-www-form-urlencoded media type, suitable to pass to\n PostText.", "deprecated": "false", "params": [{ "name": "list", "type": "list"}], "returnType": "text"},
    { "name": "ClearCookies", "description": "Clears all cookies for this Web component.", "deprecated": "false", "params": []},
    { "name": "Delete", "description": "Performs an HTTP DELETE request using the Url property and retrieves the\n response.\n\n   If the SaveResponse property is true, the response will be saved in a file\n and the GotFile event will be triggered. The ResponseFileName property\n can be used to specify the name of the file.\n\n   If the SaveResponse property is false, the GotText event will be\n triggered.", "deprecated": "false", "params": []},
    { "name": "Get", "description": "Performs an HTTP GET request using the Url property and retrieves the\n response.\n\n   If the SaveResponse property is true, the response will be saved in a file\n and the GotFile event will be triggered. The ResponseFileName property\n can be used to specify the name of the file.\n\n   If the SaveResponse property is false, the GotText event will be\n triggered.", "deprecated": "false", "params": []},
    { "name": "HtmlTextDecode", "description": "Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &#39;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.", "deprecated": "false", "params": [{ "name": "htmlText", "type": "text"}], "returnType": "text"},
    { "name": "JsonObjectEncode", "description": "Returns the value of a built-in type (i.e., boolean, number, text, list, dictionary)\n in its JavaScript Object Notation representation. If the value cannot be\n represented as JSON, the Screen's ErrorOccurred event will be run, if any,\n and the Web component will return the empty string.", "deprecated": "false", "params": [{ "name": "jsonObject", "type": "any"}], "returnType": "text"},
    { "name": "JsonTextDecode", "description": "Decodes the given JSON encoded value to produce a corresponding AppInventor value.\n A JSON list `[x, y, z]` decodes to a list `(x y z)`,  A JSON object with key A and value B,\n (denoted as `", "deprecated": "false", "params": [{ "name": "jsonText", "type": "text"}], "returnType": "any"},
    { "name": "JsonTextDecodeWithDictionaries", "description": "Decodes the given JSON encoded value to produce a corresponding App Inventor value.\n A JSON list [x, y, z] decodes to a list (x y z). A JSON Object with name A and value B,\n denoted as \\", "deprecated": "false", "params": [{ "name": "jsonText", "type": "text"}], "returnType": "any"},
    { "name": "PostFile", "description": "Performs an HTTP POST request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "path", "type": "text"}]},
    { "name": "PostText", "description": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "PostTextWithEncoding", "description": "Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "encoding", "type": "text"}]},
    { "name": "PutFile", "description": "Performs an HTTP PUT request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "path", "type": "text"}]},
    { "name": "PutText", "description": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}]},
    { "name": "PutTextWithEncoding", "description": "Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.", "deprecated": "false", "params": [{ "name": "text", "type": "text"},{ "name": "encoding", "type": "text"}]},
    { "name": "UriDecode", "description": "Decodes the encoded text value so that the values aren't URL encoded anymore.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "text"},
    { "name": "UriEncode", "description": "Encodes the given text value so that it can be used in a URL.", "deprecated": "false", "params": [{ "name": "text", "type": "text"}], "returnType": "text"},
    { "name": "XMLTextDecode", "description": "Decodes the given XML string to produce a dictionary structure. See the App Inventor documentation on \"Other topics, notes, and details\" for information.", "deprecated": "false", "params": [{ "name": "XmlText", "type": "text"}], "returnType": "any"},
    { "name": "XMLTextDecodeAsDictionary", "description": "Decodes the given XML into a set of nested dictionaries that capture the structure and data contained in the XML. See the help for more details.", "deprecated": "false", "params": [{ "name": "XmlText", "type": "text"}], "returnType": "any"}]}
,
{ "type": "com.google.appinventor.components.runtime.WebViewer",
  "name": "WebViewer",
  "external": "false",
  "version": "10",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "USERINTERFACE",
  "helpString": "Component for viewing Web pages.  The Home URL can be specified in the Designer or in the Blocks Editor.  The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser.  For example, pressing the phone's hardware Back key will exit the app, rather than move back in the browser history.<p \/>You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString.  In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods <\/em getWebViewString()<\/em> and <em>setWebViewString(text)<\/em>.  <p \/>For example, if the WebViewer opens to a page that contains the Javascript command <br \/> <em>document.write(\"The answer is\" + window.AppInventor.getWebViewString());<\/em> <br \/>and if you set WebView.WebVewString to \"hello\", then the web page will show <\/br ><em>The answer is hello<\/em>.  <br \/>And if the Web page contains Javascript that executes the command <br \/><em>window.AppInventor.setWebViewString(\"hello from Javascript\")<\/em>, <br \/>then the value of the WebViewString property will be <br \/><em>hello from Javascript<\/em>.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "FollowLinks", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "HomeUrl", "editorType": "string", "defaultValue": "", "editorArgs": []},
{ "name": "IgnoreSslErrors", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "PromptforPermission", "editorType": "boolean", "defaultValue": "True", "editorArgs": []},
{ "name": "UsesLocation", "editorType": "boolean", "defaultValue": "False", "editorArgs": []},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True", "editorArgs": []}],
  "blockProperties": [{ "name": "Column", "description": "Column property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "CurrentPageTitle", "description": "Title of the page currently viewed", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "CurrentUrl", "description": "URL of the page currently viewed.   This could be different from the Home URL if new pages were visited by following links.", "type": "text", "rw": "read-only", "deprecated": "false"},
    { "name": "FollowLinks", "description": "Determines whether to follow links when they are tapped in the WebViewer.  If you follow links, you can use GoBack and GoForward to navigate the browser history.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Height", "description": "Specifies the `WebViewer`'s vertical height, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "HeightPercent", "description": "Specifies the vertical height of the WebViewer as a percentage of the height of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"},
    { "name": "HomeUrl", "description": "URL of the page the WebViewer should initially open to.  Setting this will load the page.", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "IgnoreSslErrors", "description": "Determine whether or not to ignore SSL errors. Set to true to ignore errors. Use this to accept self signed certificates from websites.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "PromptforPermission", "description": "If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "Row", "description": "Row property getter method.", "type": "number", "rw": "invisible", "deprecated": "false"},
    { "name": "UsesLocation", "description": "Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer.", "type": "boolean", "rw": "invisible", "deprecated": "false"},
    { "name": "Visible", "description": "Specifies whether the WebViewer should be visible on the screen. Value is true if the WebViewer is showing and false if hidden.", "type": "boolean", "rw": "read-write", "deprecated": "false"},
    { "name": "WebViewString", "description": "Gets the WebView's String, which is viewable through Javascript in the WebView as the window.AppInventor object", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "Width", "description": "Specifies the horizontal width of the `WebViewer`, measured in pixels.", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "WidthPercent", "description": "Specifies the horizontal width of the WebViewer as a percentage of the width of the Screen.", "type": "number", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "BeforePageLoad", "description": "When a page is about to load this event is run.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}
,
    { "name": "ErrorOccurred", "description": "When an error occurs this event is run.", "deprecated": "false", "params": [{ "name": "errorCode", "type": "number"},{ "name": "description", "type": "text"},{ "name": "failingUrl", "type": "text"}]}
,
    { "name": "PageLoaded", "description": "When a page is finished loading this event is run.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]}
,
    { "name": "WebViewStringChange", "description": "When the JavaScript calls AppInventor.setWebViewString this event is run.", "deprecated": "false", "params": [{ "name": "value", "type": "text"}]}
],
  "methods": [{ "name": "CanGoBack", "description": "Returns true if the WebViewer can go back in the history list.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "CanGoForward", "description": "Returns true if the WebViewer can go forward in the history list.", "deprecated": "false", "params": [], "returnType": "boolean"},
    { "name": "ClearCaches", "description": "Clear WebView caches.", "deprecated": "false", "params": []},
    { "name": "ClearCookies", "description": "Clear WebView cookies.", "deprecated": "false", "params": []},
    { "name": "ClearLocations", "description": "Clear stored location permissions.", "deprecated": "false", "params": []},
    { "name": "GoBack", "description": "Go back to the previous page in the history list.  Does nothing if there is no previous page.", "deprecated": "false", "params": []},
    { "name": "GoForward", "description": "Go forward to the next page in the history list.   Does nothing if there is no next page.", "deprecated": "false", "params": []},
    { "name": "GoHome", "description": "Loads the home URL page.  This happens automatically when the home URL is changed.", "deprecated": "false", "params": []},
    { "name": "GoToUrl", "description": "Load the page at the given URL.", "deprecated": "false", "params": [{ "name": "url", "type": "text"}]},
    { "name": "Reload", "description": "Reload the current page.", "deprecated": "false", "params": []},
    { "name": "RunJavaScript", "description": "Run JavaScript in the current page.", "deprecated": "false", "params": [{ "name": "js", "type": "text"}]},
    { "name": "StopLoading", "description": "Stop loading a page.", "deprecated": "false", "params": []}]}
,
{ "type": "com.google.appinventor.components.runtime.YandexTranslate",
  "name": "YandexTranslate",
  "external": "false",
  "version": "2",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "MEDIA",
  "helpString": "Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So\"en-es\" will translate from English to Spanish while \"es-ru\" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just \"es\" will attempt to detect the source language and translate it to Spanish.<p \/> This component is powered by the Yandex translation service.  See http:\/\/api.yandex.com\/translate\/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p \/>Note: Translation happens asynchronously in the background. When the translation is complete, the \"GotTranslation\" event is triggered.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/yandex.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "ApiKey", "editorType": "string", "defaultValue": "DEFAULT", "editorArgs": []}],
  "blockProperties": [{ "name": "ApiKey", "description": "Set the API Key to use with Yandex. You do not need to set this if you are using the MIT system because MIT has its own key builtin. If set, the key provided here will be used instead", "type": "text", "rw": "write-only", "deprecated": "false"}],
  "events": [{ "name": "GotTranslation", "description": "Event triggered when the Yandex.Translate service returns the translated text. This event also provides a response code for error handling. If the responseCode is not 200, then something went wrong with the call, and the translation will not be available.", "deprecated": "false", "params": [{ "name": "responseCode", "type": "text"},{ "name": "translation", "type": "text"}]}
],
  "methods": [{ "name": "RequestTranslation", "description": "By providing a target language to translate to (for instance, 'es' for Spanish, 'en' for English, or 'ru' for Russian), and a word or sentence to translate, this method will request a translation to the Yandex.Translate service.\nOnce the text is translated by the external service, the event GotTranslation will be executed.\nNote: Yandex.Translate will attempt to detect the source language. You can also specify prepending it to the language translation. I.e., es-ru will specify Spanish to Russian translation.", "deprecated": "false", "params": [{ "name": "languageToTranslateTo", "type": "text"},{ "name": "textToTranslate", "type": "text"}]}]}
,
{ "type": "edu.mit.appinventor.ai.teachablemachine.TeachableMachine",
  "name": "TeachableMachine",
  "external": "true",
  "version": "1",
  "dateBuilt": "2022-08-26T00:03:00+0530",
  "categoryString": "EXTENSION",
  "helpString": "Component that classifies images using a user trained model from the image classification explorer. You must provide a WebViewer component in the Teachable Machine Extension component's WebViewer property in order for classification to work.",
  "helpUrl": "",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "aiwebres/tm.png",
  "licenseName": "",
  "androidMinSdk": 7,
  "properties": [{ "name": "InputMode", "editorType": "choices", "defaultValue": "", "editorArgs": ["Video", "Image"]},
{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "0", "editorArgs": []},
{ "name": "WebViewer", "editorType": "component:com.google.appinventor.runtime.components.WebViewer", "defaultValue": "", "editorArgs": []}],
  "blockProperties": [{ "name": "InputMode", "description": "Gets or sets the input mode for classification. Valid values are \"Video\" (the default) and \"Image\".", "type": "text", "rw": "read-write", "deprecated": "false"},
    { "name": "MinimumInterval", "description": "Property for MinimumInterval", "type": "number", "rw": "read-write", "deprecated": "false"},
    { "name": "ModelLabels", "description": "Gets all of the labels from this model. Only valid after ClassifierReady is signaled.", "type": "list", "rw": "read-only", "deprecated": "false"},
    { "name": "Running", "description": "Property for Running", "type": "boolean", "rw": "read-only", "deprecated": "false"},
    { "name": "WebViewer", "description": "Property for WebViewer", "type": "component", "rw": "invisible", "deprecated": "false"}],
  "events": [{ "name": "ClassifierReady", "description": "Event indicating that the classifier is ready.", "deprecated": "false", "params": []}
,
    { "name": "Error", "description": "Event indicating that an error has occurred.", "deprecated": "false", "params": [{ "name": "errorCode", "type": "number"}]}
,
    { "name": "GotClassification", "description": "Event indicating that classification has finished successfully. Result is of the form [[class1, confidence1], [class2, confidence2], ..., [class10, confidence10]].", "deprecated": "false", "params": [{ "name": "result", "type": "dictionary"}]}
],
  "methods": [{ "name": "ClassifyImageData", "description": "Performs classification on the image at the given path and triggers the GotClassification event when classification is finished successfully.", "deprecated": "false", "params": [{ "name": "image", "type": "text"}]},
    { "name": "ClassifyVideoData", "description": "Performs classification on current video frame and triggers the GotClassification event when classification is finished successfully.", "deprecated": "false", "params": []},
    { "name": "StartContinuousClassification", "description": "Method for StartContinuousClassification", "deprecated": "false", "params": []},
    { "name": "StopContinuousClassification", "description": "Method for StopContinuousClassification", "deprecated": "false", "params": []},
    { "name": "ToggleCameraFacingMode", "description": "Toggles between user-facing and environment-facing camera.", "deprecated": "false", "params": []}],
  "assets": ["teachable_machine.js","teachable_machine.html","tfjs-0.13.2.js"]}
]