<?xml version="1.0"?>

<!-- ======================================================================
     Copyright 2011 Google Inc.  All Rights Reserved.
     Copyright 2012-2017 Massachusetts Institute of Technology, All rights reserved.

     App Inventor component libraries
     ====================================================================== -->

<project name="components" default="all">
  <description>
    App Inventor component libraries
  </description>

  <target name="all"
          depends="CommonConstants,AndroidRuntime,
                   JsonComponentDescription,XmlComponentDescription,
                   ComponentList,ComponentTranslation,Barcode">
  </target>

  <target name="tests"
          depends="CommonTests,AndroidRuntimeTests">
  </target>

  <!-- =====================================================================
       Import common directory, task, and target definitions.
       ===================================================================== -->
  <import file="../build-common.xml" />

  <!-- =====================================================================
       Define base package path for internal components.
       ===================================================================== -->
  <property name="components.pkg" value="com/google/appinventor/components" />
  <property name="zxing.pkg" value="com/google/zxing" />

  <!-- =====================================================================
       Define external components properties.
       ===================================================================== -->
  <property name="ExternalComponentGenerator-class.dir" location="${class.dir}/ExternalComponentGenerator" />
  <property name="ExternalComponent.dir" location="${local.build.dir}/externalComponents" />
  <property name="ExternalComponent-class.dir" location="${local.build.dir}/externalComponents-class" />
  <property name="Extensions.dir" location="${local.build.dir}/extensions" />
  <!-- Can be used by extension authors to use the old-style AIX package layout -->
  <property name="extensions.packagefqcn" value="false" />

  <!-- =====================================================================
       CommonConstants: library of constants used across App Inventor
       ===================================================================== -->
  <target name="CommonConstants"
          description="Generate library of constants used across App Inventor"
          depends="init">
    <property name="CommonConstants-class.dir" location="${class.dir}/CommonConstants" />
    <mkdir dir="${CommonConstants-class.dir}" />

    <ai.javac5 destdir="${CommonConstants-class.dir}">
      <include name="${components.pkg}/common/*.java" />
      <exclude name="${components.pkg}/common/HtmlEntities.java" />
    </ai.javac5>

    <jar destfile="${public.build.dir}/CommonConstants.jar">
      <fileset dir="${CommonConstants-class.dir}"/>
    </jar>

    <jar destfile="${public.build.dir}/CommonConstants-gwt.jar">
      <fileset dir="${CommonConstants-class.dir}"/>
      <!-- Source files needed for GWT compilation: -->
      <fileset dir="${src.dir}">
        <include name="${components.pkg}/common/*.java" />
        <exclude name="${components.pkg}/common/HtmlEntities.java" />
        <include name="${components.pkg}/CommonConstants.gwt.xml" />
      </fileset>
    </jar>
  </target>

  <!-- =====================================================================
       HtmlEntities: library containing utility class for working with
           HTML entities.
       ===================================================================== -->
  <target name="HtmlEntities"
          description="Generate library containing utility class for working with HTML entities"
          depends="init">
    <property name="HtmlEntities-class.dir" location="${class.dir}/HtmlEntities" />
    <mkdir dir="${HtmlEntities-class.dir}" />

    <ai.javac5 destdir="${HtmlEntities-class.dir}">
      <include name="${components.pkg}/common/HtmlEntities.java" />
    </ai.javac5>

    <jar destfile="${local.build.dir}/HtmlEntities.jar">
      <fileset dir="${HtmlEntities-class.dir}"/>
    </jar>
  </target>

  <!-- =====================================================================
       CommonTests: build and run the common tests and generate the output results
       ===================================================================== -->

  <path id="libsForCommonTests.path">
    <pathelement location="${local.build.dir}/HtmlEntities.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
  </path>

  <path id="CommonTests.path">
    <path refid="libsForCommonTests.path"/>
    <pathelement location="${local.build.dir}/CommonTests.jar" />
  </path>

  <target name="CommonTests"
          depends="HtmlEntities"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="CommonTests"
                aij-dir="${components.pkg}/common" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       AndroidRuntime: library providing runtime support for components
       ===================================================================== -->
  <property name="AndroidRuntime-class.dir" location="${class.dir}/AndroidRuntime" />
  <target name="AndroidRuntime"
          description="Generate runtime library implementing components"
          depends="CommonConstants,HtmlEntities,common_CommonVersion">
    <mkdir dir="${AndroidRuntime-class.dir}" />

    <ai.javac5 destdir="${AndroidRuntime-class.dir}">
      <include name="**/*.java" /> <!-- include all java files -->
      <exclude name="${zxing.pkg}/**/*.java" /> <!-- exclude zxing package -->
      <exclude name="${components.pkg}/scripts/**/*.java" /> <!-- exclude components/script package -->
      <exclude name="${components.pkg}/common/**/*.java" /> <!-- exclude components/common package -->
      <!--<include name="${components.pkg}/annotations/*.java" /> -->
      <!--<include name="${components.pkg}/runtime/**/*.java" /> -->
      <classpath>
        <pathelement location="${local.build.dir}/HtmlEntities.jar" />
        <pathelement location="${public.build.dir}/CommonConstants.jar" />
        <pathelement location="${build.dir}/common/CommonVersion.jar" />
        <pathelement location="${lib.dir}/android/5.1.1/android.jar" />
        <pathelement location="${lib.dir}/android/support/appcompat-v7-22.2.1.jar" />
        <pathelement location="${lib.dir}/android/support/internal_impl-22.2.1.jar" />
        <pathelement location="${lib.dir}/android/support/support-annotations-22.2.1.jar" />
        <pathelement location="${lib.dir}/android/support/support-v4-22.2.1.jar" />
        <pathelement location="${lib.dir}/kawa/kawa-1.11-modified.jar" />
        <pathelement location="${lib.dir}/acra/acra-4.4.0.jar" />
        <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
        <!-- Conditionally included libraries -->
        <pathelement location="${lib.dir}/twitter/twitter4j-core-3.0.5.jar" />
        <pathelement location="${lib.dir}/twitter/twitter4j-media-support-3.0.5.jar" />
        <pathelement location="${lib.dir}/apache-http/httpcore-4.3.2.jar" />
        <pathelement location="${lib.dir}/apache-http/httpmime-4.3.4.jar" />
        <pathelement location="${lib.dir}/fusiontables/fusiontables.jar" />
        <pathelement location="${lib.dir}/firebase/firebase-client-android-2.5.0.jar" />
        <pathelement location="${lib.dir}/oauth/google-api-client-1.10.3-beta.jar" />
        <pathelement location="${lib.dir}/oauth/google-api-client-android2-1.10.3-beta.jar" />
        <pathelement location="${lib.dir}/oauth/google-http-client-1.10.3-beta.jar" />
        <pathelement location="${lib.dir}/oauth/google-http-client-android2-1.10.3-beta.jar" />
        <pathelement location="${lib.dir}/oauth/google-http-client-android3-1.10.3-beta.jar" />
        <pathelement location="${lib.dir}/oauth/google-oauth-client-1.10.1-beta.jar" />
        <pathelement location="${lib.dir}/jedis/jedis-3.0.0-SNAPSHOT-jar-with-dependencies.jar" />
        <pathelement location="${lib.dir}/commons-pool/commons-pool2-2.0.jar" />
        <pathelement location="${lib.dir}/gson/gson-2.1.jar" />
        <pathelement location="${lib.dir}/json/json.jar" />
        <pathelement location="${lib.dir}/osmdroid/osmdroid-5.6.6.jar" />
        <pathelement location="${lib.dir}/jts/jts-core-1.15.0-20170823.040415-301.jar" />
        <pathelement location="${lib.dir}/androidsvg/androidsvg-d4ec6d8.jar" />
      </classpath>
    </ai.javac5>

    <jar basedir="${AndroidRuntime-class.dir}"
         destfile="${public.build.dir}/AndroidRuntime.jar">
      <zipfileset src="${local.build.dir}/HtmlEntities.jar"/>
      <zipfileset src="${public.build.dir}/CommonConstants.jar"/>
      <zipfileset src="${build.dir}/common/CommonVersion.jar" />
    </jar>
  </target>

  <!-- =====================================================================
       AndroidRuntimeTests: build and run the AndroidRuntime tests and generate the output results
       ===================================================================== -->

  <path id="libsForAndroidRuntimeTests.path">
    <pathelement location="${public.build.dir}/AndroidRuntime.jar" />
    <pathelement location="${public.build.dir}/CommonConstants.jar" />
    <pathelement location="${lib.dir}/json/json.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
    <pathelement location="${lib.dir}/junit4/tl4j-junit4-1.1.3.jar" />
    <pathelement location="${lib.dir}/kawa/kawa-1.11-modified.jar" />
    <pathelement location="${lib.dir}/acra/acra-4.4.0.jar" />
    <pathelement location="${lib.dir}/guava/guava-20.0.jar" />
    <pathelement location="${lib.dir}/bouncycastle/bcprov-jdk15on-149.jar" />
    <pathelement location="${lib.dir}/osmdroid/osmdroid-5.6.6.jar" />
    <pathelement location="${lib.dir}/jts/jts-core-1.15.0-20170823.040415-301.jar" />
    <pathelement location="${lib.dir}/androidsvg/androidsvg-d4ec6d8.jar" />
    <pathelement location="${lib.dir}/powermock/cglib-nodep-2.2.jar" />
    <pathelement location="${lib.dir}/powermock/easymock-3.0.jar" />
    <pathelement location="${lib.dir}/powermock/javassist-3.18.0-GA.jar" />
    <pathelement location="${lib.dir}/powermock/objenesis-1.2.jar" />
    <pathelement location="${lib.dir}/powermock/powermock-easymock-1.4.10-full.jar" />
    <pathelement location="${lib.dir}/android/support/appcompat-v7-22.2.1.jar" />
    <pathelement location="${lib.dir}/android/support/internal_impl-22.2.1.jar" />
    <pathelement location="${lib.dir}/android/support/support-annotations-22.2.1.jar" />
    <pathelement location="${lib.dir}/android/support/support-v4-22.2.1.jar" />
    <pathelement location="${lib.dir}/android/support/testing-support-R-classes.jar" />
    <!-- android.jar must go last on the classpath list
         so that its junit (or other) stubs don't override the real ones -->
    <pathelement location="${lib.dir}/robolectric/robolectric-3.3.2-all-deps.jar" />
    <pathelement location="${lib.dir}/android/5.1.1/android.jar" />
  </path>

  <path id="AndroidRuntimeTests.path">
    <path refid="libsForAndroidRuntimeTests.path"/>
    <pathelement location="${local.build.dir}/AndroidRuntimeTests.jar" />
  </path>

  <target name="AndroidRuntimeTests"
          depends="AndroidRuntime"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="AndroidRuntimeTests"
                aij-dir="${components.pkg}/runtime" >
      <!-- Include extra classes from Robolectric that need to be compiled with the sources -->
      <aij-supplemental-includes>
        <include name="org/robolectric/**/*.java" />
      </aij-supplemental-includes>
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       Define task ai.apt for running the annotation processor.

       This is based on the "javac" task instead of the "apt" task because
       the apt task does not offer any useful additional tags. We don't use
       the "ai.javac" task here because it does dependancy checking that is
       not appropriate for annotation processing.
       ===================================================================== -->
  <macrodef name="ai.apt">
    <attribute name="apt-classdir" />
    <attribute name="apt-processor" />
    <attribute name="apt-target" />
    <sequential>
      <mkdir dir="@{apt-classdir}" />
      <!-- Look at all source files to determine whether the target is up-to-date. This will catch
      changes to the Java files in the annotations, common, runtime, and scripts packages and .txt
      files in scripts/templates. -->
      <uptodate property="target.uptodate" targetfile="@{apt-target}">
        <srcfiles dir="${src.dir}" />
      </uptodate>
      <!-- We need to delete all the classes before running javac below. Otherwise, javac will only
      process the Java files whose classes are not up-to-date and we'll end up with only a subset
      of the results. For example, if only Label.java was modified, our annotation processor code
      will only be executed for Label.java and we'll only have results for Label.java. -->
      <delete>
        <fileset dir="@{apt-classdir}">
          <include name="**/*" unless="target.uptodate"/>
        </fileset>
      </delete>
      <javac destdir="@{apt-classdir}"
             encoding="utf-8"
             sourcepath=""
             srcdir="${src.dir}"
             includeantruntime="false">
        <include name="**/*.java" /> <!-- include all java files -->
        <exclude name="${zxing.pkg}/**/*.java" /> <!-- exclude zxing package -->
        <exclude name="${components.pkg}/scripts/**/*.java" /> <!-- exclude components/script package -->
        <exclude name="${components.pkg}/common/**/*.java" /> <!-- exclude components/common package -->
        <exclude name="${components.pkg}/annotations/**/*.java" /> <!-- exclude components/annotations package -->
        <classpath>
          <pathelement location="${public.build.dir}/AndroidRuntime.jar" />
          <pathelement location="${local.build.dir}/HtmlEntities.jar" />
          <pathelement location="${public.build.dir}/CommonConstants.jar" />
          <pathelement location="${lib.dir}/android/5.1.1/android.jar" />
          <pathelement location="${lib.dir}/android/support/appcompat-v7-22.2.1.jar" />
          <pathelement location="${lib.dir}/android/support/support-annotations-22.2.1.jar" />
          <pathelement location="${lib.dir}/android/support/support-v4-22.2.1.jar" />
          <pathelement location="${lib.dir}/android/support/internal_impl-22.2.1.jar" />
          <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
          <pathelement location="${lib.dir}/gson/gson-2.1.jar" />
          <pathelement location="${lib.dir}/json/json.jar" />
          <pathelement location="${lib.dir}/kawa/kawa-1.11-modified.jar" />
          <pathelement location="${lib.dir}/acra/acra-4.4.0.jar" />
          <pathelement location="${lib.dir}/twitter/twitter4j-core-3.0.5.jar" />
          <pathelement location="${lib.dir}/twitter/twitter4j-media-support-3.0.5.jar" />
          <pathelement location="${lib.dir}/apache-http/httpcore-4.3.2.jar" />
          <pathelement location="${lib.dir}/apache-http/httpmime-4.3.4.jar" />
          <pathelement location="${lib.dir}/fusiontables/fusiontables.jar" />
          <pathelement location="${lib.dir}/firebase/firebase-client-android-2.5.0.jar" />
          <pathelement location="${lib.dir}/oauth/google-api-client-1.10.3-beta.jar" />
          <pathelement location="${lib.dir}/oauth/google-api-client-android2-1.10.3-beta.jar" />
          <pathelement location="${lib.dir}/oauth/google-http-client-1.10.3-beta.jar" />
          <pathelement location="${lib.dir}/oauth/google-http-client-android2-1.10.3-beta.jar" />
          <pathelement location="${lib.dir}/oauth/google-http-client-android3-1.10.3-beta.jar" />
          <pathelement location="${lib.dir}/oauth/google-oauth-client-1.10.1-beta.jar" />
          <pathelement location="${lib.dir}/jedis/jedis-3.0.0-SNAPSHOT-jar-with-dependencies.jar" />
          <pathelement location="${lib.dir}/commons-pool/commons-pool2-2.0.jar" />
          <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
          <pathelement location="${lib.dir}/osmdroid/osmdroid-5.6.6.jar" />
          <pathelement location="${lib.dir}/jts/jts-core-1.15.0-20170823.040415-301.jar" />
          <pathelement location="${lib.dir}/androidsvg/androidsvg-d4ec6d8.jar" />
        </classpath>
        <compilerarg line="-processorpath ${local.build.dir}/AnnotationProcessors.jar"/>
        <compilerarg line="-processor @{apt-processor}" />
      </javac>
    </sequential>
  </macrodef>

  <!-- =====================================================================
       ComponentProcessingLib: common library for annotation processors that
                               run over the components.
       ===================================================================== -->
  <target name="ComponentProcessingLib"
          description="Generate library for component annotation processors"
          depends="CommonConstants">
    <property name="ComponentProcessingLib-class.dir"
              location="${class.dir}/ComponentProcessingLib" />
    <mkdir dir="${ComponentProcessingLib-class.dir}" />

    <ai.javac destdir="${ComponentProcessingLib-class.dir}"
              source="1.7" target="1.7">
      <include name="${components.pkg}/scripts/ComponentProcessor.java" />
      <include name="${components.pkg}/annotations/*.java" />
      <include name="${components.pkg}/annotations/androidmanifest/*.java" />
      <classpath>
        <pathelement location="${public.build.dir}/CommonConstants.jar" />
        <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
      </classpath>
    </ai.javac>

    <jar basedir="${ComponentProcessingLib-class.dir}"
         destfile="${local.build.dir}/ComponentProcessingLib.jar" />
  </target>

  <!-- =====================================================================
       AnnotationProcessors: plugins for processing component annotations
       Note that AnnotationProcessors.jar, produced here, will contain all
       of its dependencies including guava. This makes it much easier to
       specify the -processorpath option in ai.apt.
       ===================================================================== -->
  <target name="AnnotationProcessors"
          description="Create plugins for annotation processing"
          depends="ComponentProcessingLib,CommonConstants,HtmlEntities,common_CommonUtils">

    <property name="AnnotationProcessors-class.dir"
              location="${class.dir}/AnnotationProcessors" />
    <mkdir dir="${AnnotationProcessors-class.dir}" />

    <ai.javac destdir="${AnnotationProcessors-class.dir}"
              source="1.7" target="1.7">
      <include name="${components.pkg}/scripts/*.java" />
      <exclude name="${components.pkg}/scripts/ExternalComponentGenerator.java" />
      <classpath>
        <pathelement location="${local.build.dir}/ComponentProcessingLib.jar"/>
        <pathelement location="${local.build.dir}/HtmlEntities.jar" />
        <pathelement location="${public.build.dir}/CommonConstants.jar" />
        <pathelement location="${build.dir}/common/CommonUtils.jar" />
        <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
      </classpath>
    </ai.javac>

    <copy todir="${AnnotationProcessors-class.dir}">
      <fileset dir="${src.dir}">
        <include name="${components.pkg}/scripts/templates/*" />
      </fileset>
    </copy>

    <jar basedir="${AnnotationProcessors-class.dir}"
         destfile="${local.build.dir}/AnnotationProcessors.jar" >
      <zipfileset src="${local.build.dir}/ComponentProcessingLib.jar"/>
      <zipfileset src="${local.build.dir}/HtmlEntities.jar"/>
      <zipfileset src="${public.build.dir}/CommonConstants.jar"/>
      <zipfileset src="${build.dir}/common/CommonUtils.jar" />
      <zipfileset src="${lib.dir}/guava/guava-14.0.1.jar" />
    </jar>

  </target>

  <!-- =====================================================================
       JsonComponentDescription: create simple_components.json.
       ===================================================================== -->
  <target name="JsonComponentDescription"
          description="Make simple_components.json."
          depends="AnnotationProcessors,AndroidRuntime,HtmlEntities,CommonConstants,common_CommonUtils">
    <property name="JsonComponentDescription-class.dir"
              location="${class.dir}/JsonComponentDescription" />
    <ai.apt apt-classdir="${JsonComponentDescription-class.dir}"
            apt-processor="com.google.appinventor.components.scripts.ComponentDescriptorGenerator"
            apt-target="${JsonComponentDescription-class.dir}/simple_components.json"/>

    <copy file="${JsonComponentDescription-class.dir}/simple_components.json"
          todir="${public.build.dir}"/>
  </target>

    <!-- =====================================================================
         XmlComponentDescription: create lang_def.xml for Blocks Editor.
         ===================================================================== -->
    <target name="XmlComponentDescription"
            description="Make ya_lang_def.xml file for Blocks Editor."
            depends="AnnotationProcessors,AndroidRuntime,HtmlEntities,CommonConstants">
      <property name="XmlComponentDescription-class.dir"
                location="${class.dir}/XmlComponentDescription" />
      <ai.apt apt-classdir="${XmlComponentDescription-class.dir}"
              apt-processor="com.google.appinventor.components.scripts.LangDefXmlGenerator"
              apt-target="${XmlComponentDescription-class.dir}/ya_lang_def.xml"/>

      <copy file="${XmlComponentDescription-class.dir}/ya_lang_def.xml"
            todir="${public.build.dir}"/>
    </target>

    <!-- =====================================================================
         ComponentList: create simple_components.txt and
                        simple_components_build_info.json
         ===================================================================== -->
    <target name="ComponentList"
            description="Make simple_components.txt and simple_components_build_info.json."
            depends="AnnotationProcessors,AndroidRuntime,HtmlEntities,CommonConstants,Barcode">
      <property name="ComponentList-class.dir" location="${class.dir}/ComponentList" />
      <mkdir dir="${ComponentList-class.dir}" />

      <ai.apt apt-classdir="${ComponentList-class.dir}"
              apt-processor="com.google.appinventor.components.scripts.ComponentListGenerator"
              apt-target="${ComponentList-class.dir}/simple_components.txt"/>

      <copy file="${ComponentList-class.dir}/simple_components.txt"
            todir="${public.build.dir}"/>
      <copy file="${ComponentList-class.dir}/simple_components_build_info.json"
            todir="${public.build.dir}"/>
    </target>

    <!-- =====================================================================
         ComponentTranslation: create ComponentsTranslation.java
         ===================================================================== -->
    <target name="ComponentTranslation"
            description="Build ComponentsTranslation.java at build time
                         from annotations"
            depends="AnnotationProcessors,AndroidRuntime,HtmlEntities,CommonConstants">
      <property name="ComponentTranslation-class.dir" location="${class.dir}/ComponentTranslation" />
      <mkdir dir="${ComponentTranslation-class.dir}" />

      <ai.apt apt-classdir="${ComponentTranslation-class.dir}"
              apt-processor="com.google.appinventor.components.scripts.ComponentTranslationGenerator"
              apt-target="${ComponentTranslation-class.dir}/ComponentsTranslation.java"/>

      <copy file="${ComponentTranslation-class.dir}/ComponentsTranslation.java"
            todir="${public.build.dir}/ComponentTranslation/src/com/google/appinventor/client/" />

    </target>

  <!-- =====================================================================
       ComponentDocumentation: create component documentation from source
       ===================================================================== -->
  <target name="ComponentDocumentation"
          description="Make component documentation from source annotations."
          depends="AnnotationProcessors,AndroidRuntime,HtmlEntities,CommonConstants">
    <property name="ComponentDocumentation-class.dir"
              location="${class.dir}/ComponentDocumentation" />
    <mkdir dir="${ComponentDocumentation-class.dir}" />

    <ai.apt apt-classdir="${ComponentDocumentation-class.dir}"
            apt-processor="com.google.appinventor.components.scripts.DocumentationGenerator"
            apt-target="${ComponentDocumentation-class.dir}/component-doc.html"/>

    <copy file="${ComponentDocumentation-class.dir}/component-doc.html"
          todir="${public.build.dir}"/>
  </target>

  <!-- ======================================================================
     Internal Inclusion of ZXing 2.1

     In order to ensure that the blocks editor can run on Java 5, we compile
     with ai.javac5 and we do not depend on any jars that are not compiled
     with ai.javac5.
     ====================================================================== -->

  <!-- =====================================================================
       Define base package path.
       ===================================================================== -->
  <property name="barcode.pkg" value="com/google/zxing/client/android" />

  <!-- =====================================================================
       OpenBlocks: library containing openblocks code
       ===================================================================== -->

  <target name="Barcode"
          depends=""
          description="Generate ZXing embedded library">
    <property name="Barcode-class.dir" location="${class.dir}/Barcode" />
    <mkdir dir="${Barcode-class.dir}" />

    <ai.javac5 destdir="${Barcode-class.dir}">
      <include name="${barcode.pkg}/**/*.java" />
      <classpath>
        <pathelement location="${lib.dir}/QRGenerator/core.jar" />
        <pathelement location="${lib.dir}/android/5.1.1/android.jar" />
      </classpath>
    </ai.javac5>

    <jar basedir="${Barcode-class.dir}"
         destfile="${public.build.dir}/Barcode.jar" />

  </target>


  <!-- =====================================================================
       ExternalComponentGenerator: create required extension files
       ===================================================================== -->
  <target name="ExternalComponentGenerator"
          description="generate extension files"
          depends="AndroidRuntime, JsonComponentDescription, ComponentList">
    <property  name="buildserver.files.library.dir" location="../buildserver/build/classes/BuildServer/files"/>
    <mkdir dir="${ExternalComponentGenerator-class.dir}" />
    <mkdir dir="${ExternalComponent.dir}" />
    <mkdir dir="${ExternalComponent-class.dir}" />
    <ai.javac5 destdir="${ExternalComponentGenerator-class.dir}">
      <include name="${components.pkg}/scripts/ExternalComponentGenerator.java" />
      <classpath>
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </ai.javac5>
    <java classname="com.google.appinventor.components.scripts.ExternalComponentGenerator">
      <arg value="${public.build.dir}/simple_components.json" />
      <arg value="${public.build.dir}/simple_components_build_info.json" />
      <arg value="${ExternalComponent.dir}"/>
      <arg value="${AndroidRuntime-class.dir}" />
      <arg value="${buildserver.files.library.dir}"/>
      <arg value="${ExternalComponent-class.dir}"/>
      <arg value="${extensions.packagefqcn}"/>
      <classpath>
        <pathelement location="${ExternalComponentGenerator-class.dir}" />
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </java>
  </target>

  <!-- =====================================================================
        unjarAllExtensionLibraries : Unjarring extension's library in order for the extensions'dex to work properly.
        ===================================================================== -->
  <target name="unjarAllExtensionLibraries" depends="ExternalComponentGenerator">
    <foreach target="unjarExtensionLibraries" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent-class.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="unjarExtensionLibraries">
    <basename property="extensionClassFolder" file="${extension}" />
    <unzip dest="${ExternalComponent-class.dir}/${extensionClassFolder}">
      <fileset dir="${ExternalComponent-class.dir}/${extensionClassFolder}">
        <include name="**/*.jar" />
      </fileset>
    </unzip>
  </target>

  <!-- =====================================================================
       jarAllExtensions: create ${extension}.jar and AndroidRuntime.jar for each extension.
       ===================================================================== -->
  <target name="jarAllExtensions" depends="unjarAllExtensionLibraries" >
    <foreach target="jarExtension" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent-class.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="jarExtension">
    <basename property="extensionClassFolder" file="${extension}" />
    <jar destfile="${ExternalComponent-class.dir}/${extensionClassFolder}.jar"
         basedir="${ExternalComponent-class.dir}/${extensionClassFolder}"
         includes="**/*.class"
         excludes="*.jar" />
    <copy file="${ExternalComponent-class.dir}/${extensionClassFolder}.jar"
          tofile="${ExternalComponent.dir}/${extensionClassFolder}/files/AndroidRuntime.jar"/>
    <echo>Generated build file AndroidRuntime.jar [${extensionClassFolder}]</echo>
  </target>

  <!-- =====================================================================
       dexAllExtensions: create classes.dex for each extension.
       ===================================================================== -->
  <target name="dexAllExtensions" depends="jarAllExtensions">
    <foreach target="dexExtension" param="extension">
      <path>
        <fileset dir="${ExternalComponent-class.dir}" >
          <include name="*.jar"/>
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="dexExtension" depends="">
    <basename property="extensionType" file="${extension}" suffix=".jar"/>
    <java jar="${lib.dir}/android/tools/dx.jar"
          fork="true"
          failonerror="true">
      <arg value="--dex"/>
      <arg value="--no-strict"/>
      <arg value="--output"/>
      <arg value="${ExternalComponent.dir}/${extensionType}/classes.jar"/>
      <arg value="${ExternalComponent-class.dir}/${extensionType}.jar"/>
    </java>
    <echo>Dexing extension: ${extensionType}</echo>
  </target>



  <!-- =====================================================================
      extensions: create ${extension}.aix for each external component.
       ===================================================================== -->
  <target name="packExtension">
    <basename property="extensionType" file="${extension}" />
    <zip destfile="${Extensions.dir}/${extensionType}.aix"
         basedir="${ExternalComponent.dir}"
         includes="${extensionType}/"
    />

  </target>

  <target name="extensions" depends="ExternalComponentGenerator, jarAllExtensions, dexAllExtensions">
    <mkdir dir="${Extensions.dir}" />
    <foreach target="packExtension" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>

</project>
