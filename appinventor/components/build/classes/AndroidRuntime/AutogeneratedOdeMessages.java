// THIS FILE IS AUTOMATICALLY GENERATED DURING COMPILATION.
// DO NOT EDIT THIS FILE. ANY CHANGES WILL BE OVERWRITTEN.

package com.google.appinventor.client;

import com.google.gwt.i18n.client.Messages;

public interface AutogeneratedOdeMessages extends Messages {

  /* Components */
  @DefaultMessage("AccelerometerSensor")
  @Description("")
  String accelerometerSensorComponentPallette();

  @DefaultMessage("Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s<sup>2</sup>). The components are: <ul><li> <strong>xAccel</strong>: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised).</li> <li> <strong>yAccel</strong>: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. </li> <li> <strong>zAccel</strong>: Equal to -9.8 (earth''s gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpendicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity. </li></ul>")
  @Description("")
  String AccelerometerSensorHelpStringComponentPallette();

  @DefaultMessage("ActivityStarter")
  @Description("")
  String activityStarterComponentPallette();

  @DefaultMessage("A component that can launch an activity using the <code>StartActivity</code> method. <p>Activities that can be launched include:<ul> <li> Starting another App Inventor for Android app. To do so, first find out the <em>class</em> of the other application by downloading the source code and using a file explorer or unzip utility to find a file named \"youngandroidproject/project.properties\". The first line of the file will start with \"main=\" and be followed by the class name; for example, <code>main=com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>. (The first components indicate that it was created by Ben.Bitdiddle")
  @Description("")
  String ActivityStarterHelpStringComponentPallette();

  @DefaultMessage("Ball")
  @Description("")
  String ballComponentPallette();

  @DefaultMessage("<p>A round ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite</code>s and other <code>Ball</code>s) and the edge of the Canvas, and move according to its property values.</p><p>For example, to have a <code>Ball</code> move 4 pixels toward the top of a <code>Canvas</code> every 500 milliseconds (half second), you would set the <code>Speed</code> property to 4 [pixels], the <code>Interval</code> property to 500 [milliseconds], the <code>Heading</code> property to 90 [degrees], and the <code>Enabled</code> property to <code>True</code>.</p><p>The difference between a <code>Ball</code> and an <code>ImageSprite</code> is that the latter can get its appearance from an image file, while a <code>Ball</code>''s appearance can be changed only by varying its <code>PaintColor</code> and <code>Radius</code> properties.</p>")
  @Description("")
  String BallHelpStringComponentPallette();

  @DefaultMessage("BarcodeScanner")
  @Description("")
  String barcodeScannerComponentPallette();

  @DefaultMessage("Component for using the Barcode Scanner to read a barcode")
  @Description("")
  String BarcodeScannerHelpStringComponentPallette();

  @DefaultMessage("Barometer")
  @Description("")
  String barometerComponentPallette();

  @DefaultMessage("A sensor component that can measure the ambient air pressure.")
  @Description("")
  String BarometerHelpStringComponentPallette();

  @DefaultMessage("BluetoothClient")
  @Description("")
  String bluetoothClientComponentPallette();

  @DefaultMessage("Bluetooth client component")
  @Description("")
  String BluetoothClientHelpStringComponentPallette();

  @DefaultMessage("BluetoothServer")
  @Description("")
  String bluetoothServerComponentPallette();

  @DefaultMessage("Bluetooth server component")
  @Description("")
  String BluetoothServerHelpStringComponentPallette();

  @DefaultMessage("Button")
  @Description("")
  String buttonComponentPallette();

  @DefaultMessage("Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled</code>), can be changed in the Designer or in the Blocks Editor.")
  @Description("")
  String ButtonHelpStringComponentPallette();

  @DefaultMessage("Camcorder")
  @Description("")
  String camcorderComponentPallette();

  @DefaultMessage("A component to record a video using the device''s camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.")
  @Description("")
  String CamcorderHelpStringComponentPallette();

  @DefaultMessage("Camera")
  @Description("")
  String cameraComponentPallette();

  @DefaultMessage("A component to take a picture using the device''s camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.")
  @Description("")
  String CameraHelpStringComponentPallette();

  @DefaultMessage("Canvas")
  @Description("")
  String canvasComponentPallette();

  @DefaultMessage("<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.</p> <p>The <code>BackgroundColor</code>, <code>PaintColor</code>, <code>BackgroundImage</code>, <code>Width</code>, and <code>Height</code> of the Canvas can be set in either the Designer or in the Blocks Editor. The <code>Width</code> and <code>Height</code> are measured in pixels and must be positive.</p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas</li><li>Y is the number of pixels away from the top edge of the Canvas</li></ul>.</p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite</code> (<code>ImageSprite</code> or <code>Ball</code>) has been dragged. There are also methods for drawing points, lines, and circles.</p>")
  @Description("")
  String CanvasHelpStringComponentPallette();

  @DefaultMessage("CheckBox")
  @Description("")
  String checkBoxComponentPallette();

  @DefaultMessage("Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.")
  @Description("")
  String CheckBoxHelpStringComponentPallette();

  @DefaultMessage("Circle")
  @Description("")
  String circleComponentPallette();

  @DefaultMessage("Circle")
  @Description("")
  String CircleHelpStringComponentPallette();

  @DefaultMessage("Clock")
  @Description("")
  String clockComponentPallette();

  @DefaultMessage("<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.</p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM/DD/YYYY HH:mm:ss a, or MMM d, yyyyHH:mm. The empty string will provide the default format, which is \"MMM d, yyyy HH:mm:ss a\" for FormatDateTime \"MMM d, yyyy\" for FormatDate. To see all possible format, please see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" _target=\"_blank\">here</a>. </p>")
  @Description("")
  String ClockHelpStringComponentPallette();

  @DefaultMessage("CloudDB")
  @Description("")
  String cloudDBComponentPallette();

  @DefaultMessage("Non-visible component allowing you to store data on a Internet connected database server (using Redis software). This allows the users of your App to share data with each other. By default data will be stored in a server maintained by MIT, however you can setup and run your own server. Set the \"RedisServer\" property and \"RedisPort\" Property to access your own server.")
  @Description("")
  String CloudDBHelpStringComponentPallette();

  @DefaultMessage("ContactPicker")
  @Description("")
  String contactPickerComponentPallette();

  @DefaultMessage("A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact''s name </li> <li> <code>EmailAddress</code>: the contact''s primary email address </li> <li> <code>ContactUri</code>: the contact''s URI on the device </li><li> <code>EmailAddressList</code>: a list of the contact''s email addresses </li> <li> <code>PhoneNumber</code>: the contact''s primary phone number (on Later Android Verisons)</li> <li> <code>PhoneNumberList</code>: a list of the contact''s phone numbers (on Later Android Versions)</li> <li> <code>Picture</code>: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.")
  @Description("")
  String ContactPickerHelpStringComponentPallette();

  @DefaultMessage("DatePicker")
  @Description("")
  String datePickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.</p>")
  @Description("")
  String DatePickerHelpStringComponentPallette();

  @DefaultMessage("EmailPicker")
  @Description("")
  String emailPickerComponentPallette();

  @DefaultMessage("An EmailPicker is a kind of text box. If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry. If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text</code> property. If the <code>Text</code> property is initially empty, the contents of the <code>Hint</code> property will be faintly shown in the text box as a hint to the user.</p> <p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes like this are usually used with <code>Button</code> components, with the user clicking on the button when text entry is complete.")
  @Description("")
  String EmailPickerHelpStringComponentPallette();

  @DefaultMessage("Ev3ColorSensor")
  @Description("")
  String ev3ColorSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3ColorSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3Commands")
  @Description("")
  String ev3CommandsComponentPallette();

  @DefaultMessage("A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.")
  @Description("")
  String Ev3CommandsHelpStringComponentPallette();

  @DefaultMessage("Ev3GyroSensor")
  @Description("")
  String ev3GyroSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3GyroSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3Motors")
  @Description("")
  String ev3MotorsComponentPallette();

  @DefaultMessage("A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.")
  @Description("")
  String Ev3MotorsHelpStringComponentPallette();

  @DefaultMessage("Ev3Sound")
  @Description("")
  String ev3SoundComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3SoundHelpStringComponentPallette();

  @DefaultMessage("Ev3TouchSensor")
  @Description("")
  String ev3TouchSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3TouchSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3UI")
  @Description("")
  String ev3UIComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.")
  @Description("")
  String Ev3UIHelpStringComponentPallette();

  @DefaultMessage("Ev3UltrasonicSensor")
  @Description("")
  String ev3UltrasonicSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3UltrasonicSensorHelpStringComponentPallette();

  @DefaultMessage("FeatureCollection")
  @Description("")
  String featureCollectionComponentPallette();

  @DefaultMessage("A FeatureCollection contains one or more map features as a group. Any events fired on a feature in the collection will also trigger the corresponding event on the collection object. FeatureCollections can be loaded from external resources as a means of populating a Map with content.")
  @Description("")
  String FeatureCollectionHelpStringComponentPallette();

  @DefaultMessage("File")
  @Description("")
  String fileComponentPallette();

  @DefaultMessage("Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to /sdcard/AppInventor/data to facilitate debugging. If the file path starts with a slash (/), then the file is created relative to /sdcard. For example writing a file to /myFile.txt will write the file in /sdcard/myFile.txt.")
  @Description("")
  String FileHelpStringComponentPallette();

  @DefaultMessage("FirebaseDB")
  @Description("")
  String firebaseDBComponentPallette();

  @DefaultMessage("Non-visible component that communicates with Firebase to store and retrieve information.")
  @Description("")
  String FirebaseDBHelpStringComponentPallette();

  @DefaultMessage("Screen")
  @Description("")
  String screenComponentPallette();

  @DefaultMessage("Top-level component containing all other components in the program")
  @Description("")
  String ScreenHelpStringComponentPallette();

  @DefaultMessage("FusiontablesControl")
  @Description("")
  String fusiontablesControlComponentPallette();

  @DefaultMessage("<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.</p> <p><font color=red><b>NOTE:</b>&nbsp;Google shutdown the Fusion Tables service on December 3, 2019. This component no longer functions.</font></p> <p>This component uses the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API V2.0</a>. <p>Applications using Fusion Tables must authentication to Google''s servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special \"Service Account Email Address\" which you obtain from the <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the \"UseServiceAuthentication\" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.</p> <p>To get an API key, follow these instructions.</p> <ol><li>Go to your <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a> and login if necessary.</li><li>Select the <i>Services</i> item from the menu on the left.</li><li>Choose the <i>Fusiontables</i> service from the list provided and turn it on.</li><li>Go back to the main menu and select the <i>API Access</i> item. </li></ol><p>Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the <i>ApiKey</i> property in your Fusiontables app.</p><p>Once you have an API key, set the value of the <i>Query</i> property to a valid Fusiontables SQL query and call <i>SendQuery</i> to execute the query. App Inventor will send the query to the Fusion Tables server and the <i>GotResult</i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.</p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">the reference manual</a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</p>")
  @Description("")
  String FusiontablesControlHelpStringComponentPallette();

  @DefaultMessage("GameClient")
  @Description("")
  String gameClientComponentPallette();

  @DefaultMessage("Provides a way for applications to communicate with online game servers")
  @Description("")
  String GameClientHelpStringComponentPallette();

  @DefaultMessage("GyroscopeSensor")
  @Description("")
  String gyroscopeSensorComponentPallette();

  @DefaultMessage("<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have a gyroscope sensor.</p>")
  @Description("")
  String GyroscopeSensorHelpStringComponentPallette();

  @DefaultMessage("HorizontalArrangement")
  @Description("")
  String horizontalArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p>")
  @Description("")
  String HorizontalArrangementHelpStringComponentPallette();

  @DefaultMessage("HorizontalScrollArrangement")
  @Description("")
  String horizontalScrollArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p><p>This version is scrollable.")
  @Description("")
  String HorizontalScrollArrangementHelpStringComponentPallette();

  @DefaultMessage("Hygrometer")
  @Description("")
  String hygrometerComponentPallette();

  @DefaultMessage("A sensor component that can measure the relative ambient air humidity. Most Android devices do not have this sensor.")
  @Description("")
  String HygrometerHelpStringComponentPallette();

  @DefaultMessage("Image")
  @Description("")
  String imageComponentPallette();

  @DefaultMessage("Component for displaying images. The picture to display, and other aspects of the Image''s appearance, can be specified in the Designer or in the Blocks Editor.")
  @Description("")
  String ImageHelpStringComponentPallette();

  @DefaultMessage("ImagePicker")
  @Description("")
  String imagePickerComponentPallette();

  @DefaultMessage("A special-purpose button. When the user taps an image picker, the device''s image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected</code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest.")
  @Description("")
  String ImagePickerHelpStringComponentPallette();

  @DefaultMessage("ImageSprite")
  @Description("")
  String imageSpriteComponentPallette();

  @DefaultMessage("<p>A ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>Ball</code>s and other <code>ImageSprite</code>s) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its <code>Picture</code> property (unless its <code>Visible</code> property is <code>False</code>).</p> <p>To have an <code>ImageSprite</code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed</code> property to 10 [pixels], the <code>Interval</code> property to 1000 [milliseconds], the <code>Heading</code> property to 180 [degrees], and the <code>Enabled</code> property to <code>True</code>. A sprite whose <code>Rotates</code> property is <code>True</code> will rotate its image as the sprite''s <code>Heading</code> changes. Checking for collisions with a rotated sprite currently checks the sprite''s unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control.</p>")
  @Description("")
  String ImageSpriteHelpStringComponentPallette();

  @DefaultMessage("Label")
  @Description("")
  String labelComponentPallette();

  @DefaultMessage("A Label displays a piece of text, which is specified through the <code>Text</code> property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.")
  @Description("")
  String LabelHelpStringComponentPallette();

  @DefaultMessage("LightSensor")
  @Description("")
  String lightSensorComponentPallette();

  @DefaultMessage("A sensor component that can measure the light level.")
  @Description("")
  String LightSensorHelpStringComponentPallette();

  @DefaultMessage("LineString")
  @Description("")
  String lineStringComponentPallette();

  @DefaultMessage("LineString")
  @Description("")
  String LineStringHelpStringComponentPallette();

  @DefaultMessage("ListPicker")
  @Description("")
  String listPickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString</code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor.</p><p>Setting property ShowFilterBar to true, will make the list searchable. Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p>")
  @Description("")
  String ListPickerHelpStringComponentPallette();

  @DefaultMessage("ListView")
  @Description("")
  String listViewComponentPallette();

  @DefaultMessage("<p>This is a visible component that displays a list of text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. </p>")
  @Description("")
  String ListViewHelpStringComponentPallette();

  @DefaultMessage("LocationSensor")
  @Description("")
  String locationSensorComponentPallette();

  @DefaultMessage("Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address. This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress</code> method) and a longitude (with the <code>LongitudeFromAddress</code> method).</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).</p>Location information might not be immediately available when an app starts. You''ll have to wait a short time for a location provider to be found and used, or wait for the LocationChanged event")
  @Description("")
  String LocationSensorHelpStringComponentPallette();

  @DefaultMessage("MagneticFieldSensor")
  @Description("")
  String magneticFieldSensorComponentPallette();

  @DefaultMessage("<p>Non-visible component that measures the ambient geomagnetic field for all three physical axes (x, y, z) in Tesla https://en.wikipedia.org/wiki/Tesla_(unit).</p>")
  @Description("")
  String MagneticFieldSensorHelpStringComponentPallette();

  @DefaultMessage("Map")
  @Description("")
  String mapComponentPallette();

  @DefaultMessage("<p>A two-dimensional container that renders map tiles in the background and allows for multiple Marker elements to identify points on the map. Map tiles are supplied by OpenStreetMap contributors and the United States Geological Survey.</p><p>The Map component provides three utilities for manipulating its boundaries within App Inventor. First, a locking mechanism is provided to allow the map to be moved relative to other components on the Screen. Second, when unlocked, the user can pan the Map to any location. At this new location, the &quot;Set Initial Boundary&quot; button can be pressed to save the current Map coordinates to its properties. Lastly, if the Map is moved to a different location, for example to add Markers off-screen, then the &quot;Reset Map to Initial Bounds&quot; button can be used to re-center the Map at the starting location.</p>")
  @Description("")
  String MapHelpStringComponentPallette();

  @DefaultMessage("Marker")
  @Description("")
  String markerComponentPallette();

  @DefaultMessage("<p>An icon positioned at a point to indicate information on a map. Markers can be used to provide an info window, custom fill and stroke colors, and custom images to convey information to the user.</p>")
  @Description("")
  String MarkerHelpStringComponentPallette();

  @DefaultMessage("MediaStore")
  @Description("")
  String mediaStoreComponentPallette();

  @DefaultMessage("Non-visible component that communicates with a Web service and stores media files.")
  @Description("")
  String MediaStoreHelpStringComponentPallette();

  @DefaultMessage("Navigation")
  @Description("")
  String navigationComponentPallette();

  @DefaultMessage("Navigation")
  @Description("")
  String NavigationHelpStringComponentPallette();

  @DefaultMessage("NearField")
  @Description("")
  String nearFieldComponentPallette();

  @DefaultMessage("<p>Non-visible component to provide NFC capabilities. For now this component supports the reading and writing of text tags only (if supported by the device)</p><p>In order to read and write text tags, the component must have its <code>ReadMode</code> property set to True or False respectively.</p><p><strong>Note:</strong> This component will only work on Screen1 of any App Inventor app.</p>")
  @Description("")
  String NearFieldHelpStringComponentPallette();

  @DefaultMessage("Notifier")
  @Description("")
  String notifierComponentPallette();

  @DefaultMessage("The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: <ul><li> ShowMessageDialog: displays a message which the user must dismiss by pressing a button.</li><li> ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.</li><li> ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowPasswordDialog: lets the user enter password in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert: displays a temporary alert that goes away by itself after a short time.</li><li> ShowProgressDialog: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.</li><li> DismissProgressDialog: Dismisses the progress dialog displayed by ShowProgressDialog.</li><li> LogError: logs an error message to the Android log. </li><li> LogInfo: logs an info message to the Android log.</li><li> LogWarning: logs a warning message to the Android log.</li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;</li><li>You can also use the font tag to specify color, for example, &lt;font color=\"blue\"&gt;. Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow</li></ul>")
  @Description("")
  String NotifierHelpStringComponentPallette();

  @DefaultMessage("NxtColorSensor")
  @Description("")
  String nxtColorSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtColorSensorHelpStringComponentPallette();

  @DefaultMessage("NxtDirectCommands")
  @Description("")
  String nxtDirectCommandsComponentPallette();

  @DefaultMessage("A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.")
  @Description("")
  String NxtDirectCommandsHelpStringComponentPallette();

  @DefaultMessage("NxtDrive")
  @Description("")
  String nxtDriveComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.")
  @Description("")
  String NxtDriveHelpStringComponentPallette();

  @DefaultMessage("NxtLightSensor")
  @Description("")
  String nxtLightSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtLightSensorHelpStringComponentPallette();

  @DefaultMessage("NxtSoundSensor")
  @Description("")
  String nxtSoundSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtSoundSensorHelpStringComponentPallette();

  @DefaultMessage("NxtTouchSensor")
  @Description("")
  String nxtTouchSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtTouchSensorHelpStringComponentPallette();

  @DefaultMessage("NxtUltrasonicSensor")
  @Description("")
  String nxtUltrasonicSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtUltrasonicSensorHelpStringComponentPallette();

  @DefaultMessage("OrientationSensor")
  @Description("")
  String orientationSensorComponentPallette();

  @DefaultMessage("<p>Non-visible component providing information about the device''s physical orientation in three dimensions: <ul> <li> <strong>Roll</strong>: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. </li> <li> <strong>Pitch</strong>: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over.</li> <li> <strong>Azimuth</strong>: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc.</li></ul> These measurements assume that the device itself is not moving.</p>")
  @Description("")
  String OrientationSensorHelpStringComponentPallette();

  @DefaultMessage("PasswordTextBox")
  @Description("")
  String passwordTextBoxComponentPallette();

  @DefaultMessage("<p>A box for entering passwords. This is the same as the ordinary <code>TextBox</code> component except this does not display the characters typed by the user.</p><p>The value of the text in the box can be found or set through the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p> <p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>")
  @Description("")
  String PasswordTextBoxHelpStringComponentPallette();

  @DefaultMessage("Pedometer")
  @Description("")
  String pedometerComponentPallette();

  @DefaultMessage("A Component that acts like a Pedometer. It senses motion via the Accerleromter and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well.")
  @Description("")
  String PedometerHelpStringComponentPallette();

  @DefaultMessage("PhoneCall")
  @Description("")
  String phoneCallComponentPallette();

  @DefaultMessage("<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber</code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall</code> method, enabling the program to launch a phone call.</p><p>Often, this component is used with the <code>ContactPicker</code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber</code> property to the contact''s phone number.</p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text with the specified digits (e.g., \"6505551212\"). Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included.</p>")
  @Description("")
  String PhoneCallHelpStringComponentPallette();

  @DefaultMessage("PhoneNumberPicker")
  @Description("")
  String phoneNumberPickerComponentPallette();

  @DefaultMessage("A button that, when clicked on, displays a list of the contacts'' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact''s name </li> <li> <code>PhoneNumber</code>: the contact''s phone number </li> <li> <code>EmailAddress</code>: the contact''s email address </li> <li> <code>Picture</code>: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.")
  @Description("")
  String PhoneNumberPickerHelpStringComponentPallette();

  @DefaultMessage("PhoneStatus")
  @Description("")
  String phoneStatusComponentPallette();

  @DefaultMessage("Component that returns information about the phone.")
  @Description("")
  String PhoneStatusHelpStringComponentPallette();

  @DefaultMessage("Player")
  @Description("")
  String playerComponentPallette();

  @DefaultMessage("Multimedia component that plays audio and controls phone vibration. The name of a multimedia field is specified in the <code>Source</code> property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).<p>For supported audio formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This component is best for long sound files, such as songs, while the <code>Sound</code> component is more efficient for short files, such as sound effects.</p>")
  @Description("")
  String PlayerHelpStringComponentPallette();

  @DefaultMessage("Polygon")
  @Description("")
  String polygonComponentPallette();

  @DefaultMessage("Polygon")
  @Description("")
  String PolygonHelpStringComponentPallette();

  @DefaultMessage("ProximitySensor")
  @Description("")
  String proximitySensorComponentPallette();

  @DefaultMessage("<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.</p>")
  @Description("")
  String ProximitySensorHelpStringComponentPallette();

  @DefaultMessage("Rectangle")
  @Description("")
  String rectangleComponentPallette();

  @DefaultMessage("Rectangle")
  @Description("")
  String RectangleHelpStringComponentPallette();

  @DefaultMessage("Serial")
  @Description("")
  String serialComponentPallette();

  @DefaultMessage("Serial component which can be used to connect to devices like Arduino")
  @Description("")
  String SerialHelpStringComponentPallette();

  @DefaultMessage("Sharing")
  @Description("")
  String sharingComponentPallette();

  @DefaultMessage("Sharing is a non-visible component that enables sharing files and/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor/assets</code>, would be: <ul><li><code>\"file:///sdcard/Appinventor/assets/arrow.gif\"</code></li> or <li><code>\"/storage/Appinventor/assets/arrow.gif\"</code></li></ul>")
  @Description("")
  String SharingHelpStringComponentPallette();

  @DefaultMessage("Slider")
  @Description("")
  String sliderComponentPallette();

  @DefaultMessage("A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.")
  @Description("")
  String SliderHelpStringComponentPallette();

  @DefaultMessage("Sound")
  @Description("")
  String soundComponentPallette();

  @DefaultMessage("<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.</p> <p>For supported sound file formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This <code>Sound</code> component is best for short sound files, such as sound effects, while the <code>Player</code> component is more efficient for longer sounds, such as songs.</p><p>You might get an error if you attempt to play a sound immeditely after setting the source.</p>")
  @Description("")
  String SoundHelpStringComponentPallette();

  @DefaultMessage("SoundRecorder")
  @Description("")
  String soundRecorderComponentPallette();

  @DefaultMessage("<p>Multimedia component that records audio.</p>")
  @Description("")
  String SoundRecorderHelpStringComponentPallette();

  @DefaultMessage("SpeechRecognizer")
  @Description("")
  String speechRecognizerComponentPallette();

  @DefaultMessage("Component for using Voice Recognition to convert from speech to text")
  @Description("")
  String SpeechRecognizerHelpStringComponentPallette();

  @DefaultMessage("Spinner")
  @Description("")
  String spinnerComponentPallette();

  @DefaultMessage("<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString</code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting it does not generate an After Picking event. Consequently it''s useful to make the first Spinner item be a non-choice like \"Select from below...\". </p>")
  @Description("")
  String SpinnerHelpStringComponentPallette();

  @DefaultMessage("Switch")
  @Description("")
  String switchComponentPallette();

  @DefaultMessage("Toggle switch that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.")
  @Description("")
  String SwitchHelpStringComponentPallette();

  @DefaultMessage("TableArrangement")
  @Description("")
  String tableArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed in tabular form.</p>")
  @Description("")
  String TableArrangementHelpStringComponentPallette();

  @DefaultMessage("TextBox")
  @Description("")
  String textBoxComponentPallette();

  @DefaultMessage("<p>A box for the user to enter text. The initial or user-entered text value is in the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p><p>The <code>MultiLine</code> property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key.</p><p>The <code> NumbersOnly</code> property restricts the keyboard to acceptnumeric input only.</p><p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox</code> instead.</p>")
  @Description("")
  String TextBoxHelpStringComponentPallette();

  @DefaultMessage("TextToSpeech")
  @Description("")
  String textToSpeechComponentPallette();

  @DefaultMessage("The TestToSpeech component speaks a given text aloud. You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code. This changes the pronunciation of words, not the actual language spoken. For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.</p> <p>You can also specify a country by supplying a country code. This can affect the pronunciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.</p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.</p>")
  @Description("")
  String TextToSpeechHelpStringComponentPallette();

  @DefaultMessage("Texting")
  @Description("")
  String textingComponentPallette();

  @DefaultMessage("<p>A component that will, when the <code>SendMessage</code> method is called, send the text message specified in the <code>Message</code> property to the phone number specified in the <code>PhoneNumber</code> property.</p> <p>If the <code>ReceivingEnabled</code> property is set to 1 messages will <b>not</b> be received. If <code>ReceivingEnabled</code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled</code> is set to 3, messages will be received when the application is running <b>and</b> when the application is not running they will be queued and a notification displayed to the user.</p> <p>When a message arrives, the <code>MessageReceived</code> event is raised and provides the sending number and message.</p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it''s not visible on the screen) and, moreso, even if the app is not running, so long as it''s installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you''ll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.</p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.</p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.</p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker</code> component, which lets the users select a phone numbers from the ones stored in the the phone''s contacts.</p>")
  @Description("")
  String TextingHelpStringComponentPallette();

  @DefaultMessage("Thermometer")
  @Description("")
  String thermometerComponentPallette();

  @DefaultMessage("A sensor component that can measure the ambient (external) temperature. Most Android devices do not have this sensor.")
  @Description("")
  String ThermometerHelpStringComponentPallette();

  @DefaultMessage("TimePicker")
  @Description("")
  String timePickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, launches a popup dialog to allow the user to select a time.</p>")
  @Description("")
  String TimePickerHelpStringComponentPallette();

  @DefaultMessage("TinyDB")
  @Description("")
  String tinyDBComponentPallette();

  @DefaultMessage("TinyDB is a non-visible component that stores data for an app. <p> Apps created with App Inventor are initialized each time they run: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent </em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. </<p> <p> Data items are strings stored under <em>tags</em> . To store a data item, you specify the tag it should be stored under. Subsequently, you can retrieve the data that was stored under a given tag. </p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can</em> use TinyDb to shares data between the different screens of a multi-screen app. </p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb. That sharing will disappear once the apps are packaged. But, during development, you should be careful to clear the TinyDb each time you start working on a new app.</p>")
  @Description("")
  String TinyDBHelpStringComponentPallette();

  @DefaultMessage("TinyWebDB")
  @Description("")
  String tinyWebDBComponentPallette();

  @DefaultMessage("Non-visible component that communicates with a Web service to store and retrieve information.")
  @Description("")
  String TinyWebDBHelpStringComponentPallette();

  @DefaultMessage("Twitter")
  @Description("")
  String twitterComponentPallette();

  @DefaultMessage("A non-visible component that enables communication with <a href=\"http://www.twitter.com\" target=\"_blank\">Twitter</a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized</code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter</code>)</li><li> Sending a Tweet (<code>Tweet</code>) </li><li> Sending a Tweet with an Image (<code>TweetWithImage</code>) </li><li> Directing a message to a specific user (<code>DirectMessage</code>)</li> <li> Receiving the most recent messages directed to the logged-in user (<code>RequestDirectMessages</code>)</li> <li> Following a specific user (<code>Follow</code>)</li><li> Ceasing to follow a specific user (<code>StopFollowing</code>)</li><li> Getting a list of users following the logged-in user (<code>RequestFollowers</code>)</li> <li> Getting the most recent messages of users followed by the logged-in user (<code>RequestFriendTimeline</code>)</li> <li> Getting the most recent mentions of the logged-in user (<code>RequestMentions</code>)</li></ul></p> <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization specific to your app from http://twitter.com/oauth_clients/new")
  @Description("")
  String TwitterHelpStringComponentPallette();

  @DefaultMessage("VerticalArrangement")
  @Description("")
  String verticalArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p>")
  @Description("")
  String VerticalArrangementHelpStringComponentPallette();

  @DefaultMessage("VerticalScrollArrangement")
  @Description("")
  String verticalScrollArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p><p> This version is scrollable")
  @Description("")
  String VerticalScrollArrangementHelpStringComponentPallette();

  @DefaultMessage("VideoPlayer")
  @Description("")
  String videoPlayerComponentPallette();

  @DefaultMessage("A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the <code>Start</code>, <code>Pause</code>, and <code>SeekTo</code> methods. <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats. For more details about legal formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.")
  @Description("")
  String VideoPlayerHelpStringComponentPallette();

  @DefaultMessage("Voting")
  @Description("")
  String votingComponentPallette();

  @DefaultMessage("The Voting component communicates with a Web service to retrieve a ballot and send back users'' votes. <p>The application should call the method <code>RequestBallot</code>, usually in the <code>Initialize</code> event handler, in order to get the ballot question and options from the Web service (specified by the <code>ServiceURL</code> property). Depending on the response from the Web service, the system will raise one of the following three events: <ol> <li> <code>GotBallot</code>, indicating that the ballot question and options were retrieved and the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set.</li> <li> <code>NoOpenPoll</code>, indicating that no ballot question is available.</li> <li> <code>WebServiceError</code>, indicating that the service did not provide a legal response and providing an error messages.</li> </ol></p> <p>After getting the ballot, the application should allow the user to make a choice from among <code>BallotOptions</code> and set the property <code>UserChoice</code> to that choice. The application should also set <code>UserId</code> to specify which user is voting.</p> <p>Once the application has set <code>UserChoice</code> and <code>UserId</code>, the application can call <code>SendBallot</code> to send this information to the Web service. If the service successfully receives the vote, the event <code>GotBallotConfirmation</code> will be raised. Otherwise, the event <code>WebServiceError</code> will be raised with the appropriate error message.</p>")
  @Description("")
  String VotingHelpStringComponentPallette();

  @DefaultMessage("Web")
  @Description("")
  String webComponentPallette();

  @DefaultMessage("Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.")
  @Description("")
  String WebHelpStringComponentPallette();

  @DefaultMessage("WebViewer")
  @Description("")
  String webViewerComponentPallette();

  @DefaultMessage("Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone''s hardware Back key will exit the app, rather than move back in the browser history.<p />You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString. In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods </em getWebViewString()</em> and <em>setWebViewString(text)</em>. <p />For example, if the WebViewer opens to a page that contains the Javascript command <br /> <em>document.write(\"The answer is\" + window.AppInventor.getWebViewString());</em> <br />and if you set WebView.WebVewString to \"hello\", then the web page will show </br ><em>The answer is hello</em>. <br />And if the Web page contains Javascript that executes the command <br /><em>window.AppInventor.setWebViewString(\"hello from Javascript\")</em>, <br />then the value of the WebViewString property will be <br /><em>hello from Javascript</em>.")
  @Description("")
  String WebViewerHelpStringComponentPallette();

  @DefaultMessage("YandexTranslate")
  @Description("")
  String yandexTranslateComponentPallette();

  @DefaultMessage("Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So\"en-es\" will translate from English to Spanish while \"es-ru\" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just \"es\" will attempt to detect the source language and translate it to Spanish.<p /> This component is powered by the Yandex translation service. See http://api.yandex.com/translate/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p />Note: Translation happens asynchronously in the background. When the translation is complete, the \"GotTranslation\" event is triggered.")
  @Description("")
  String YandexTranslateHelpStringComponentPallette();

  @DefaultMessage("TeachableMachine")
  @Description("")
  String teachableMachineComponentPallette();

  @DefaultMessage("Component that classifies images using a user trained model from the image classification explorer. You must provide a WebViewer component in the Teachable Machine Extension component''s WebViewer property in order for classification to work.")
  @Description("")
  String TeachableMachineHelpStringComponentPallette();


  /* Properties */
  @DefaultMessage("AboutScreen")
  @Description("")
  String AboutScreenProperties();

  @DefaultMessage("AboveRangeEventEnabled")
  @Description("")
  String AboveRangeEventEnabledProperties();

  @DefaultMessage("AbsoluteStrength")
  @Description("")
  String AbsoluteStrengthProperties();

  @DefaultMessage("AccentColor")
  @Description("")
  String AccentColorProperties();

  @DefaultMessage("Accuracy")
  @Description("")
  String AccuracyProperties();

  @DefaultMessage("Action")
  @Description("")
  String ActionProperties();

  @DefaultMessage("ActionBar")
  @Description("")
  String ActionBarProperties();

  @DefaultMessage("ActivityClass")
  @Description("")
  String ActivityClassProperties();

  @DefaultMessage("ActivityPackage")
  @Description("")
  String ActivityPackageProperties();

  @DefaultMessage("AddressesAndNames")
  @Description("")
  String AddressesAndNamesProperties();

  @DefaultMessage("AirPressure")
  @Description("")
  String AirPressureProperties();

  @DefaultMessage("AlignHorizontal")
  @Description("")
  String AlignHorizontalProperties();

  @DefaultMessage("AlignVertical")
  @Description("")
  String AlignVerticalProperties();

  @DefaultMessage("AllowCookies")
  @Description("")
  String AllowCookiesProperties();

  @DefaultMessage("Altitude")
  @Description("")
  String AltitudeProperties();

  @DefaultMessage("AnchorHorizontal")
  @Description("")
  String AnchorHorizontalProperties();

  @DefaultMessage("AnchorVertical")
  @Description("")
  String AnchorVerticalProperties();

  @DefaultMessage("Angle")
  @Description("")
  String AngleProperties();

  @DefaultMessage("Animation")
  @Description("")
  String AnimationProperties();

  @DefaultMessage("ApiKey")
  @Description("")
  String ApiKeyProperties();

  @DefaultMessage("AppName")
  @Description("")
  String AppNameProperties();

  @DefaultMessage("Available")
  @Description("")
  String AvailableProperties();

  @DefaultMessage("AvailableCountries")
  @Description("")
  String AvailableCountriesProperties();

  @DefaultMessage("AvailableLanguages")
  @Description("")
  String AvailableLanguagesProperties();

  @DefaultMessage("AvailableProviders")
  @Description("")
  String AvailableProvidersProperties();

  @DefaultMessage("AverageLux")
  @Description("")
  String AverageLuxProperties();

  @DefaultMessage("Azimuth")
  @Description("")
  String AzimuthProperties();

  @DefaultMessage("BackgroundColor")
  @Description("")
  String BackgroundColorProperties();

  @DefaultMessage("BackgroundImage")
  @Description("")
  String BackgroundImageProperties();

  @DefaultMessage("BackgroundImageinBase64")
  @Description("")
  String BackgroundImageinBase64Properties();

  @DefaultMessage("BallotOptions")
  @Description("")
  String BallotOptionsProperties();

  @DefaultMessage("BallotQuestion")
  @Description("")
  String BallotQuestionProperties();

  @DefaultMessage("BaudRate")
  @Description("")
  String BaudRateProperties();

  @DefaultMessage("BelowRangeEventEnabled")
  @Description("")
  String BelowRangeEventEnabledProperties();

  @DefaultMessage("BlocksToolkit")
  @Description("")
  String BlocksToolkitProperties();

  @DefaultMessage("BluetoothClient")
  @Description("")
  String BluetoothClientProperties();

  @DefaultMessage("BottomOfRange")
  @Description("")
  String BottomOfRangeProperties();

  @DefaultMessage("BoundingBox")
  @Description("")
  String BoundingBoxProperties();

  @DefaultMessage("BufferSize")
  @Description("")
  String BufferSizeProperties();

  @DefaultMessage("CalibrateStrideLength")
  @Description("")
  String CalibrateStrideLengthProperties();

  @DefaultMessage("CenterFromString")
  @Description("")
  String CenterFromStringProperties();

  @DefaultMessage("CharacterEncoding")
  @Description("")
  String CharacterEncodingProperties();

  @DefaultMessage("Checked")
  @Description("")
  String CheckedProperties();

  @DefaultMessage("Clickable")
  @Description("")
  String ClickableProperties();

  @DefaultMessage("CloseScreenAnimation")
  @Description("")
  String CloseScreenAnimationProperties();

  @DefaultMessage("ColorChangedEventEnabled")
  @Description("")
  String ColorChangedEventEnabledProperties();

  @DefaultMessage("ColorLeft")
  @Description("")
  String ColorLeftProperties();

  @DefaultMessage("ColorRight")
  @Description("")
  String ColorRightProperties();

  @DefaultMessage("Columns")
  @Description("")
  String ColumnsProperties();

  @DefaultMessage("ConsumerKey")
  @Description("")
  String ConsumerKeyProperties();

  @DefaultMessage("ConsumerSecret")
  @Description("")
  String ConsumerSecretProperties();

  @DefaultMessage("ContactName")
  @Description("")
  String ContactNameProperties();

  @DefaultMessage("ContactUri")
  @Description("")
  String ContactUriProperties();

  @DefaultMessage("Country")
  @Description("")
  String CountryProperties();

  @DefaultMessage("CurrentAddress")
  @Description("")
  String CurrentAddressProperties();

  @DefaultMessage("CurrentPageTitle")
  @Description("")
  String CurrentPageTitleProperties();

  @DefaultMessage("CurrentUrl")
  @Description("")
  String CurrentUrlProperties();

  @DefaultMessage("DataType")
  @Description("")
  String DataTypeProperties();

  @DefaultMessage("DataUri")
  @Description("")
  String DataUriProperties();

  @DefaultMessage("Day")
  @Description("")
  String DayProperties();

  @DefaultMessage("DefaultRedisServer")
  @Description("")
  String DefaultRedisServerProperties();

  @DefaultMessage("DefaultURL")
  @Description("")
  String DefaultURLProperties();

  @DefaultMessage("DelimiterByte")
  @Description("")
  String DelimiterByteProperties();

  @DefaultMessage("Description")
  @Description("")
  String DescriptionProperties();

  @DefaultMessage("DetectColor")
  @Description("")
  String DetectColorProperties();

  @DefaultMessage("DeveloperBucket")
  @Description("")
  String DeveloperBucketProperties();

  @DefaultMessage("DirectMessages")
  @Description("")
  String DirectMessagesProperties();

  @DefaultMessage("DisconnectOnError")
  @Description("")
  String DisconnectOnErrorProperties();

  @DefaultMessage("Distance")
  @Description("")
  String DistanceProperties();

  @DefaultMessage("DistanceInterval")
  @Description("")
  String DistanceIntervalProperties();

  @DefaultMessage("Draggable")
  @Description("")
  String DraggableProperties();

  @DefaultMessage("DriveMotors")
  @Description("")
  String DriveMotorsProperties();

  @DefaultMessage("EastLongitude")
  @Description("")
  String EastLongitudeProperties();

  @DefaultMessage("ElapsedTime")
  @Description("")
  String ElapsedTimeProperties();

  @DefaultMessage("Elements")
  @Description("")
  String ElementsProperties();

  @DefaultMessage("ElementsFromString")
  @Description("")
  String ElementsFromStringProperties();

  @DefaultMessage("EmailAddress")
  @Description("")
  String EmailAddressProperties();

  @DefaultMessage("EmailAddressList")
  @Description("")
  String EmailAddressListProperties();

  @DefaultMessage("EnableInfobox")
  @Description("")
  String EnableInfoboxProperties();

  @DefaultMessage("EnablePan")
  @Description("")
  String EnablePanProperties();

  @DefaultMessage("EnableRotation")
  @Description("")
  String EnableRotationProperties();

  @DefaultMessage("EnableSpeedRegulation")
  @Description("")
  String EnableSpeedRegulationProperties();

  @DefaultMessage("EnableZoom")
  @Description("")
  String EnableZoomProperties();

  @DefaultMessage("Enabled")
  @Description("")
  String EnabledProperties();

  @DefaultMessage("EndLatitude")
  @Description("")
  String EndLatitudeProperties();

  @DefaultMessage("EndLocation")
  @Description("")
  String EndLocationProperties();

  @DefaultMessage("EndLongitude")
  @Description("")
  String EndLongitudeProperties();

  @DefaultMessage("ExtendMovesOutsideCanvas")
  @Description("")
  String ExtendMovesOutsideCanvasProperties();

  @DefaultMessage("ExtraKey")
  @Description("")
  String ExtraKeyProperties();

  @DefaultMessage("ExtraValue")
  @Description("")
  String ExtraValueProperties();

  @DefaultMessage("Extras")
  @Description("")
  String ExtrasProperties();

  @DefaultMessage("Features")
  @Description("")
  String FeaturesProperties();

  @DefaultMessage("FeaturesFromGeoJSON")
  @Description("")
  String FeaturesFromGeoJSONProperties();

  @DefaultMessage("FillColor")
  @Description("")
  String FillColorProperties();

  @DefaultMessage("FillOpacity")
  @Description("")
  String FillOpacityProperties();

  @DefaultMessage("FirebaseToken")
  @Description("")
  String FirebaseTokenProperties();

  @DefaultMessage("FirebaseURL")
  @Description("")
  String FirebaseURLProperties();

  @DefaultMessage("FollowLinks")
  @Description("")
  String FollowLinksProperties();

  @DefaultMessage("Followers")
  @Description("")
  String FollowersProperties();

  @DefaultMessage("FontBold")
  @Description("")
  String FontBoldProperties();

  @DefaultMessage("FontItalic")
  @Description("")
  String FontItalicProperties();

  @DefaultMessage("FontSize")
  @Description("")
  String FontSizeProperties();

  @DefaultMessage("FontTypeface")
  @Description("")
  String FontTypefaceProperties();

  @DefaultMessage("FriendTimeline")
  @Description("")
  String FriendTimelineProperties();

  @DefaultMessage("FullScreen")
  @Description("")
  String FullScreenProperties();

  @DefaultMessage("GameId")
  @Description("")
  String GameIdProperties();

  @DefaultMessage("GenerateColor")
  @Description("")
  String GenerateColorProperties();

  @DefaultMessage("GenerateLight")
  @Description("")
  String GenerateLightProperties();

  @DefaultMessage("GoogleVoiceEnabled")
  @Description("")
  String GoogleVoiceEnabledProperties();

  @DefaultMessage("HTMLContent")
  @Description("")
  String HTMLContentProperties();

  @DefaultMessage("HTMLFormat")
  @Description("")
  String HTMLFormatProperties();

  @DefaultMessage("HasAccuracy")
  @Description("")
  String HasAccuracyProperties();

  @DefaultMessage("HasAltitude")
  @Description("")
  String HasAltitudeProperties();

  @DefaultMessage("HasLongitudeLatitude")
  @Description("")
  String HasLongitudeLatitudeProperties();

  @DefaultMessage("HasMargins")
  @Description("")
  String HasMarginsProperties();

  @DefaultMessage("Heading")
  @Description("")
  String HeadingProperties();

  @DefaultMessage("Height")
  @Description("")
  String HeightProperties();

  @DefaultMessage("HeightPercent")
  @Description("")
  String HeightPercentProperties();

  @DefaultMessage("HighByteFirst")
  @Description("")
  String HighByteFirstProperties();

  @DefaultMessage("Hint")
  @Description("")
  String HintProperties();

  @DefaultMessage("HolePoints")
  @Description("")
  String HolePointsProperties();

  @DefaultMessage("HolePointsFromString")
  @Description("")
  String HolePointsFromStringProperties();

  @DefaultMessage("HomeUrl")
  @Description("")
  String HomeUrlProperties();

  @DefaultMessage("Hour")
  @Description("")
  String HourProperties();

  @DefaultMessage("Humidity")
  @Description("")
  String HumidityProperties();

  @DefaultMessage("Icon")
  @Description("")
  String IconProperties();

  @DefaultMessage("IgnoreSslErrors")
  @Description("")
  String IgnoreSslErrorsProperties();

  @DefaultMessage("Image")
  @Description("")
  String ImageProperties();

  @DefaultMessage("ImageAsset")
  @Description("")
  String ImageAssetProperties();

  @DefaultMessage("InputMode")
  @Description("")
  String InputModeProperties();

  @DefaultMessage("InstanceId")
  @Description("")
  String InstanceIdProperties();

  @DefaultMessage("Instant")
  @Description("")
  String InstantProperties();

  @DefaultMessage("Interval")
  @Description("")
  String IntervalProperties();

  @DefaultMessage("InvitedInstances")
  @Description("")
  String InvitedInstancesProperties();

  @DefaultMessage("IsAccepting")
  @Description("")
  String IsAcceptingProperties();

  @DefaultMessage("IsConnected")
  @Description("")
  String IsConnectedProperties();

  @DefaultMessage("IsInitialized")
  @Description("")
  String IsInitializedProperties();

  @DefaultMessage("IsOpen")
  @Description("")
  String IsOpenProperties();

  @DefaultMessage("IsPlaying")
  @Description("")
  String IsPlayingProperties();

  @DefaultMessage("ItemBackgroundColor")
  @Description("")
  String ItemBackgroundColorProperties();

  @DefaultMessage("ItemTextColor")
  @Description("")
  String ItemTextColorProperties();

  @DefaultMessage("JoinedInstances")
  @Description("")
  String JoinedInstancesProperties();

  @DefaultMessage("KeepRunningWhenOnPause")
  @Description("")
  String KeepRunningWhenOnPauseProperties();

  @DefaultMessage("KeyFile")
  @Description("")
  String KeyFileProperties();

  @DefaultMessage("Language")
  @Description("")
  String LanguageProperties();

  @DefaultMessage("LastMessage")
  @Description("")
  String LastMessageProperties();

  @DefaultMessage("Latitude")
  @Description("")
  String LatitudeProperties();

  @DefaultMessage("Leader")
  @Description("")
  String LeaderProperties();

  @DefaultMessage("LegacyMode")
  @Description("")
  String LegacyModeProperties();

  @DefaultMessage("LineWidth")
  @Description("")
  String LineWidthProperties();

  @DefaultMessage("LoadingDialogMessage")
  @Description("")
  String LoadingDialogMessageProperties();

  @DefaultMessage("LocationSensor")
  @Description("")
  String LocationSensorProperties();

  @DefaultMessage("Longitude")
  @Description("")
  String LongitudeProperties();

  @DefaultMessage("Loop")
  @Description("")
  String LoopProperties();

  @DefaultMessage("Lux")
  @Description("")
  String LuxProperties();

  @DefaultMessage("Magnitude")
  @Description("")
  String MagnitudeProperties();

  @DefaultMessage("MapType")
  @Description("")
  String MapTypeProperties();

  @DefaultMessage("MaxValue")
  @Description("")
  String MaxValueProperties();

  @DefaultMessage("MaximumRange")
  @Description("")
  String MaximumRangeProperties();

  @DefaultMessage("Mentions")
  @Description("")
  String MentionsProperties();

  @DefaultMessage("Message")
  @Description("")
  String MessageProperties();

  @DefaultMessage("MinValue")
  @Description("")
  String MinValueProperties();

  @DefaultMessage("MinimumInterval")
  @Description("")
  String MinimumIntervalProperties();

  @DefaultMessage("Minute")
  @Description("")
  String MinuteProperties();

  @DefaultMessage("Mode")
  @Description("")
  String ModeProperties();

  @DefaultMessage("ModelLabels")
  @Description("")
  String ModelLabelsProperties();

  @DefaultMessage("Month")
  @Description("")
  String MonthProperties();

  @DefaultMessage("MonthInText")
  @Description("")
  String MonthInTextProperties();

  @DefaultMessage("MotorPorts")
  @Description("")
  String MotorPortsProperties();

  @DefaultMessage("Moving")
  @Description("")
  String MovingProperties();

  @DefaultMessage("MultiLine")
  @Description("")
  String MultiLineProperties();

  @DefaultMessage("Namespace")
  @Description("")
  String NamespaceProperties();

  @DefaultMessage("NorthLatitude")
  @Description("")
  String NorthLatitudeProperties();

  @DefaultMessage("NotifierLength")
  @Description("")
  String NotifierLengthProperties();

  @DefaultMessage("NumbersOnly")
  @Description("")
  String NumbersOnlyProperties();

  @DefaultMessage("On")
  @Description("")
  String OnProperties();

  @DefaultMessage("OpenScreenAnimation")
  @Description("")
  String OpenScreenAnimationProperties();

  @DefaultMessage("OriginAtCenter")
  @Description("")
  String OriginAtCenterProperties();

  @DefaultMessage("PaintColor")
  @Description("")
  String PaintColorProperties();

  @DefaultMessage("PasswordVisible")
  @Description("")
  String PasswordVisibleProperties();

  @DefaultMessage("Persist")
  @Description("")
  String PersistProperties();

  @DefaultMessage("PhoneNumber")
  @Description("")
  String PhoneNumberProperties();

  @DefaultMessage("PhoneNumberList")
  @Description("")
  String PhoneNumberListProperties();

  @DefaultMessage("Picture")
  @Description("")
  String PictureProperties();

  @DefaultMessage("Pitch")
  @Description("")
  String PitchProperties();

  @DefaultMessage("Platform")
  @Description("")
  String PlatformProperties();

  @DefaultMessage("PlatformVersion")
  @Description("")
  String PlatformVersionProperties();

  @DefaultMessage("PlayOnlyInForeground")
  @Description("")
  String PlayOnlyInForegroundProperties();

  @DefaultMessage("Players")
  @Description("")
  String PlayersProperties();

  @DefaultMessage("Points")
  @Description("")
  String PointsProperties();

  @DefaultMessage("PointsFromString")
  @Description("")
  String PointsFromStringProperties();

  @DefaultMessage("PressedEventEnabled")
  @Description("")
  String PressedEventEnabledProperties();

  @DefaultMessage("PrimaryColor")
  @Description("")
  String PrimaryColorProperties();

  @DefaultMessage("PrimaryColorDark")
  @Description("")
  String PrimaryColorDarkProperties();

  @DefaultMessage("ProjectBucket")
  @Description("")
  String ProjectBucketProperties();

  @DefaultMessage("ProjectID")
  @Description("")
  String ProjectIDProperties();

  @DefaultMessage("Prompt")
  @Description("")
  String PromptProperties();

  @DefaultMessage("PromptforPermission")
  @Description("")
  String PromptforPermissionProperties();

  @DefaultMessage("ProviderLocked")
  @Description("")
  String ProviderLockedProperties();

  @DefaultMessage("ProviderName")
  @Description("")
  String ProviderNameProperties();

  @DefaultMessage("PublicInstances")
  @Description("")
  String PublicInstancesProperties();

  @DefaultMessage("Query")
  @Description("")
  String QueryProperties();

  @DefaultMessage("Radius")
  @Description("")
  String RadiusProperties();

  @DefaultMessage("ReadMode")
  @Description("")
  String ReadModeProperties();

  @DefaultMessage("ReadOnly")
  @Description("")
  String ReadOnlyProperties();

  @DefaultMessage("ReceivingEnabled")
  @Description("")
  String ReceivingEnabledProperties();

  @DefaultMessage("RedisPort")
  @Description("")
  String RedisPortProperties();

  @DefaultMessage("RedisServer")
  @Description("")
  String RedisServerProperties();

  @DefaultMessage("RefreshTime")
  @Description("")
  String RefreshTimeProperties();

  @DefaultMessage("ReleasedEventEnabled")
  @Description("")
  String ReleasedEventEnabledProperties();

  @DefaultMessage("RequestHeaders")
  @Description("")
  String RequestHeadersProperties();

  @DefaultMessage("ResponseContent")
  @Description("")
  String ResponseContentProperties();

  @DefaultMessage("ResponseFileName")
  @Description("")
  String ResponseFileNameProperties();

  @DefaultMessage("Result")
  @Description("")
  String ResultProperties();

  @DefaultMessage("ResultName")
  @Description("")
  String ResultNameProperties();

  @DefaultMessage("ResultType")
  @Description("")
  String ResultTypeProperties();

  @DefaultMessage("ResultUri")
  @Description("")
  String ResultUriProperties();

  @DefaultMessage("ReverseDirection")
  @Description("")
  String ReverseDirectionProperties();

  @DefaultMessage("Roll")
  @Description("")
  String RollProperties();

  @DefaultMessage("Rotates")
  @Description("")
  String RotatesProperties();

  @DefaultMessage("Rotation")
  @Description("")
  String RotationProperties();

  @DefaultMessage("RotationAngle")
  @Description("")
  String RotationAngleProperties();

  @DefaultMessage("Rows")
  @Description("")
  String RowsProperties();

  @DefaultMessage("Running")
  @Description("")
  String RunningProperties();

  @DefaultMessage("SaveResponse")
  @Description("")
  String SaveResponseProperties();

  @DefaultMessage("SavedRecording")
  @Description("")
  String SavedRecordingProperties();

  @DefaultMessage("ScalePictureToFit")
  @Description("")
  String ScalePictureToFitProperties();

  @DefaultMessage("ScaleUnits")
  @Description("")
  String ScaleUnitsProperties();

  @DefaultMessage("Scaling")
  @Description("")
  String ScalingProperties();

  @DefaultMessage("ScreenOrientation")
  @Description("")
  String ScreenOrientationProperties();

  @DefaultMessage("Scrollable")
  @Description("")
  String ScrollableProperties();

  @DefaultMessage("SearchResults")
  @Description("")
  String SearchResultsProperties();

  @DefaultMessage("Secure")
  @Description("")
  String SecureProperties();

  @DefaultMessage("Selection")
  @Description("")
  String SelectionProperties();

  @DefaultMessage("SelectionColor")
  @Description("")
  String SelectionColorProperties();

  @DefaultMessage("SelectionIndex")
  @Description("")
  String SelectionIndexProperties();

  @DefaultMessage("Sensitivity")
  @Description("")
  String SensitivityProperties();

  @DefaultMessage("SensorPort")
  @Description("")
  String SensorPortProperties();

  @DefaultMessage("SensorValueChangedEventEnabled")
  @Description("")
  String SensorValueChangedEventEnabledProperties();

  @DefaultMessage("ServiceAccountEmail")
  @Description("")
  String ServiceAccountEmailProperties();

  @DefaultMessage("ServiceURL")
  @Description("")
  String ServiceURLProperties();

  @DefaultMessage("ServiceUrl")
  @Description("")
  String ServiceUrlProperties();

  @DefaultMessage("Shape")
  @Description("")
  String ShapeProperties();

  @DefaultMessage("ShowCompass")
  @Description("")
  String ShowCompassProperties();

  @DefaultMessage("ShowFeedback")
  @Description("")
  String ShowFeedbackProperties();

  @DefaultMessage("ShowFilterBar")
  @Description("")
  String ShowFilterBarProperties();

  @DefaultMessage("ShowListsAsJson")
  @Description("")
  String ShowListsAsJsonProperties();

  @DefaultMessage("ShowLoadingDialog")
  @Description("")
  String ShowLoadingDialogProperties();

  @DefaultMessage("ShowScale")
  @Description("")
  String ShowScaleProperties();

  @DefaultMessage("ShowStatusBar")
  @Description("")
  String ShowStatusBarProperties();

  @DefaultMessage("ShowUser")
  @Description("")
  String ShowUserProperties();

  @DefaultMessage("ShowZoom")
  @Description("")
  String ShowZoomProperties();

  @DefaultMessage("SimpleSteps")
  @Description("")
  String SimpleStepsProperties();

  @DefaultMessage("Sizing")
  @Description("")
  String SizingProperties();

  @DefaultMessage("Source")
  @Description("")
  String SourceProperties();

  @DefaultMessage("SouthLatitude")
  @Description("")
  String SouthLatitudeProperties();

  @DefaultMessage("SpeechRate")
  @Description("")
  String SpeechRateProperties();

  @DefaultMessage("Speed")
  @Description("")
  String SpeedProperties();

  @DefaultMessage("StartLatitude")
  @Description("")
  String StartLatitudeProperties();

  @DefaultMessage("StartLocation")
  @Description("")
  String StartLocationProperties();

  @DefaultMessage("StartLongitude")
  @Description("")
  String StartLongitudeProperties();

  @DefaultMessage("StopBeforeDisconnect")
  @Description("")
  String StopBeforeDisconnectProperties();

  @DefaultMessage("StopDetectionTimeout")
  @Description("")
  String StopDetectionTimeoutProperties();

  @DefaultMessage("StrideLength")
  @Description("")
  String StrideLengthProperties();

  @DefaultMessage("StrokeColor")
  @Description("")
  String StrokeColorProperties();

  @DefaultMessage("StrokeOpacity")
  @Description("")
  String StrokeOpacityProperties();

  @DefaultMessage("StrokeWidth")
  @Description("")
  String StrokeWidthProperties();

  @DefaultMessage("TachoCountChangedEventEnabled")
  @Description("")
  String TachoCountChangedEventEnabledProperties();

  @DefaultMessage("Temperature")
  @Description("")
  String TemperatureProperties();

  @DefaultMessage("Text")
  @Description("")
  String TextProperties();

  @DefaultMessage("TextAlignment")
  @Description("")
  String TextAlignmentProperties();

  @DefaultMessage("TextColor")
  @Description("")
  String TextColorProperties();

  @DefaultMessage("TextSize")
  @Description("")
  String TextSizeProperties();

  @DefaultMessage("TextToWrite")
  @Description("")
  String TextToWriteProperties();

  @DefaultMessage("Theme")
  @Description("")
  String ThemeProperties();

  @DefaultMessage("ThumbColorActive")
  @Description("")
  String ThumbColorActiveProperties();

  @DefaultMessage("ThumbColorInactive")
  @Description("")
  String ThumbColorInactiveProperties();

  @DefaultMessage("ThumbEnabled")
  @Description("")
  String ThumbEnabledProperties();

  @DefaultMessage("ThumbPosition")
  @Description("")
  String ThumbPositionProperties();

  @DefaultMessage("TimeInterval")
  @Description("")
  String TimeIntervalProperties();

  @DefaultMessage("Timeout")
  @Description("")
  String TimeoutProperties();

  @DefaultMessage("TimerAlwaysFires")
  @Description("")
  String TimerAlwaysFiresProperties();

  @DefaultMessage("TimerEnabled")
  @Description("")
  String TimerEnabledProperties();

  @DefaultMessage("TimerInterval")
  @Description("")
  String TimerIntervalProperties();

  @DefaultMessage("Title")
  @Description("")
  String TitleProperties();

  @DefaultMessage("TitleVisible")
  @Description("")
  String TitleVisibleProperties();

  @DefaultMessage("Token")
  @Description("")
  String TokenProperties();

  @DefaultMessage("TopOfRange")
  @Description("")
  String TopOfRangeProperties();

  @DefaultMessage("TrackColorActive")
  @Description("")
  String TrackColorActiveProperties();

  @DefaultMessage("TrackColorInactive")
  @Description("")
  String TrackColorInactiveProperties();

  @DefaultMessage("TransportationMethod")
  @Description("")
  String TransportationMethodProperties();

  @DefaultMessage("TutorialURL")
  @Description("")
  String TutorialURLProperties();

  @DefaultMessage("TwitPic_API_Key")
  @Description("")
  String TwitPic_API_KeyProperties();

  @DefaultMessage("Type")
  @Description("")
  String TypeProperties();

  @DefaultMessage("Unit")
  @Description("")
  String UnitProperties();

  @DefaultMessage("Url")
  @Description("")
  String UrlProperties();

  @DefaultMessage("UseExternalScanner")
  @Description("")
  String UseExternalScannerProperties();

  @DefaultMessage("UseFront")
  @Description("")
  String UseFrontProperties();

  @DefaultMessage("UseGPS")
  @Description("")
  String UseGPSProperties();

  @DefaultMessage("UseLegacy")
  @Description("")
  String UseLegacyProperties();

  @DefaultMessage("UseSSL")
  @Description("")
  String UseSSLProperties();

  @DefaultMessage("UseServiceAuthentication")
  @Description("")
  String UseServiceAuthenticationProperties();

  @DefaultMessage("UserChoice")
  @Description("")
  String UserChoiceProperties();

  @DefaultMessage("UserEmailAddress")
  @Description("")
  String UserEmailAddressProperties();

  @DefaultMessage("UserId")
  @Description("")
  String UserIdProperties();

  @DefaultMessage("UserLatitude")
  @Description("")
  String UserLatitudeProperties();

  @DefaultMessage("UserLongitude")
  @Description("")
  String UserLongitudeProperties();

  @DefaultMessage("Username")
  @Description("")
  String UsernameProperties();

  @DefaultMessage("UsesLocation")
  @Description("")
  String UsesLocationProperties();

  @DefaultMessage("VersionCode")
  @Description("")
  String VersionCodeProperties();

  @DefaultMessage("VersionName")
  @Description("")
  String VersionNameProperties();

  @DefaultMessage("Visible")
  @Description("")
  String VisibleProperties();

  @DefaultMessage("Volume")
  @Description("")
  String VolumeProperties();

  @DefaultMessage("WalkSteps")
  @Description("")
  String WalkStepsProperties();

  @DefaultMessage("WebRTC")
  @Description("")
  String WebRTCProperties();

  @DefaultMessage("WebViewString")
  @Description("")
  String WebViewStringProperties();

  @DefaultMessage("WebViewer")
  @Description("")
  String WebViewerProperties();

  @DefaultMessage("WestLongitude")
  @Description("")
  String WestLongitudeProperties();

  @DefaultMessage("WheelDiameter")
  @Description("")
  String WheelDiameterProperties();

  @DefaultMessage("Width")
  @Description("")
  String WidthProperties();

  @DefaultMessage("WidthPercent")
  @Description("")
  String WidthPercentProperties();

  @DefaultMessage("WithinRangeEventEnabled")
  @Description("")
  String WithinRangeEventEnabledProperties();

  @DefaultMessage("WriteType")
  @Description("")
  String WriteTypeProperties();

  @DefaultMessage("X")
  @Description("")
  String XProperties();

  @DefaultMessage("XAccel")
  @Description("")
  String XAccelProperties();

  @DefaultMessage("XAngularVelocity")
  @Description("")
  String XAngularVelocityProperties();

  @DefaultMessage("XStrength")
  @Description("")
  String XStrengthProperties();

  @DefaultMessage("Y")
  @Description("")
  String YProperties();

  @DefaultMessage("YAccel")
  @Description("")
  String YAccelProperties();

  @DefaultMessage("YAngularVelocity")
  @Description("")
  String YAngularVelocityProperties();

  @DefaultMessage("YStrength")
  @Description("")
  String YStrengthProperties();

  @DefaultMessage("Year")
  @Description("")
  String YearProperties();

  @DefaultMessage("Z")
  @Description("")
  String ZProperties();

  @DefaultMessage("ZAccel")
  @Description("")
  String ZAccelProperties();

  @DefaultMessage("ZAngularVelocity")
  @Description("")
  String ZAngularVelocityProperties();

  @DefaultMessage("ZStrength")
  @Description("")
  String ZStrengthProperties();

  @DefaultMessage("ZoomLevel")
  @Description("")
  String ZoomLevelProperties();


  /* Methods */
  @DefaultMessage("AcceptConnection")
  @Description("")
  String AcceptConnectionMethods();

  @DefaultMessage("AcceptConnectionWithUUID")
  @Description("")
  String AcceptConnectionWithUUIDMethods();

  @DefaultMessage("AddDays")
  @Description("")
  String AddDaysMethods();

  @DefaultMessage("AddDuration")
  @Description("")
  String AddDurationMethods();

  @DefaultMessage("AddHours")
  @Description("")
  String AddHoursMethods();

  @DefaultMessage("AddMinutes")
  @Description("")
  String AddMinutesMethods();

  @DefaultMessage("AddMonths")
  @Description("")
  String AddMonthsMethods();

  @DefaultMessage("AddSeconds")
  @Description("")
  String AddSecondsMethods();

  @DefaultMessage("AddWeeks")
  @Description("")
  String AddWeeksMethods();

  @DefaultMessage("AddYears")
  @Description("")
  String AddYearsMethods();

  @DefaultMessage("AppendToFile")
  @Description("")
  String AppendToFileMethods();

  @DefaultMessage("AppendValue")
  @Description("")
  String AppendValueMethods();

  @DefaultMessage("AppendValueToList")
  @Description("")
  String AppendValueToListMethods();

  @DefaultMessage("AskForPermission")
  @Description("")
  String AskForPermissionMethods();

  @DefaultMessage("Authorize")
  @Description("")
  String AuthorizeMethods();

  @DefaultMessage("BearingToFeature")
  @Description("")
  String BearingToFeatureMethods();

  @DefaultMessage("BearingToPoint")
  @Description("")
  String BearingToPointMethods();

  @DefaultMessage("Bounce")
  @Description("")
  String BounceMethods();

  @DefaultMessage("Bounds")
  @Description("")
  String BoundsMethods();

  @DefaultMessage("BuildRequestData")
  @Description("")
  String BuildRequestDataMethods();

  @DefaultMessage("BytesAvailableToReceive")
  @Description("")
  String BytesAvailableToReceiveMethods();

  @DefaultMessage("CanGoBack")
  @Description("")
  String CanGoBackMethods();

  @DefaultMessage("CanGoForward")
  @Description("")
  String CanGoForwardMethods();

  @DefaultMessage("Center")
  @Description("")
  String CenterMethods();

  @DefaultMessage("Centroid")
  @Description("")
  String CentroidMethods();

  @DefaultMessage("CheckAuthorized")
  @Description("")
  String CheckAuthorizedMethods();

  @DefaultMessage("ClassifyImageData")
  @Description("")
  String ClassifyImageDataMethods();

  @DefaultMessage("ClassifyVideoData")
  @Description("")
  String ClassifyVideoDataMethods();

  @DefaultMessage("Clear")
  @Description("")
  String ClearMethods();

  @DefaultMessage("ClearAll")
  @Description("")
  String ClearAllMethods();

  @DefaultMessage("ClearCaches")
  @Description("")
  String ClearCachesMethods();

  @DefaultMessage("ClearCookies")
  @Description("")
  String ClearCookiesMethods();

  @DefaultMessage("ClearLocations")
  @Description("")
  String ClearLocationsMethods();

  @DefaultMessage("ClearTag")
  @Description("")
  String ClearTagMethods();

  @DefaultMessage("CloseSerial")
  @Description("")
  String CloseSerialMethods();

  @DefaultMessage("CloudConnected")
  @Description("")
  String CloudConnectedMethods();

  @DefaultMessage("CollidingWith")
  @Description("")
  String CollidingWithMethods();

  @DefaultMessage("Connect")
  @Description("")
  String ConnectMethods();

  @DefaultMessage("ConnectWithUUID")
  @Description("")
  String ConnectWithUUIDMethods();

  @DefaultMessage("CreateMarker")
  @Description("")
  String CreateMarkerMethods();

  @DefaultMessage("DayOfMonth")
  @Description("")
  String DayOfMonthMethods();

  @DefaultMessage("DeAuthorize")
  @Description("")
  String DeAuthorizeMethods();

  @DefaultMessage("Delete")
  @Description("")
  String DeleteMethods();

  @DefaultMessage("DeleteFile")
  @Description("")
  String DeleteFileMethods();

  @DefaultMessage("DirectMessage")
  @Description("")
  String DirectMessageMethods();

  @DefaultMessage("Disconnect")
  @Description("")
  String DisconnectMethods();

  @DefaultMessage("DismissProgressDialog")
  @Description("")
  String DismissProgressDialogMethods();

  @DefaultMessage("DisplayDropdown")
  @Description("")
  String DisplayDropdownMethods();

  @DefaultMessage("DistanceToFeature")
  @Description("")
  String DistanceToFeatureMethods();

  @DefaultMessage("DistanceToPoint")
  @Description("")
  String DistanceToPointMethods();

  @DefaultMessage("DoQuery")
  @Description("")
  String DoQueryMethods();

  @DefaultMessage("DoScan")
  @Description("")
  String DoScanMethods();

  @DefaultMessage("DownloadFile")
  @Description("")
  String DownloadFileMethods();

  @DefaultMessage("DrawArc")
  @Description("")
  String DrawArcMethods();

  @DefaultMessage("DrawCircle")
  @Description("")
  String DrawCircleMethods();

  @DefaultMessage("DrawIcon")
  @Description("")
  String DrawIconMethods();

  @DefaultMessage("DrawLine")
  @Description("")
  String DrawLineMethods();

  @DefaultMessage("DrawPoint")
  @Description("")
  String DrawPointMethods();

  @DefaultMessage("DrawRect")
  @Description("")
  String DrawRectMethods();

  @DefaultMessage("DrawShape")
  @Description("")
  String DrawShapeMethods();

  @DefaultMessage("DrawText")
  @Description("")
  String DrawTextMethods();

  @DefaultMessage("DrawTextAtAngle")
  @Description("")
  String DrawTextAtAngleMethods();

  @DefaultMessage("Duration")
  @Description("")
  String DurationMethods();

  @DefaultMessage("DurationToDays")
  @Description("")
  String DurationToDaysMethods();

  @DefaultMessage("DurationToHours")
  @Description("")
  String DurationToHoursMethods();

  @DefaultMessage("DurationToMinutes")
  @Description("")
  String DurationToMinutesMethods();

  @DefaultMessage("DurationToSeconds")
  @Description("")
  String DurationToSecondsMethods();

  @DefaultMessage("DurationToWeeks")
  @Description("")
  String DurationToWeeksMethods();

  @DefaultMessage("FeatureFromDescription")
  @Description("")
  String FeatureFromDescriptionMethods();

  @DefaultMessage("FillScreen")
  @Description("")
  String FillScreenMethods();

  @DefaultMessage("Follow")
  @Description("")
  String FollowMethods();

  @DefaultMessage("ForgetLogin")
  @Description("")
  String ForgetLoginMethods();

  @DefaultMessage("FormatDate")
  @Description("")
  String FormatDateMethods();

  @DefaultMessage("FormatDateTime")
  @Description("")
  String FormatDateTimeMethods();

  @DefaultMessage("FormatTime")
  @Description("")
  String FormatTimeMethods();

  @DefaultMessage("Get")
  @Description("")
  String GetMethods();

  @DefaultMessage("GetBackgroundPixelColor")
  @Description("")
  String GetBackgroundPixelColorMethods();

  @DefaultMessage("GetBatteryCurrent")
  @Description("")
  String GetBatteryCurrentMethods();

  @DefaultMessage("GetBatteryLevel")
  @Description("")
  String GetBatteryLevelMethods();

  @DefaultMessage("GetBatteryVoltage")
  @Description("")
  String GetBatteryVoltageMethods();

  @DefaultMessage("GetBrickName")
  @Description("")
  String GetBrickNameMethods();

  @DefaultMessage("GetColor")
  @Description("")
  String GetColorMethods();

  @DefaultMessage("GetColorCode")
  @Description("")
  String GetColorCodeMethods();

  @DefaultMessage("GetColorName")
  @Description("")
  String GetColorNameMethods();

  @DefaultMessage("GetCurrentProgramName")
  @Description("")
  String GetCurrentProgramNameMethods();

  @DefaultMessage("GetDistance")
  @Description("")
  String GetDistanceMethods();

  @DefaultMessage("GetDuration")
  @Description("")
  String GetDurationMethods();

  @DefaultMessage("GetFirmwareBuild")
  @Description("")
  String GetFirmwareBuildMethods();

  @DefaultMessage("GetFirmwareVersion")
  @Description("")
  String GetFirmwareVersionMethods();

  @DefaultMessage("GetHardwareVersion")
  @Description("")
  String GetHardwareVersionMethods();

  @DefaultMessage("GetInputValues")
  @Description("")
  String GetInputValuesMethods();

  @DefaultMessage("GetInstaller")
  @Description("")
  String GetInstallerMethods();

  @DefaultMessage("GetInstanceLists")
  @Description("")
  String GetInstanceListsMethods();

  @DefaultMessage("GetLightLevel")
  @Description("")
  String GetLightLevelMethods();

  @DefaultMessage("GetMessages")
  @Description("")
  String GetMessagesMethods();

  @DefaultMessage("GetMillis")
  @Description("")
  String GetMillisMethods();

  @DefaultMessage("GetOSBuild")
  @Description("")
  String GetOSBuildMethods();

  @DefaultMessage("GetOSVersion")
  @Description("")
  String GetOSVersionMethods();

  @DefaultMessage("GetOutputState")
  @Description("")
  String GetOutputStateMethods();

  @DefaultMessage("GetPixelColor")
  @Description("")
  String GetPixelColorMethods();

  @DefaultMessage("GetRows")
  @Description("")
  String GetRowsMethods();

  @DefaultMessage("GetRowsWithConditions")
  @Description("")
  String GetRowsWithConditionsMethods();

  @DefaultMessage("GetSensorValue")
  @Description("")
  String GetSensorValueMethods();

  @DefaultMessage("GetSoundLevel")
  @Description("")
  String GetSoundLevelMethods();

  @DefaultMessage("GetTachoCount")
  @Description("")
  String GetTachoCountMethods();

  @DefaultMessage("GetTagList")
  @Description("")
  String GetTagListMethods();

  @DefaultMessage("GetTags")
  @Description("")
  String GetTagsMethods();

  @DefaultMessage("GetText")
  @Description("")
  String GetTextMethods();

  @DefaultMessage("GetValue")
  @Description("")
  String GetValueMethods();

  @DefaultMessage("GetVersionName")
  @Description("")
  String GetVersionNameMethods();

  @DefaultMessage("GetWifiIpAddress")
  @Description("")
  String GetWifiIpAddressMethods();

  @DefaultMessage("GoBack")
  @Description("")
  String GoBackMethods();

  @DefaultMessage("GoForward")
  @Description("")
  String GoForwardMethods();

  @DefaultMessage("GoHome")
  @Description("")
  String GoHomeMethods();

  @DefaultMessage("GoToUrl")
  @Description("")
  String GoToUrlMethods();

  @DefaultMessage("HideInfobox")
  @Description("")
  String HideInfoboxMethods();

  @DefaultMessage("HideKeyboard")
  @Description("")
  String HideKeyboardMethods();

  @DefaultMessage("Hour")
  @Description("")
  String HourMethods();

  @DefaultMessage("HtmlTextDecode")
  @Description("")
  String HtmlTextDecodeMethods();

  @DefaultMessage("InitializeSerial")
  @Description("")
  String InitializeSerialMethods();

  @DefaultMessage("InsertRow")
  @Description("")
  String InsertRowMethods();

  @DefaultMessage("InstallationId")
  @Description("")
  String InstallationIdMethods();

  @DefaultMessage("Invite")
  @Description("")
  String InviteMethods();

  @DefaultMessage("IsDevicePaired")
  @Description("")
  String IsDevicePairedMethods();

  @DefaultMessage("IsPressed")
  @Description("")
  String IsPressedMethods();

  @DefaultMessage("JsonObjectEncode")
  @Description("")
  String JsonObjectEncodeMethods();

  @DefaultMessage("JsonTextDecode")
  @Description("")
  String JsonTextDecodeMethods();

  @DefaultMessage("JsonTextDecodeWithDictionaries")
  @Description("")
  String JsonTextDecodeWithDictionariesMethods();

  @DefaultMessage("KeepAlive")
  @Description("")
  String KeepAliveMethods();

  @DefaultMessage("LatitudeFromAddress")
  @Description("")
  String LatitudeFromAddressMethods();

  @DefaultMessage("LaunchPicker")
  @Description("")
  String LaunchPickerMethods();

  @DefaultMessage("LeaveInstance")
  @Description("")
  String LeaveInstanceMethods();

  @DefaultMessage("ListFiles")
  @Description("")
  String ListFilesMethods();

  @DefaultMessage("LoadFromURL")
  @Description("")
  String LoadFromURLMethods();

  @DefaultMessage("LogError")
  @Description("")
  String LogErrorMethods();

  @DefaultMessage("LogInfo")
  @Description("")
  String LogInfoMethods();

  @DefaultMessage("LogWarning")
  @Description("")
  String LogWarningMethods();

  @DefaultMessage("LongitudeFromAddress")
  @Description("")
  String LongitudeFromAddressMethods();

  @DefaultMessage("LsGetStatus")
  @Description("")
  String LsGetStatusMethods();

  @DefaultMessage("LsRead")
  @Description("")
  String LsReadMethods();

  @DefaultMessage("LsWrite")
  @Description("")
  String LsWriteMethods();

  @DefaultMessage("MakeDate")
  @Description("")
  String MakeDateMethods();

  @DefaultMessage("MakeInstant")
  @Description("")
  String MakeInstantMethods();

  @DefaultMessage("MakeInstantFromMillis")
  @Description("")
  String MakeInstantFromMillisMethods();

  @DefaultMessage("MakeInstantFromParts")
  @Description("")
  String MakeInstantFromPartsMethods();

  @DefaultMessage("MakeNewInstance")
  @Description("")
  String MakeNewInstanceMethods();

  @DefaultMessage("MakePhoneCall")
  @Description("")
  String MakePhoneCallMethods();

  @DefaultMessage("MakePhoneCallDirect")
  @Description("")
  String MakePhoneCallDirectMethods();

  @DefaultMessage("MakeTime")
  @Description("")
  String MakeTimeMethods();

  @DefaultMessage("MessageRead")
  @Description("")
  String MessageReadMethods();

  @DefaultMessage("MessageWrite")
  @Description("")
  String MessageWriteMethods();

  @DefaultMessage("Minute")
  @Description("")
  String MinuteMethods();

  @DefaultMessage("Month")
  @Description("")
  String MonthMethods();

  @DefaultMessage("MonthName")
  @Description("")
  String MonthNameMethods();

  @DefaultMessage("MoveBackward")
  @Description("")
  String MoveBackwardMethods();

  @DefaultMessage("MoveBackwardIndefinitely")
  @Description("")
  String MoveBackwardIndefinitelyMethods();

  @DefaultMessage("MoveForward")
  @Description("")
  String MoveForwardMethods();

  @DefaultMessage("MoveForwardIndefinitely")
  @Description("")
  String MoveForwardIndefinitelyMethods();

  @DefaultMessage("MoveIntoBounds")
  @Description("")
  String MoveIntoBoundsMethods();

  @DefaultMessage("MoveTo")
  @Description("")
  String MoveToMethods();

  @DefaultMessage("Now")
  @Description("")
  String NowMethods();

  @DefaultMessage("Open")
  @Description("")
  String OpenMethods();

  @DefaultMessage("OpenSerial")
  @Description("")
  String OpenSerialMethods();

  @DefaultMessage("PanTo")
  @Description("")
  String PanToMethods();

  @DefaultMessage("Pause")
  @Description("")
  String PauseMethods();

  @DefaultMessage("Play")
  @Description("")
  String PlayMethods();

  @DefaultMessage("PlaySoundFile")
  @Description("")
  String PlaySoundFileMethods();

  @DefaultMessage("PlayTone")
  @Description("")
  String PlayToneMethods();

  @DefaultMessage("PointInDirection")
  @Description("")
  String PointInDirectionMethods();

  @DefaultMessage("PointTowards")
  @Description("")
  String PointTowardsMethods();

  @DefaultMessage("PostFile")
  @Description("")
  String PostFileMethods();

  @DefaultMessage("PostMedia")
  @Description("")
  String PostMediaMethods();

  @DefaultMessage("PostText")
  @Description("")
  String PostTextMethods();

  @DefaultMessage("PostTextWithEncoding")
  @Description("")
  String PostTextWithEncodingMethods();

  @DefaultMessage("PrintSerial")
  @Description("")
  String PrintSerialMethods();

  @DefaultMessage("PutFile")
  @Description("")
  String PutFileMethods();

  @DefaultMessage("PutText")
  @Description("")
  String PutTextMethods();

  @DefaultMessage("PutTextWithEncoding")
  @Description("")
  String PutTextWithEncodingMethods();

  @DefaultMessage("ReadFrom")
  @Description("")
  String ReadFromMethods();

  @DefaultMessage("ReadSerial")
  @Description("")
  String ReadSerialMethods();

  @DefaultMessage("ReceiveSigned1ByteNumber")
  @Description("")
  String ReceiveSigned1ByteNumberMethods();

  @DefaultMessage("ReceiveSigned2ByteNumber")
  @Description("")
  String ReceiveSigned2ByteNumberMethods();

  @DefaultMessage("ReceiveSigned4ByteNumber")
  @Description("")
  String ReceiveSigned4ByteNumberMethods();

  @DefaultMessage("ReceiveSignedBytes")
  @Description("")
  String ReceiveSignedBytesMethods();

  @DefaultMessage("ReceiveText")
  @Description("")
  String ReceiveTextMethods();

  @DefaultMessage("ReceiveUnsigned1ByteNumber")
  @Description("")
  String ReceiveUnsigned1ByteNumberMethods();

  @DefaultMessage("ReceiveUnsigned2ByteNumber")
  @Description("")
  String ReceiveUnsigned2ByteNumberMethods();

  @DefaultMessage("ReceiveUnsigned4ByteNumber")
  @Description("")
  String ReceiveUnsigned4ByteNumberMethods();

  @DefaultMessage("ReceiveUnsignedBytes")
  @Description("")
  String ReceiveUnsignedBytesMethods();

  @DefaultMessage("RecordVideo")
  @Description("")
  String RecordVideoMethods();

  @DefaultMessage("Reload")
  @Description("")
  String ReloadMethods();

  @DefaultMessage("RemoveFirst")
  @Description("")
  String RemoveFirstMethods();

  @DefaultMessage("RemoveFirstFromList")
  @Description("")
  String RemoveFirstFromListMethods();

  @DefaultMessage("RequestBallot")
  @Description("")
  String RequestBallotMethods();

  @DefaultMessage("RequestDirectMessages")
  @Description("")
  String RequestDirectMessagesMethods();

  @DefaultMessage("RequestDirections")
  @Description("")
  String RequestDirectionsMethods();

  @DefaultMessage("RequestFocus")
  @Description("")
  String RequestFocusMethods();

  @DefaultMessage("RequestFollowers")
  @Description("")
  String RequestFollowersMethods();

  @DefaultMessage("RequestFriendTimeline")
  @Description("")
  String RequestFriendTimelineMethods();

  @DefaultMessage("RequestMentions")
  @Description("")
  String RequestMentionsMethods();

  @DefaultMessage("RequestTranslation")
  @Description("")
  String RequestTranslationMethods();

  @DefaultMessage("Reset")
  @Description("")
  String ResetMethods();

  @DefaultMessage("ResetInputScaledValue")
  @Description("")
  String ResetInputScaledValueMethods();

  @DefaultMessage("ResetMotorPosition")
  @Description("")
  String ResetMotorPositionMethods();

  @DefaultMessage("ResetTachoCount")
  @Description("")
  String ResetTachoCountMethods();

  @DefaultMessage("ResolveActivity")
  @Description("")
  String ResolveActivityMethods();

  @DefaultMessage("Resume")
  @Description("")
  String ResumeMethods();

  @DefaultMessage("RotateInDistance")
  @Description("")
  String RotateInDistanceMethods();

  @DefaultMessage("RotateInDuration")
  @Description("")
  String RotateInDurationMethods();

  @DefaultMessage("RotateInTachoCounts")
  @Description("")
  String RotateInTachoCountsMethods();

  @DefaultMessage("RotateIndefinitely")
  @Description("")
  String RotateIndefinitelyMethods();

  @DefaultMessage("RotateSyncInDistance")
  @Description("")
  String RotateSyncInDistanceMethods();

  @DefaultMessage("RotateSyncInDuration")
  @Description("")
  String RotateSyncInDurationMethods();

  @DefaultMessage("RotateSyncInTachoCounts")
  @Description("")
  String RotateSyncInTachoCountsMethods();

  @DefaultMessage("RotateSyncIndefinitely")
  @Description("")
  String RotateSyncIndefinitelyMethods();

  @DefaultMessage("RunJavaScript")
  @Description("")
  String RunJavaScriptMethods();

  @DefaultMessage("Save")
  @Description("")
  String SaveMethods();

  @DefaultMessage("SaveAs")
  @Description("")
  String SaveAsMethods();

  @DefaultMessage("SaveFile")
  @Description("")
  String SaveFileMethods();

  @DefaultMessage("SdkLevel")
  @Description("")
  String SdkLevelMethods();

  @DefaultMessage("SearchTwitter")
  @Description("")
  String SearchTwitterMethods();

  @DefaultMessage("Second")
  @Description("")
  String SecondMethods();

  @DefaultMessage("SeekTo")
  @Description("")
  String SeekToMethods();

  @DefaultMessage("Send1ByteNumber")
  @Description("")
  String Send1ByteNumberMethods();

  @DefaultMessage("Send2ByteNumber")
  @Description("")
  String Send2ByteNumberMethods();

  @DefaultMessage("Send4ByteNumber")
  @Description("")
  String Send4ByteNumberMethods();

  @DefaultMessage("SendBallot")
  @Description("")
  String SendBallotMethods();

  @DefaultMessage("SendBytes")
  @Description("")
  String SendBytesMethods();

  @DefaultMessage("SendMessage")
  @Description("")
  String SendMessageMethods();

  @DefaultMessage("SendMessageDirect")
  @Description("")
  String SendMessageDirectMethods();

  @DefaultMessage("SendQuery")
  @Description("")
  String SendQueryMethods();

  @DefaultMessage("SendText")
  @Description("")
  String SendTextMethods();

  @DefaultMessage("ServerCommand")
  @Description("")
  String ServerCommandMethods();

  @DefaultMessage("SetAmbientMode")
  @Description("")
  String SetAmbientModeMethods();

  @DefaultMessage("SetAngleMode")
  @Description("")
  String SetAngleModeMethods();

  @DefaultMessage("SetBackgroundPixelColor")
  @Description("")
  String SetBackgroundPixelColorMethods();

  @DefaultMessage("SetBrickName")
  @Description("")
  String SetBrickNameMethods();

  @DefaultMessage("SetCenter")
  @Description("")
  String SetCenterMethods();

  @DefaultMessage("SetCmUnit")
  @Description("")
  String SetCmUnitMethods();

  @DefaultMessage("SetColorMode")
  @Description("")
  String SetColorModeMethods();

  @DefaultMessage("SetDateToDisplay")
  @Description("")
  String SetDateToDisplayMethods();

  @DefaultMessage("SetDateToDisplayFromInstant")
  @Description("")
  String SetDateToDisplayFromInstantMethods();

  @DefaultMessage("SetInchUnit")
  @Description("")
  String SetInchUnitMethods();

  @DefaultMessage("SetInputMode")
  @Description("")
  String SetInputModeMethods();

  @DefaultMessage("SetInstance")
  @Description("")
  String SetInstanceMethods();

  @DefaultMessage("SetLeader")
  @Description("")
  String SetLeaderMethods();

  @DefaultMessage("SetLocation")
  @Description("")
  String SetLocationMethods();

  @DefaultMessage("SetOutputState")
  @Description("")
  String SetOutputStateMethods();

  @DefaultMessage("SetRateMode")
  @Description("")
  String SetRateModeMethods();

  @DefaultMessage("SetReflectedMode")
  @Description("")
  String SetReflectedModeMethods();

  @DefaultMessage("SetTimeToDisplay")
  @Description("")
  String SetTimeToDisplayMethods();

  @DefaultMessage("SetTimeToDisplayFromInstant")
  @Description("")
  String SetTimeToDisplayFromInstantMethods();

  @DefaultMessage("ShareFile")
  @Description("")
  String ShareFileMethods();

  @DefaultMessage("ShareFileWithMessage")
  @Description("")
  String ShareFileWithMessageMethods();

  @DefaultMessage("ShareMessage")
  @Description("")
  String ShareMessageMethods();

  @DefaultMessage("ShowAlert")
  @Description("")
  String ShowAlertMethods();

  @DefaultMessage("ShowChooseDialog")
  @Description("")
  String ShowChooseDialogMethods();

  @DefaultMessage("ShowInfobox")
  @Description("")
  String ShowInfoboxMethods();

  @DefaultMessage("ShowMessageDialog")
  @Description("")
  String ShowMessageDialogMethods();

  @DefaultMessage("ShowPasswordDialog")
  @Description("")
  String ShowPasswordDialogMethods();

  @DefaultMessage("ShowProgressDialog")
  @Description("")
  String ShowProgressDialogMethods();

  @DefaultMessage("ShowTextDialog")
  @Description("")
  String ShowTextDialogMethods();

  @DefaultMessage("Speak")
  @Description("")
  String SpeakMethods();

  @DefaultMessage("Start")
  @Description("")
  String StartMethods();

  @DefaultMessage("StartActivity")
  @Description("")
  String StartActivityMethods();

  @DefaultMessage("StartContinuousClassification")
  @Description("")
  String StartContinuousClassificationMethods();

  @DefaultMessage("StartProgram")
  @Description("")
  String StartProgramMethods();

  @DefaultMessage("Stop")
  @Description("")
  String StopMethods();

  @DefaultMessage("StopAccepting")
  @Description("")
  String StopAcceptingMethods();

  @DefaultMessage("StopContinuousClassification")
  @Description("")
  String StopContinuousClassificationMethods();

  @DefaultMessage("StopFollowing")
  @Description("")
  String StopFollowingMethods();

  @DefaultMessage("StopLoading")
  @Description("")
  String StopLoadingMethods();

  @DefaultMessage("StopProgram")
  @Description("")
  String StopProgramMethods();

  @DefaultMessage("StopSound")
  @Description("")
  String StopSoundMethods();

  @DefaultMessage("StopSoundPlayback")
  @Description("")
  String StopSoundPlaybackMethods();

  @DefaultMessage("StoreValue")
  @Description("")
  String StoreValueMethods();

  @DefaultMessage("SystemTime")
  @Description("")
  String SystemTimeMethods();

  @DefaultMessage("TakePicture")
  @Description("")
  String TakePictureMethods();

  @DefaultMessage("ToggleCameraFacingMode")
  @Description("")
  String ToggleCameraFacingModeMethods();

  @DefaultMessage("ToggleDirection")
  @Description("")
  String ToggleDirectionMethods();

  @DefaultMessage("TurnClockwiseIndefinitely")
  @Description("")
  String TurnClockwiseIndefinitelyMethods();

  @DefaultMessage("TurnCounterClockwiseIndefinitely")
  @Description("")
  String TurnCounterClockwiseIndefinitelyMethods();

  @DefaultMessage("Tweet")
  @Description("")
  String TweetMethods();

  @DefaultMessage("TweetWithImage")
  @Description("")
  String TweetWithImageMethods();

  @DefaultMessage("Unauthenticate")
  @Description("")
  String UnauthenticateMethods();

  @DefaultMessage("UriDecode")
  @Description("")
  String UriDecodeMethods();

  @DefaultMessage("UriEncode")
  @Description("")
  String UriEncodeMethods();

  @DefaultMessage("Vibrate")
  @Description("")
  String VibrateMethods();

  @DefaultMessage("ViewContact")
  @Description("")
  String ViewContactMethods();

  @DefaultMessage("Weekday")
  @Description("")
  String WeekdayMethods();

  @DefaultMessage("WeekdayName")
  @Description("")
  String WeekdayNameMethods();

  @DefaultMessage("WriteSerial")
  @Description("")
  String WriteSerialMethods();

  @DefaultMessage("XMLTextDecode")
  @Description("")
  String XMLTextDecodeMethods();

  @DefaultMessage("XMLTextDecodeAsDictionary")
  @Description("")
  String XMLTextDecodeAsDictionaryMethods();

  @DefaultMessage("Year")
  @Description("")
  String YearMethods();

  @DefaultMessage("doFault")
  @Description("")
  String doFaultMethods();

  @DefaultMessage("installURL")
  @Description("")
  String installURLMethods();

  @DefaultMessage("isConnected")
  @Description("")
  String isConnectedMethods();

  @DefaultMessage("isDirect")
  @Description("")
  String isDirectMethods();

  @DefaultMessage("setAssetsLoaded")
  @Description("")
  String setAssetsLoadedMethods();

  @DefaultMessage("setHmacSeedReturnCode")
  @Description("")
  String setHmacSeedReturnCodeMethods();

  @DefaultMessage("shutdown")
  @Description("")
  String shutdownMethods();

  @DefaultMessage("startHTTPD")
  @Description("")
  String startHTTPDMethods();

  @DefaultMessage("startWebRTC")
  @Description("")
  String startWebRTCMethods();


  /* Events */
  @DefaultMessage("AboveRange")
  @Description("")
  String AboveRangeEvents();

  @DefaultMessage("AccelerationChanged")
  @Description("")
  String AccelerationChangedEvents();

  @DefaultMessage("ActivityCanceled")
  @Description("")
  String ActivityCanceledEvents();

  @DefaultMessage("AfterActivity")
  @Description("")
  String AfterActivityEvents();

  @DefaultMessage("AfterChoosing")
  @Description("")
  String AfterChoosingEvents();

  @DefaultMessage("AfterDateSet")
  @Description("")
  String AfterDateSetEvents();

  @DefaultMessage("AfterFileSaved")
  @Description("")
  String AfterFileSavedEvents();

  @DefaultMessage("AfterGettingText")
  @Description("")
  String AfterGettingTextEvents();

  @DefaultMessage("AfterPicking")
  @Description("")
  String AfterPickingEvents();

  @DefaultMessage("AfterPicture")
  @Description("")
  String AfterPictureEvents();

  @DefaultMessage("AfterRecording")
  @Description("")
  String AfterRecordingEvents();

  @DefaultMessage("AfterScan")
  @Description("")
  String AfterScanEvents();

  @DefaultMessage("AfterSelecting")
  @Description("")
  String AfterSelectingEvents();

  @DefaultMessage("AfterSoundRecorded")
  @Description("")
  String AfterSoundRecordedEvents();

  @DefaultMessage("AfterSpeaking")
  @Description("")
  String AfterSpeakingEvents();

  @DefaultMessage("AfterTextInput")
  @Description("")
  String AfterTextInputEvents();

  @DefaultMessage("AfterTimeSet")
  @Description("")
  String AfterTimeSetEvents();

  @DefaultMessage("AirPressureChanged")
  @Description("")
  String AirPressureChangedEvents();

  @DefaultMessage("BackPressed")
  @Description("")
  String BackPressedEvents();

  @DefaultMessage("BeforeGettingText")
  @Description("")
  String BeforeGettingTextEvents();

  @DefaultMessage("BeforePageLoad")
  @Description("")
  String BeforePageLoadEvents();

  @DefaultMessage("BeforePicking")
  @Description("")
  String BeforePickingEvents();

  @DefaultMessage("BeforeSpeaking")
  @Description("")
  String BeforeSpeakingEvents();

  @DefaultMessage("BelowRange")
  @Description("")
  String BelowRangeEvents();

  @DefaultMessage("BoundsChange")
  @Description("")
  String BoundsChangeEvents();

  @DefaultMessage("CalibrationFailed")
  @Description("")
  String CalibrationFailedEvents();

  @DefaultMessage("Changed")
  @Description("")
  String ChangedEvents();

  @DefaultMessage("ChoosingCanceled")
  @Description("")
  String ChoosingCanceledEvents();

  @DefaultMessage("ClassifierReady")
  @Description("")
  String ClassifierReadyEvents();

  @DefaultMessage("Click")
  @Description("")
  String ClickEvents();

  @DefaultMessage("CloudDBError")
  @Description("")
  String CloudDBErrorEvents();

  @DefaultMessage("CollidedWith")
  @Description("")
  String CollidedWithEvents();

  @DefaultMessage("ColorChanged")
  @Description("")
  String ColorChangedEvents();

  @DefaultMessage("Completed")
  @Description("")
  String CompletedEvents();

  @DefaultMessage("ConnectionAccepted")
  @Description("")
  String ConnectionAcceptedEvents();

  @DefaultMessage("DataChanged")
  @Description("")
  String DataChangedEvents();

  @DefaultMessage("DirectMessagesReceived")
  @Description("")
  String DirectMessagesReceivedEvents();

  @DefaultMessage("DoubleTapAtPoint")
  @Description("")
  String DoubleTapAtPointEvents();

  @DefaultMessage("Drag")
  @Description("")
  String DragEvents();

  @DefaultMessage("Dragged")
  @Description("")
  String DraggedEvents();

  @DefaultMessage("EdgeReached")
  @Description("")
  String EdgeReachedEvents();

  @DefaultMessage("Error")
  @Description("")
  String ErrorEvents();

  @DefaultMessage("ErrorOccurred")
  @Description("")
  String ErrorOccurredEvents();

  @DefaultMessage("FeatureClick")
  @Description("")
  String FeatureClickEvents();

  @DefaultMessage("FeatureDrag")
  @Description("")
  String FeatureDragEvents();

  @DefaultMessage("FeatureLongClick")
  @Description("")
  String FeatureLongClickEvents();

  @DefaultMessage("FeatureStartDrag")
  @Description("")
  String FeatureStartDragEvents();

  @DefaultMessage("FeatureStopDrag")
  @Description("")
  String FeatureStopDragEvents();

  @DefaultMessage("FirebaseError")
  @Description("")
  String FirebaseErrorEvents();

  @DefaultMessage("FirstRemoved")
  @Description("")
  String FirstRemovedEvents();

  @DefaultMessage("Flung")
  @Description("")
  String FlungEvents();

  @DefaultMessage("FollowersReceived")
  @Description("")
  String FollowersReceivedEvents();

  @DefaultMessage("FriendTimelineReceived")
  @Description("")
  String FriendTimelineReceivedEvents();

  @DefaultMessage("FunctionCompleted")
  @Description("")
  String FunctionCompletedEvents();

  @DefaultMessage("GPSAvailable")
  @Description("")
  String GPSAvailableEvents();

  @DefaultMessage("GPSLost")
  @Description("")
  String GPSLostEvents();

  @DefaultMessage("GotBallot")
  @Description("")
  String GotBallotEvents();

  @DefaultMessage("GotBallotConfirmation")
  @Description("")
  String GotBallotConfirmationEvents();

  @DefaultMessage("GotClassification")
  @Description("")
  String GotClassificationEvents();

  @DefaultMessage("GotDirections")
  @Description("")
  String GotDirectionsEvents();

  @DefaultMessage("GotFeatures")
  @Description("")
  String GotFeaturesEvents();

  @DefaultMessage("GotFile")
  @Description("")
  String GotFileEvents();

  @DefaultMessage("GotFocus")
  @Description("")
  String GotFocusEvents();

  @DefaultMessage("GotMessage")
  @Description("")
  String GotMessageEvents();

  @DefaultMessage("GotResult")
  @Description("")
  String GotResultEvents();

  @DefaultMessage("GotText")
  @Description("")
  String GotTextEvents();

  @DefaultMessage("GotTranslation")
  @Description("")
  String GotTranslationEvents();

  @DefaultMessage("GotValue")
  @Description("")
  String GotValueEvents();

  @DefaultMessage("GyroscopeChanged")
  @Description("")
  String GyroscopeChangedEvents();

  @DefaultMessage("HumidityChanged")
  @Description("")
  String HumidityChangedEvents();

  @DefaultMessage("IncomingCallAnswered")
  @Description("")
  String IncomingCallAnsweredEvents();

  @DefaultMessage("Info")
  @Description("")
  String InfoEvents();

  @DefaultMessage("Initialize")
  @Description("")
  String InitializeEvents();

  @DefaultMessage("InstanceIdChanged")
  @Description("")
  String InstanceIdChangedEvents();

  @DefaultMessage("InvalidPoint")
  @Description("")
  String InvalidPointEvents();

  @DefaultMessage("Invited")
  @Description("")
  String InvitedEvents();

  @DefaultMessage("IsAuthorized")
  @Description("")
  String IsAuthorizedEvents();

  @DefaultMessage("LightChanged")
  @Description("")
  String LightChangedEvents();

  @DefaultMessage("LoadError")
  @Description("")
  String LoadErrorEvents();

  @DefaultMessage("LocationChanged")
  @Description("")
  String LocationChangedEvents();

  @DefaultMessage("LongClick")
  @Description("")
  String LongClickEvents();

  @DefaultMessage("LongPressAtPoint")
  @Description("")
  String LongPressAtPointEvents();

  @DefaultMessage("LostFocus")
  @Description("")
  String LostFocusEvents();

  @DefaultMessage("MagneticChanged")
  @Description("")
  String MagneticChangedEvents();

  @DefaultMessage("MediaStored")
  @Description("")
  String MediaStoredEvents();

  @DefaultMessage("MentionsReceived")
  @Description("")
  String MentionsReceivedEvents();

  @DefaultMessage("MessageReceived")
  @Description("")
  String MessageReceivedEvents();

  @DefaultMessage("NewInstanceMade")
  @Description("")
  String NewInstanceMadeEvents();

  @DefaultMessage("NewLeader")
  @Description("")
  String NewLeaderEvents();

  @DefaultMessage("NoLongerCollidingWith")
  @Description("")
  String NoLongerCollidingWithEvents();

  @DefaultMessage("NoOpenPoll")
  @Description("")
  String NoOpenPollEvents();

  @DefaultMessage("OnSettings")
  @Description("")
  String OnSettingsEvents();

  @DefaultMessage("OrientationChanged")
  @Description("")
  String OrientationChangedEvents();

  @DefaultMessage("OtherPlayerStarted")
  @Description("")
  String OtherPlayerStartedEvents();

  @DefaultMessage("OtherScreenClosed")
  @Description("")
  String OtherScreenClosedEvents();

  @DefaultMessage("PageLoaded")
  @Description("")
  String PageLoadedEvents();

  @DefaultMessage("PermissionDenied")
  @Description("")
  String PermissionDeniedEvents();

  @DefaultMessage("PermissionGranted")
  @Description("")
  String PermissionGrantedEvents();

  @DefaultMessage("PhoneCallEnded")
  @Description("")
  String PhoneCallEndedEvents();

  @DefaultMessage("PhoneCallStarted")
  @Description("")
  String PhoneCallStartedEvents();

  @DefaultMessage("PlayerJoined")
  @Description("")
  String PlayerJoinedEvents();

  @DefaultMessage("PlayerLeft")
  @Description("")
  String PlayerLeftEvents();

  @DefaultMessage("PositionChanged")
  @Description("")
  String PositionChangedEvents();

  @DefaultMessage("Pressed")
  @Description("")
  String PressedEvents();

  @DefaultMessage("ProximityChanged")
  @Description("")
  String ProximityChangedEvents();

  @DefaultMessage("Ready")
  @Description("")
  String ReadyEvents();

  @DefaultMessage("Released")
  @Description("")
  String ReleasedEvents();

  @DefaultMessage("ScreenOrientationChanged")
  @Description("")
  String ScreenOrientationChangedEvents();

  @DefaultMessage("SearchSuccessful")
  @Description("")
  String SearchSuccessfulEvents();

  @DefaultMessage("SensorValueChanged")
  @Description("")
  String SensorValueChangedEvents();

  @DefaultMessage("ServerCommandFailure")
  @Description("")
  String ServerCommandFailureEvents();

  @DefaultMessage("ServerCommandSuccess")
  @Description("")
  String ServerCommandSuccessEvents();

  @DefaultMessage("Shaking")
  @Description("")
  String ShakingEvents();

  @DefaultMessage("SimpleStep")
  @Description("")
  String SimpleStepEvents();

  @DefaultMessage("StartDrag")
  @Description("")
  String StartDragEvents();

  @DefaultMessage("StartedMoving")
  @Description("")
  String StartedMovingEvents();

  @DefaultMessage("StartedRecording")
  @Description("")
  String StartedRecordingEvents();

  @DefaultMessage("StatusChanged")
  @Description("")
  String StatusChangedEvents();

  @DefaultMessage("StopDrag")
  @Description("")
  String StopDragEvents();

  @DefaultMessage("StoppedMoving")
  @Description("")
  String StoppedMovingEvents();

  @DefaultMessage("StoppedRecording")
  @Description("")
  String StoppedRecordingEvents();

  @DefaultMessage("TachoCountChanged")
  @Description("")
  String TachoCountChangedEvents();

  @DefaultMessage("TagList")
  @Description("")
  String TagListEvents();

  @DefaultMessage("TagRead")
  @Description("")
  String TagReadEvents();

  @DefaultMessage("TagWritten")
  @Description("")
  String TagWrittenEvents();

  @DefaultMessage("TapAtPoint")
  @Description("")
  String TapAtPointEvents();

  @DefaultMessage("TemperatureChanged")
  @Description("")
  String TemperatureChangedEvents();

  @DefaultMessage("TextInputCanceled")
  @Description("")
  String TextInputCanceledEvents();

  @DefaultMessage("TimedOut")
  @Description("")
  String TimedOutEvents();

  @DefaultMessage("Timer")
  @Description("")
  String TimerEvents();

  @DefaultMessage("TouchDown")
  @Description("")
  String TouchDownEvents();

  @DefaultMessage("TouchUp")
  @Description("")
  String TouchUpEvents();

  @DefaultMessage("Touched")
  @Description("")
  String TouchedEvents();

  @DefaultMessage("UserEmailAddressSet")
  @Description("")
  String UserEmailAddressSetEvents();

  @DefaultMessage("ValueStored")
  @Description("")
  String ValueStoredEvents();

  @DefaultMessage("WalkStep")
  @Description("")
  String WalkStepEvents();

  @DefaultMessage("WebServiceError")
  @Description("")
  String WebServiceErrorEvents();

  @DefaultMessage("WebViewStringChange")
  @Description("")
  String WebViewStringChangeEvents();

  @DefaultMessage("WithinRange")
  @Description("")
  String WithinRangeEvents();

  @DefaultMessage("ZoomChange")
  @Description("")
  String ZoomChangeEvents();

  @DefaultMessage("Information about the screen. It appears when \"About this Application\" is selected from the system menu. Use it to inform people about your app. In multiple screen apps, each screen has its own AboutScreen info.")
  @Description("")
  String AboutScreenPropertyDescriptions();

  @DefaultMessage("Indicates the absolute strength of the field.")
  @Description("")
  String AbsoluteStrengthPropertyDescriptions();

  @DefaultMessage("Indicates the acceleration changed in the X, Y, and/or Z dimensions.")
  @Description("")
  String AccelerationChangedEventDescriptions();

  @DefaultMessage("Returns whether the accelerometer is available on the device.")
  @Description("")
  String AccelerometerSensor__AvailablePropertyDescriptions();

  @DefaultMessage("If true, the sensor will generate events. Otherwise, no events are generated even if the device is accelerated or shaken.")
  @Description("")
  String AccelerometerSensor__EnabledPropertyDescriptions();

  @DefaultMessage("Prior to the release that added this property the AccelerometerSensor component passed through sensor values directly as received from the Android system. However these values do not compensate for tablets that default to Landscape mode, requiring the MIT App Inventor programmer to compensate. However compensating would result in incorrect results in Portrait mode devices such as phones. We now detect Landscape mode tablets and perform the compensation. However if your project is already compensating for the change, you will now get incorrect results. Although our preferred solution is for you to update your project, you can also just set this property to “true” and our compensation code will be deactivated. Note: We recommend that you update your project as we may remove this property in a future release.")
  @Description("")
  String AccelerometerSensor__LegacyModePropertyDescriptions();

  @DefaultMessage("The minimum interval, in milliseconds, between phone shakes")
  @Description("")
  String AccelerometerSensor__MinimumIntervalPropertyDescriptions();

  @DefaultMessage("This is the accent color used for highlights and other user interface accents.")
  @Description("")
  String AccentColorPropertyDescriptions();

  @DefaultMessage("Accept an incoming connection with the Serial Port Profile (SPP).")
  @Description("")
  String AcceptConnectionMethodDescriptions();

  @DefaultMessage("Accept an incoming connection with a specific UUID.")
  @Description("")
  String AcceptConnectionWithUUIDMethodDescriptions();

  @DefaultMessage("The most recent measure of accuracy, in meters. If no value is available, 0 will be returned.")
  @Description("")
  String AccuracyPropertyDescriptions();

  @DefaultMessage("Property for ActionBar")
  @Description("")
  String ActionBarPropertyDescriptions();

  @DefaultMessage("Returns the action that will be used to start the activity.")
  @Description("")
  String ActionPropertyDescriptions();

  @DefaultMessage("Event raised if this ActivityStarter returns because the activity was canceled.")
  @Description("")
  String ActivityCanceledEventDescriptions();

  @DefaultMessage("Returns the class part of the specific component that will be started.")
  @Description("")
  String ActivityClassPropertyDescriptions();

  @DefaultMessage("The ActivityError event is no longer used. Please use the Screen.ErrorOccurred event instead.")
  @Description("")
  String ActivityErrorEventDescriptions();

  @DefaultMessage("Returns the package part of the specific component that will be started.")
  @Description("")
  String ActivityPackagePropertyDescriptions();

  @DefaultMessage("Returns the result from the activity.")
  @Description("")
  String ActivityStarter__ResultPropertyDescriptions();

  @DefaultMessage("Returns an instant in time some days after the given instant.")
  @Description("")
  String AddDaysMethodDescriptions();

  @DefaultMessage("Returns an instant in time some duration after the argument")
  @Description("")
  String AddDurationMethodDescriptions();

  @DefaultMessage("Returns an instant in time some hours after the given instant.")
  @Description("")
  String AddHoursMethodDescriptions();

  @DefaultMessage("Returns an instant in time some minutes after the given instant.")
  @Description("")
  String AddMinutesMethodDescriptions();

  @DefaultMessage("Returns an instant in time some months after the given instant.")
  @Description("")
  String AddMonthsMethodDescriptions();

  @DefaultMessage("Returns an instant in time some seconds after the given instant.")
  @Description("")
  String AddSecondsMethodDescriptions();

  @DefaultMessage("Returns An instant in time some weeks after the given instant.")
  @Description("")
  String AddWeeksMethodDescriptions();

  @DefaultMessage("Returns an instant in time some years after the given instant.")
  @Description("")
  String AddYearsMethodDescriptions();

  @DefaultMessage("The addresses and names of paired Bluetooth devices")
  @Description("")
  String AddressesAndNamesPropertyDescriptions();

  @DefaultMessage("Event raised after this ActivityStarter returns.")
  @Description("")
  String AfterActivityEventDescriptions();

  @DefaultMessage("Event after the user has made a selection for ShowChooseDialog.")
  @Description("")
  String AfterChoosingEventDescriptions();

  @DefaultMessage("Event that runs after the user chooses a Date in the dialog")
  @Description("")
  String AfterDateSetEventDescriptions();

  @DefaultMessage("Event indicating that the contents of the file have been written.")
  @Description("")
  String AfterFileSavedEventDescriptions();

  @DefaultMessage("Simple event to raise after the SpeechRecognizer has recognized speech. If")
  @Description("")
  String AfterGettingTextEventDescriptions();

  @DefaultMessage("Called after the picture is taken. The text argument `image` is the path that can be used to locate the image on the phone.")
  @Description("")
  String AfterPictureEventDescriptions();

  @DefaultMessage("Indicates that a video was recorded with the camera and provides the path to the stored video.")
  @Description("")
  String AfterRecordingEventDescriptions();

  @DefaultMessage("Indicates that the scanner has read a (text) result and provides the result")
  @Description("")
  String AfterScanEventDescriptions();

  @DefaultMessage("Event called after the user selects an item from the dropdown list.")
  @Description("")
  String AfterSelectingEventDescriptions();

  @DefaultMessage("Provides the location of the newly created sound.")
  @Description("")
  String AfterSoundRecordedEventDescriptions();

  @DefaultMessage("Event to raise after the message is spoken. The result will be true if the message is spoken successfully, otherwise it will be false.")
  @Description("")
  String AfterSpeakingEventDescriptions();

  @DefaultMessage("Event raised after the user has responded to ShowTextDialog.")
  @Description("")
  String AfterTextInputEventDescriptions();

  @DefaultMessage("This event is run when a user has set the time in the popup dialog.")
  @Description("")
  String AfterTimeSetEventDescriptions();

  @DefaultMessage("Called when a change is detected in the air pressure (provided in hPa).")
  @Description("")
  String AirPressureChangedEventDescriptions();

  @DefaultMessage("The air pressure in hPa (millibar), if the sensor is available and enabled.")
  @Description("")
  String AirPressurePropertyDescriptions();

  @DefaultMessage("Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater.")
  @Description("")
  String AllowCookiesPropertyDescriptions();

  @DefaultMessage("The most recently available altitude value, in meters. If no value is available, 0 will be returned.")
  @Description("")
  String AltitudePropertyDescriptions();

  @DefaultMessage("The horizontal alignment property controls where the Marker''s anchor is located relative to its width.")
  @Description("")
  String AnchorHorizontalPropertyDescriptions();

  @DefaultMessage("The vertical alignment property controls where the Marker''s anchor is located relative to its height.")
  @Description("")
  String AnchorVerticalPropertyDescriptions();

  @DefaultMessage("Returns an angle that tells the direction in which the device is tiled. That is, it tells the direction of the force that would be felt by a ball rolling on the surface of the device.")
  @Description("")
  String AnglePropertyDescriptions();

  @DefaultMessage("This is a limited form of animation that can attach a small number of motion types to images. The allowable motions are ScrollRightSlow, ScrollRight, ScrollRightFast, ScrollLeftSlow, ScrollLeft, ScrollLeftFast, and Stop")
  @Description("")
  String AnimationPropertyDescriptions();

  @DefaultMessage("This is the display name of the installed application in the phone.If the AppName is blank, it will be set to the name of the project when the project is built.")
  @Description("")
  String AppNamePropertyDescriptions();

  @DefaultMessage("Appends text to the end of a file storage, creating the file if it does not exist. See the help text under SaveFile for information about where files are written.")
  @Description("")
  String AppendToFileMethodDescriptions();

  @DefaultMessage("Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.")
  @Description("")
  String AppendValueMethodDescriptions();

  @DefaultMessage("Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.")
  @Description("")
  String AppendValueToListMethodDescriptions();

  @DefaultMessage("Ask the user to grant access to a dangerous permission.")
  @Description("")
  String AskForPermissionMethodDescriptions();

  @DefaultMessage("Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don''t already have authorization.")
  @Description("")
  String AuthorizeMethodDescriptions();

  @DefaultMessage("List of the country codes available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.")
  @Description("")
  String AvailableCountriesPropertyDescriptions();

  @DefaultMessage("List of the languages available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.")
  @Description("")
  String AvailableLanguagesPropertyDescriptions();

  @DefaultMessage("List of available service providers, such as gps or network. This information is provided as a list and in text form.")
  @Description("")
  String AvailableProvidersPropertyDescriptions();

  @DefaultMessage("The average of the 10 most recent light levels measured, in lux.")
  @Description("")
  String AverageLuxPropertyDescriptions();

  @DefaultMessage("Returns the azimuth angle of the device. To return meaningful values the sensor must be enabled.")
  @Description("")
  String AzimuthPropertyDescriptions();

  @DefaultMessage("Device back button pressed.")
  @Description("")
  String BackPressedEventDescriptions();

  @DefaultMessage("Set the background image in Base64 format. This requires API level >= 8. For devices with API level less than 8, setting this will end up with an empty background.")
  @Description("")
  String BackgroundImageinBase64PropertyDescriptions();

  @DefaultMessage("Makes the Ball bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.")
  @Description("")
  String Ball__BounceMethodDescriptions();

  @DefaultMessage("Indicates whether a collision has been registered between this Ball and the passed sprite (Ball or ImageSprite).")
  @Description("")
  String Ball__CollidingWithMethodDescriptions();

  @DefaultMessage("Event handler called when a Ball is dragged. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Ball won''t actually move anywhere in response to the Dragged event unless MoveTo is explicitly called. For smooth movement, each of its coordinates should be set to the sum of its initial value and the difference between its current and previous values.")
  @Description("")
  String Ball__DraggedEventDescriptions();

  @DefaultMessage("Event handler called when the Ball reaches an edge of the screen. If Bounce is then called with that edge, the Ball will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north (1), northeast (2), east (3), southeast (4), south (-1), southwest (-2), west (-3), and northwest (-4).")
  @Description("")
  String Ball__EdgeReachedEventDescriptions();

  @DefaultMessage("Controls whether the Ball moves and can be interacted with through collisions, dragging, touching, and flinging.")
  @Description("")
  String Ball__EnabledPropertyDescriptions();

  @DefaultMessage("Event handler called when a fling gesture (quick swipe) is made on an enabled Ball. This provides the x and y coordinates of the start of the fling (relative to the upper left of the canvas), the speed (pixels per millisecond), the heading (0-360 degrees), and the x and y velocity components of the fling''s vector.")
  @Description("")
  String Ball__FlungEventDescriptions();

  @DefaultMessage("Returns the Ball''s heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.")
  @Description("")
  String Ball__HeadingPropertyDescriptions();

  @DefaultMessage("The interval in milliseconds at which the Ball''s position is updated. For example, if the interval is 50 and the speed is 10, then every 50 milliseconds the sprite will move 10 pixels in the heading direction.")
  @Description("")
  String Ball__IntervalPropertyDescriptions();

  @DefaultMessage("Moves the Ball back in bounds if part of it extends out of bounds, having no effect otherwise. If the Ball is too wide to fit on the canvas, this aligns the left side of the Ball with the left side of the canvas. If the Ball is too tall to fit on the canvas, this aligns the top side of the Ball with the top side of the canvas.")
  @Description("")
  String Ball__MoveIntoBoundsMethodDescriptions();

  @DefaultMessage("Sets the x and y coordinates of the Ball. If CenterAtOrigin is true, the center of the Ball will be placed here. Otherwise, the top left edge of the Ball will be placed at the specified coordinates.")
  @Description("")
  String Ball__MoveToMethodDescriptions();

  @DefaultMessage("The color of the Ball.")
  @Description("")
  String Ball__PaintColorPropertyDescriptions();

  @DefaultMessage("Sets the heading of the Ball toward the point with the coordinates (x, y).")
  @Description("")
  String Ball__PointInDirectionMethodDescriptions();

  @DefaultMessage("Turns the Ball to point towards a designated target sprite (Ball or ImageSprite). The new heading will be parallel to the line joining the centerpoints of the two sprites.")
  @Description("")
  String Ball__PointTowardsMethodDescriptions();

  @DefaultMessage("The distance from the edge of the Ball to its center.")
  @Description("")
  String Ball__RadiusPropertyDescriptions();

  @DefaultMessage("The number of pixels that the Ball should move every interval, if enabled.")
  @Description("")
  String Ball__SpeedPropertyDescriptions();

  @DefaultMessage("Event handler called when the user begins touching an enabled Ball (placing their finger on a Ball and leaving it there). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.")
  @Description("")
  String Ball__TouchDownEventDescriptions();

  @DefaultMessage("Event handler called when the user stops touching an enabled Ball (lifting their finger after a TouchDown event). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.")
  @Description("")
  String Ball__TouchUpEventDescriptions();

  @DefaultMessage("Event handler called when the user touches an enabled Ball and then immediately lifts their finger. The provided x and y coordinates are relative to the upper left of the canvas.")
  @Description("")
  String Ball__TouchedEventDescriptions();

  @DefaultMessage("Whether the Ball is visible.")
  @Description("")
  String Ball__VisiblePropertyDescriptions();

  @DefaultMessage("The horizontal coordinate of the Ball, increasing as the Ball moves right. If the property OriginAtCenter is true, the coordinate is for the center of the Ball; otherwise, it is for the leftmost point of the Ball.")
  @Description("")
  String Ball__XPropertyDescriptions();

  @DefaultMessage("The vertical coordinate of the Ball, increasing as the Ball moves down. If the property OriginAtCenter is true, the coordinate is for the center of the Ball; otherwise, it is for the uppermost point of the Ball.")
  @Description("")
  String Ball__YPropertyDescriptions();

  @DefaultMessage("How the `Ball` should be layered relative to other")
  @Description("")
  String Ball__ZPropertyDescriptions();

  @DefaultMessage("The list of ballot options.")
  @Description("")
  String BallotOptionsPropertyDescriptions();

  @DefaultMessage("The question to be voted on.")
  @Description("")
  String BallotQuestionPropertyDescriptions();

  @DefaultMessage("Text result of the previous scan.")
  @Description("")
  String BarcodeScanner__ResultPropertyDescriptions();

  @DefaultMessage("Specifies whether or not the device has the hardware to support the Barometer component.")
  @Description("")
  String Barometer__AvailablePropertyDescriptions();

  @DefaultMessage("If enabled, then device will listen for changes.")
  @Description("")
  String Barometer__EnabledPropertyDescriptions();

  @DefaultMessage("Returns the current baud rate")
  @Description("")
  String BaudRatePropertyDescriptions();

  @DefaultMessage("Returns the bearing from the Marker to the given map feature, in degrees from due north. If the centroids parameter is true, the bearing will be to the center of the map feature. Otherwise, the bearing will be computed to the point in the feature nearest the Marker.")
  @Description("")
  String BearingToFeatureMethodDescriptions();

  @DefaultMessage("Returns the bearing from the Marker to the given latitude and longitude, in degrees from due north.")
  @Description("")
  String BearingToPointMethodDescriptions();

  @DefaultMessage("Simple event to raise when the `SpeechRecognizer` is invoked but before its activity is started.")
  @Description("")
  String BeforeGettingTextEventDescriptions();

  @DefaultMessage("When a page is about to load this event is run.")
  @Description("")
  String BeforePageLoadEventDescriptions();

  @DefaultMessage("Event to raise when Speak is invoked, before the message is spoken.")
  @Description("")
  String BeforeSpeakingEventDescriptions();

  @DefaultMessage("A JSON string representing the subset for the screen. Authors of template apps can use this to control what components, designer properties, and blocks are available in the project.")
  @Description("")
  String BlocksToolkitPropertyDescriptions();

  @DefaultMessage("The BluetoothClient component that should be used for communication.")
  @Description("")
  String BluetoothClientPropertyDescriptions();

  @DefaultMessage("Whether Bluetooth is available on the device")
  @Description("")
  String BluetoothClient__AvailablePropertyDescriptions();

  @DefaultMessage("Whether Bluetooth is enabled")
  @Description("")
  String BluetoothClient__EnabledPropertyDescriptions();

  @DefaultMessage("The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.")
  @Description("")
  String BluetoothErrorEventDescriptions();

  @DefaultMessage("Whether Bluetooth is available on the device")
  @Description("")
  String BluetoothServer__AvailablePropertyDescriptions();

  @DefaultMessage("Whether Bluetooth is enabled")
  @Description("")
  String BluetoothServer__EnabledPropertyDescriptions();

  @DefaultMessage("The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.")
  @Description("")
  String BottomOfRangePropertyDescriptions();

  @DefaultMessage("Bounding box for the map stored as [[North, West], [South, East]].")
  @Description("")
  String BoundingBoxPropertyDescriptions();

  @DefaultMessage("User has changed the map bounds by panning or zooming the map.")
  @Description("")
  String BoundsChangeEventDescriptions();

  @DefaultMessage("Returns the bounding box of the Rectangle in the format ((North West) (South East)).")
  @Description("")
  String BoundsMethodDescriptions();

  @DefaultMessage("Returns the buffer size in bytes")
  @Description("")
  String BufferSizePropertyDescriptions();

  @DefaultMessage("Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText.")
  @Description("")
  String BuildRequestDataMethodDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String Button__BackgroundColorPropertyDescriptions();

  @DefaultMessage("User tapped and released the button.")
  @Description("")
  String Button__ClickEventDescriptions();

  @DefaultMessage("If set, user can tap Button to cause action.")
  @Description("")
  String Button__EnabledPropertyDescriptions();

  @DefaultMessage("If set, Button text is displayed in bold.")
  @Description("")
  String Button__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, Button text is displayed in italics.")
  @Description("")
  String Button__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for Button text.")
  @Description("")
  String Button__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for Button text.")
  @Description("")
  String Button__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the Button so it is now possible to click it.")
  @Description("")
  String Button__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the Button as a percentage of the height of the Screen.")
  @Description("")
  String Button__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Button, measured in pixels.")
  @Description("")
  String Button__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String Button__ImagePropertyDescriptions();

  @DefaultMessage("User held the button down.")
  @Description("")
  String Button__LongClickEventDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the Button so it is now no longer possible to click it.")
  @Description("")
  String Button__LostFocusEventDescriptions();

  @DefaultMessage("Returns the style of the `Button`.")
  @Description("")
  String Button__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a Button that has an image as background.")
  @Description("")
  String Button__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String Button__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String Button__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on Button.")
  @Description("")
  String Button__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the Button was pressed down.")
  @Description("")
  String Button__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the Button has been released.")
  @Description("")
  String Button__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the Button should be visible on the screen. Value is true if the Button is showing and false if hidden.")
  @Description("")
  String Button__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Button as a percentage of the width of the Screen.")
  @Description("")
  String Button__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Button, measured in pixels.")
  @Description("")
  String Button__WidthPropertyDescriptions();

  @DefaultMessage("Returns an estimate of the number of bytes that can be received without blocking")
  @Description("")
  String BytesAvailableToReceiveMethodDescriptions();

  @DefaultMessage("This property has been deprecated.")
  @Description("")
  String CalibrateStrideLengthPropertyDescriptions();

  @DefaultMessage("This event has been deprecated.")
  @Description("")
  String CalibrationFailedEventDescriptions();

  @DefaultMessage("Returns true if the WebViewer can go back in the history list.")
  @Description("")
  String CanGoBackMethodDescriptions();

  @DefaultMessage("Returns true if the WebViewer can go forward in the history list.")
  @Description("")
  String CanGoForwardMethodDescriptions();

  @DefaultMessage("The color of the canvas background.")
  @Description("")
  String Canvas__BackgroundColorPropertyDescriptions();

  @DefaultMessage("The name of a file containing the background image for the canvas")
  @Description("")
  String Canvas__BackgroundImagePropertyDescriptions();

  @DefaultMessage("When the user does a drag from one point (prevX, prevY) to another (x, y). The pair (startX, startY) indicates where the user first touched the screen, and \"draggedAnySprite\" indicates whether a sprite is being dragged.")
  @Description("")
  String Canvas__DraggedEventDescriptions();

  @DefaultMessage("Draws a circle (filled in) with the given radius centered at the given coordinates on the Canvas.")
  @Description("")
  String Canvas__DrawCircleMethodDescriptions();

  @DefaultMessage("Draws a line between the given coordinates on the canvas.")
  @Description("")
  String Canvas__DrawLineMethodDescriptions();

  @DefaultMessage("Draws a point at the given coordinates on the canvas.")
  @Description("")
  String Canvas__DrawPointMethodDescriptions();

  @DefaultMessage("When a fling gesture (quick swipe) is made on the canvas: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling''s vector. The value \"flungSprite\" is true if a sprite was located near the the starting point of the fling gesture.")
  @Description("")
  String Canvas__FlungEventDescriptions();

  @DefaultMessage("The font size of text drawn on the canvas.")
  @Description("")
  String Canvas__FontSizePropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Canvas as a percentage of the height of the Screen.")
  @Description("")
  String Canvas__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the `Canvas`''s vertical height, measured in pixels.")
  @Description("")
  String Canvas__HeightPropertyDescriptions();

  @DefaultMessage("The color in which lines are drawn")
  @Description("")
  String Canvas__PaintColorPropertyDescriptions();

  @DefaultMessage("Saves a picture of this Canvas to the device''s external storage. If an error occurs, the Screen''s ErrorOccurred event will be called.")
  @Description("")
  String Canvas__SaveMethodDescriptions();

  @DefaultMessage("Determines the alignment of the text drawn by DrawText() or DrawAngle() with respect to the point specified by that command: point at the left of the text, point at the center of the text, or point at the right of the text.")
  @Description("")
  String Canvas__TextAlignmentPropertyDescriptions();

  @DefaultMessage("When the user begins touching the canvas (places finger on canvas and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas")
  @Description("")
  String Canvas__TouchDownEventDescriptions();

  @DefaultMessage("When the user stops touching the canvas (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas")
  @Description("")
  String Canvas__TouchUpEventDescriptions();

  @DefaultMessage("When the user touches the canvas and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas. TouchedAnySprite is true if the same touch also touched a sprite, and false otherwise.")
  @Description("")
  String Canvas__TouchedEventDescriptions();

  @DefaultMessage("Specifies whether the Canvas should be visible on the screen. Value is true if the Canvas is showing and false if hidden.")
  @Description("")
  String Canvas__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Canvas as a percentage of the width of the Screen.")
  @Description("")
  String Canvas__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the `Canvas`, measured in pixels.")
  @Description("")
  String Canvas__WidthPropertyDescriptions();

  @DefaultMessage("<p>Set the initial center coordinate of the map. The value is specified as a comma-separated pair of decimal latitude and longitude coordinates, for example, <code>42.359144, -71.093612</code>.</p><p>In blocks code, it is recommended for performance reasons to use SetCenter with numerical latitude and longitude rather than convert to the string representation for use with this property.</p>")
  @Description("")
  String CenterFromStringPropertyDescriptions();

  @DefaultMessage("Returns the center of the Rectangle as a list of the form (Latitude Longitude).")
  @Description("")
  String CenterMethodDescriptions();

  @DefaultMessage("Returns the centroid of the Polygon as a (latitude, longitude) pair.")
  @Description("")
  String CentroidMethodDescriptions();

  @DefaultMessage("Sets the character encoding to use when sending and receiving text. The default value is `\"UTF-8\"")
  @Description("")
  String CharacterEncodingPropertyDescriptions();

  @DefaultMessage("Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.")
  @Description("")
  String CheckAuthorizedMethodDescriptions();

  @DefaultMessage("The background color of the CheckBox as an alpha-red-green-blue integer.")
  @Description("")
  String CheckBox__BackgroundColorPropertyDescriptions();

  @DefaultMessage("User tapped and released the CheckBox.")
  @Description("")
  String CheckBox__ChangedEventDescriptions();

  @DefaultMessage("True if the CheckBox is active and clickable.")
  @Description("")
  String CheckBox__EnabledPropertyDescriptions();

  @DefaultMessage("Set to true if the text of the CheckBox should be bold.")
  @Description("")
  String CheckBox__FontBoldPropertyDescriptions();

  @DefaultMessage("Set to true if the text of the CheckBox should be italic.")
  @Description("")
  String CheckBox__FontItalicPropertyDescriptions();

  @DefaultMessage("Specifies the text font size of the CheckBox in scale-independent pixels.")
  @Description("")
  String CheckBox__FontSizePropertyDescriptions();

  @DefaultMessage("Specifies the text font face of the CheckBox.")
  @Description("")
  String CheckBox__FontTypefacePropertyDescriptions();

  @DefaultMessage("CheckBox became the focused component.")
  @Description("")
  String CheckBox__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the CheckBox as a percentage of the height of the Screen.")
  @Description("")
  String CheckBox__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the CheckBox, measured in pixels.")
  @Description("")
  String CheckBox__HeightPropertyDescriptions();

  @DefaultMessage("CheckBox stopped being the focused component.")
  @Description("")
  String CheckBox__LostFocusEventDescriptions();

  @DefaultMessage("Specifies the text color of the CheckBox as an alpha-red-green-blue integer.")
  @Description("")
  String CheckBox__TextColorPropertyDescriptions();

  @DefaultMessage("Specifies the text displayed by the CheckBox.")
  @Description("")
  String CheckBox__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the CheckBox should be visible on the screen. Value is true if the CheckBox is showing and false if hidden.")
  @Description("")
  String CheckBox__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the CheckBox as a percentage of the width of the Screen.")
  @Description("")
  String CheckBox__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the CheckBox, measured in pixels.")
  @Description("")
  String CheckBox__WidthPropertyDescriptions();

  @DefaultMessage("True if the box is checked, false otherwise.")
  @Description("")
  String CheckedPropertyDescriptions();

  @DefaultMessage("Event raised when the user canceled ShowChooseDialog.")
  @Description("")
  String ChoosingCanceledEventDescriptions();

  @DefaultMessage("The user clicked on the Circle.")
  @Description("")
  String Circle__ClickEventDescriptions();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the Circle.")
  @Description("")
  String Circle__DescriptionPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between a Circle and a latitude, longitude point.")
  @Description("")
  String Circle__DistanceToPointMethodDescriptions();

  @DefaultMessage("The user dragged the Circle.")
  @Description("")
  String Circle__DragEventDescriptions();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the Circle by long-pressing and then dragging the Circle to a new location.")
  @Description("")
  String Circle__DraggablePropertyDescriptions();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the Circle.")
  @Description("")
  String Circle__EnableInfoboxPropertyDescriptions();

  @DefaultMessage("The paint color used to fill in the Circle.")
  @Description("")
  String Circle__FillColorPropertyDescriptions();

  @DefaultMessage("The latitude of the center of the circle.")
  @Description("")
  String Circle__LatitudePropertyDescriptions();

  @DefaultMessage("The user long-pressed on the Circle. This event will only trigger if Draggable is false.")
  @Description("")
  String Circle__LongClickEventDescriptions();

  @DefaultMessage("The longitude of the center of the circle.")
  @Description("")
  String Circle__LongitudePropertyDescriptions();

  @DefaultMessage("The radius of the circle in meters.")
  @Description("")
  String Circle__RadiusPropertyDescriptions();

  @DefaultMessage("Set the center of the Circle.")
  @Description("")
  String Circle__SetLocationMethodDescriptions();

  @DefaultMessage("Show the infobox for the Circle. This will show the infobox even if EnableInfobox is set to false.")
  @Description("")
  String Circle__ShowInfoboxMethodDescriptions();

  @DefaultMessage("The paint color used to outline the Circle.")
  @Description("")
  String Circle__StrokeColorPropertyDescriptions();

  @DefaultMessage("The width of the stroke used to outline the Circle.")
  @Description("")
  String Circle__StrokeWidthPropertyDescriptions();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the Circle.")
  @Description("")
  String Circle__TitlePropertyDescriptions();

  @DefaultMessage("Returns the type of the feature. For Circles, this returns the text \"Circle\".")
  @Description("")
  String Circle__TypePropertyDescriptions();

  @DefaultMessage("Specifies whether the Circle should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String Circle__VisiblePropertyDescriptions();

  @DefaultMessage("Event indicating that the classifier is ready.")
  @Description("")
  String ClassifierReadyEventDescriptions();

  @DefaultMessage("Performs classification on the image at the given path and triggers the GotClassification event when classification is finished successfully.")
  @Description("")
  String ClassifyImageDataMethodDescriptions();

  @DefaultMessage("Performs classification on current video frame and triggers the GotClassification event when classification is finished successfully.")
  @Description("")
  String ClassifyVideoDataMethodDescriptions();

  @DefaultMessage("Clear the entire data store.")
  @Description("")
  String ClearAllMethodDescriptions();

  @DefaultMessage("Clear WebView caches.")
  @Description("")
  String ClearCachesMethodDescriptions();

  @DefaultMessage("Clear stored location permissions.")
  @Description("")
  String ClearLocationsMethodDescriptions();

  @DefaultMessage("Clears anything drawn on this Canvas but not any background color or image.")
  @Description("")
  String ClearMethodDescriptions();

  @DefaultMessage("Specifies whether the image should be clickable or not.")
  @Description("")
  String ClickablePropertyDescriptions();

  @DefaultMessage("The animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none")
  @Description("")
  String CloseScreenAnimationPropertyDescriptions();

  @DefaultMessage("Closes serial connection. Returns true when closed.")
  @Description("")
  String CloseSerialMethodDescriptions();

  @DefaultMessage("returns True if we are on the network and will likely be able to connect to the CloudDB server.")
  @Description("")
  String CloudConnectedMethodDescriptions();

  @DefaultMessage("Indicates that an error occurred while communicating with the CloudDB Redis server.")
  @Description("")
  String CloudDBErrorEventDescriptions();

  @DefaultMessage("Remove the tag from CloudDB.")
  @Description("")
  String CloudDB__ClearTagMethodDescriptions();

  @DefaultMessage("Indicates that the data in the CloudDB project has changed. Launches an event with the `tag`")
  @Description("")
  String CloudDB__DataChangedEventDescriptions();

  @DefaultMessage("Event triggered by the \"RemoveFirstFromList\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.")
  @Description("")
  String CloudDB__FirstRemovedEventDescriptions();

  @DefaultMessage("Get the Value for a tag, doesn''t return the value but will cause a GotValue event to fire when the value is looked up.")
  @Description("")
  String CloudDB__GetValueMethodDescriptions();

  @DefaultMessage("Indicates that a")
  @Description("")
  String CloudDB__GotValueEventDescriptions();

  @DefaultMessage("Store a value at a tag.")
  @Description("")
  String CloudDB__StoreValueMethodDescriptions();

  @DefaultMessage("Event handler called when two enabled sprites (")
  @Description("")
  String CollidedWithEventDescriptions();

  @DefaultMessage("The color of slider to the left of the thumb.")
  @Description("")
  String ColorLeftPropertyDescriptions();

  @DefaultMessage("The color of slider to the right of the thumb.")
  @Description("")
  String ColorRightPropertyDescriptions();

  @DefaultMessage("Column property getter method.")
  @Description("")
  String ColumnPropertyDescriptions();

  @DefaultMessage("Columns property getter method.")
  @Description("")
  String ColumnsPropertyDescriptions();

  @DefaultMessage("Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.")
  @Description("")
  String ConnectMethodDescriptions();

  @DefaultMessage("Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.")
  @Description("")
  String ConnectWithUUIDMethodDescriptions();

  @DefaultMessage("Indicates that a bluetooth connection has been accepted.")
  @Description("")
  String ConnectionAcceptedEventDescriptions();

  @DefaultMessage("ConsumerKey property getter method.")
  @Description("")
  String ConsumerKeyPropertyDescriptions();

  @DefaultMessage("ConsumerSecret property getter method.")
  @Description("")
  String ConsumerSecretPropertyDescriptions();

  @DefaultMessage("Returns the full name of the selected contact, or the empty string if a name is unavailable.")
  @Description("")
  String ContactNamePropertyDescriptions();

  @DefaultMessage("Event to be raised after the `ContactPicker` activity returns its result and the properties have been filled in.")
  @Description("")
  String ContactPicker__AfterPickingEventDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String ContactPicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Event to raise when the `ContactPicker` is clicked or the picker is shown using the")
  @Description("")
  String ContactPicker__BeforePickingEventDescriptions();

  @DefaultMessage("If set, user can tap ContactPicker to cause action.")
  @Description("")
  String ContactPicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, ContactPicker text is displayed in bold.")
  @Description("")
  String ContactPicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, ContactPicker text is displayed in italics.")
  @Description("")
  String ContactPicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for ContactPicker text.")
  @Description("")
  String ContactPicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for ContactPicker text.")
  @Description("")
  String ContactPicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the ContactPicker so it is now possible to click it.")
  @Description("")
  String ContactPicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the ContactPicker as a percentage of the height of the Screen.")
  @Description("")
  String ContactPicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the ContactPicker, measured in pixels.")
  @Description("")
  String ContactPicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String ContactPicker__ImagePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the ContactPicker so it is now no longer possible to click it.")
  @Description("")
  String ContactPicker__LostFocusEventDescriptions();

  @DefaultMessage("Opens the ContactPicker, as though the user clicked on it.")
  @Description("")
  String ContactPicker__OpenMethodDescriptions();

  @DefaultMessage("Returns the primary phone number associated with the selected contact, or the empty string if no phone number is associated with the contact.")
  @Description("")
  String ContactPicker__PhoneNumberPropertyDescriptions();

  @DefaultMessage("Returns a picture URI for the selected contact, which can be used to retrieve the contact''s photo and other fields.")
  @Description("")
  String ContactPicker__PicturePropertyDescriptions();

  @DefaultMessage("Returns the style of the `ContactPicker`.")
  @Description("")
  String ContactPicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a ContactPicker that has an image as background.")
  @Description("")
  String ContactPicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String ContactPicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String ContactPicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on ContactPicker.")
  @Description("")
  String ContactPicker__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the ContactPicker was pressed down.")
  @Description("")
  String ContactPicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the ContactPicker has been released.")
  @Description("")
  String ContactPicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the ContactPicker should be visible on the screen. Value is true if the ContactPicker is showing and false if hidden.")
  @Description("")
  String ContactPicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ContactPicker as a percentage of the width of the Screen.")
  @Description("")
  String ContactPicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ContactPicker, measured in pixels.")
  @Description("")
  String ContactPicker__WidthPropertyDescriptions();

  @DefaultMessage("URI that specifies the location of the contact on the device.")
  @Description("")
  String ContactUriPropertyDescriptions();

  @DefaultMessage("Country code to use for speech generation. This can affect the pronounciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.")
  @Description("")
  String CountryPropertyDescriptions();

  @DefaultMessage("Create a new marker with default properties at the specified latitude and longitude.")
  @Description("")
  String CreateMarkerMethodDescriptions();

  @DefaultMessage("Provides a textual representation of the current address or \"No address available\".")
  @Description("")
  String CurrentAddressPropertyDescriptions();

  @DefaultMessage("Title of the page currently viewed")
  @Description("")
  String CurrentPageTitlePropertyDescriptions();

  @DefaultMessage("URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links.")
  @Description("")
  String CurrentUrlPropertyDescriptions();

  @DefaultMessage("Returns the MIME type to pass to the activity.")
  @Description("")
  String DataTypePropertyDescriptions();

  @DefaultMessage("Returns the data URI that will be used to start the activity.")
  @Description("")
  String DataUriPropertyDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String DatePicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("If set, user can tap DatePicker to cause action.")
  @Description("")
  String DatePicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, DatePicker text is displayed in bold.")
  @Description("")
  String DatePicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, DatePicker text is displayed in italics.")
  @Description("")
  String DatePicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for DatePicker text.")
  @Description("")
  String DatePicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for DatePicker text.")
  @Description("")
  String DatePicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the DatePicker so it is now possible to click it.")
  @Description("")
  String DatePicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the DatePicker as a percentage of the height of the Screen.")
  @Description("")
  String DatePicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the DatePicker, measured in pixels.")
  @Description("")
  String DatePicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String DatePicker__ImagePropertyDescriptions();

  @DefaultMessage("the instant of the date that was last picked using the DatePicker.")
  @Description("")
  String DatePicker__InstantPropertyDescriptions();

  @DefaultMessage("Launches the DatePicker dialog.")
  @Description("")
  String DatePicker__LaunchPickerMethodDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the DatePicker so it is now no longer possible to click it.")
  @Description("")
  String DatePicker__LostFocusEventDescriptions();

  @DefaultMessage("Returns the style of the `DatePicker`.")
  @Description("")
  String DatePicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a DatePicker that has an image as background.")
  @Description("")
  String DatePicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String DatePicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String DatePicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on DatePicker.")
  @Description("")
  String DatePicker__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the DatePicker was pressed down.")
  @Description("")
  String DatePicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the DatePicker has been released.")
  @Description("")
  String DatePicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the DatePicker should be visible on the screen. Value is true if the DatePicker is showing and false if hidden.")
  @Description("")
  String DatePicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the DatePicker as a percentage of the width of the Screen.")
  @Description("")
  String DatePicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the DatePicker, measured in pixels.")
  @Description("")
  String DatePicker__WidthPropertyDescriptions();

  @DefaultMessage("Returns the day of the month (1-31) from the instant.")
  @Description("")
  String DayOfMonthMethodDescriptions();

  @DefaultMessage("the Day of the month that was last picked using the DatePicker.")
  @Description("")
  String DayPropertyDescriptions();

  @DefaultMessage("Removes Twitter authorization from this running app instance")
  @Description("")
  String DeAuthorizeMethodDescriptions();

  @DefaultMessage("The Default Redis Server to use.")
  @Description("")
  String DefaultRedisServerPropertyDescriptions();

  @DefaultMessage("Property for DefaultURL")
  @Description("")
  String DefaultURLPropertyDescriptions();

  @DefaultMessage("Delete a file on the robot.")
  @Description("")
  String DeleteFileMethodDescriptions();

  @DefaultMessage("Sets the delimiter byte to use when passing a negative number for the numberOfBytes parameter when calling ReceiveText, ReceiveSignedBytes, or ReceiveUnsignedBytes. Those functions will continue to read bytes until they encounter the value specified here. The default delimiter is 0, the null byte.")
  @Description("")
  String DelimiterBytePropertyDescriptions();

  @DefaultMessage("Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur.")
  @Description("")
  String DetectColorPropertyDescriptions();

  @DefaultMessage("Specifies the unique developer path of the Firebase.")
  @Description("")
  String DeveloperBucketPropertyDescriptions();

  @DefaultMessage("This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String DirectMessageMethodDescriptions();

  @DefaultMessage("This property contains a list of the most recent messages mentioning the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>Authorized</code> event.</li> <li> Call the <code>RequestDirectMessages</code> method.</li> <li> Wait for the <code>DirectMessagesReceived</code> event.</li></ol>The value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to <code>RequestDirectMessages</code>).")
  @Description("")
  String DirectMessagesPropertyDescriptions();

  @DefaultMessage("This event is raised when the recent messages requested through <code>RequestDirectMessages</code> have been retrieved. A list of the messages can then be found in the <code>messages</code> parameter or the <code>Messages</code> property.")
  @Description("")
  String DirectMessagesReceivedEventDescriptions();

  @DefaultMessage("Disconnect from the connected Bluetooth device.")
  @Description("")
  String DisconnectMethodDescriptions();

  @DefaultMessage("Disconnects BluetoothClient automatically when an error occurs.")
  @Description("")
  String DisconnectOnErrorPropertyDescriptions();

  @DefaultMessage("Dismiss a previously displayed ProgressDialog box")
  @Description("")
  String DismissProgressDialogMethodDescriptions();

  @DefaultMessage("Displays the dropdown list for selection, same action as when the user clicks on the spinner.")
  @Description("")
  String DisplayDropdownMethodDescriptions();

  @DefaultMessage("Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance.")
  @Description("")
  String DistanceIntervalPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between two map features.")
  @Description("")
  String DistanceToFeatureMethodDescriptions();

  @DefaultMessage("DEPRECATED. This block is deprecated as of the end of 2012. Use SendQuery.")
  @Description("")
  String DoQueryMethodDescriptions();

  @DefaultMessage("Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.")
  @Description("")
  String DoScanMethodDescriptions();

  @DefaultMessage("The user double-tapped at a point on the map. This event will be followed by a ZoomChanged event if zooming gestures are enabled and the map is not at the highest possible zoom level.")
  @Description("")
  String DoubleTapAtPointEventDescriptions();

  @DefaultMessage("Download a file to the robot.")
  @Description("")
  String DownloadFileMethodDescriptions();

  @DefaultMessage("Draw an arc on Canvas, by drawing an arc from a specified oval (specified by left, top, right & bottom). Start angle is 0 when heading to the right, and increase when rotate clockwise. When useCenter is true, a sector will be drawed instead of an arc. When fill is true, a filled arc (or sector) will be drawed instead of just an outline.")
  @Description("")
  String DrawArcMethodDescriptions();

  @DefaultMessage("Draw a built-in icon on screen.")
  @Description("")
  String DrawIconMethodDescriptions();

  @DefaultMessage("Draw a rectangle on the screen.")
  @Description("")
  String DrawRectMethodDescriptions();

  @DefaultMessage("Draws a shape on the canvas. pointList should be a list contains sub-lists with two number which represents a coordinate. The first point and last point does not need to be the same. e.g. ((x1 y1) (x2 y2) (x3 y3)) When fill is true, the shape will be filled.")
  @Description("")
  String DrawShapeMethodDescriptions();

  @DefaultMessage("Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.")
  @Description("")
  String DrawTextAtAngleMethodDescriptions();

  @DefaultMessage("Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.")
  @Description("")
  String DrawTextMethodDescriptions();

  @DefaultMessage("The motor ports that are used for driving: the left wheel''s motor port followed by the right wheel''s motor port.")
  @Description("")
  String DriveMotorsPropertyDescriptions();

  @DefaultMessage("Returns duration, which is milliseconds elapsed between instants.")
  @Description("")
  String DurationMethodDescriptions();

  @DefaultMessage("Converts the duration to the number of days.")
  @Description("")
  String DurationToDaysMethodDescriptions();

  @DefaultMessage("Converts the duration to the number of hours.")
  @Description("")
  String DurationToHoursMethodDescriptions();

  @DefaultMessage("Converts the duration to the number of minutes.")
  @Description("")
  String DurationToMinutesMethodDescriptions();

  @DefaultMessage("Converts the duration to the number of seconds.")
  @Description("")
  String DurationToSecondsMethodDescriptions();

  @DefaultMessage("Converts the duration to the number of weeks.")
  @Description("")
  String DurationToWeeksMethodDescriptions();

  @DefaultMessage("The east edge of the rectangle, in decimal degrees east of the prime meridian.")
  @Description("")
  String EastLongitudePropertyDescriptions();

  @DefaultMessage("Time elapsed in milliseconds since the pedometer was started.")
  @Description("")
  String ElapsedTimePropertyDescriptions();

  @DefaultMessage("Returns a list of email addresses associated with the selected contact.")
  @Description("")
  String EmailAddressListPropertyDescriptions();

  @DefaultMessage("Returns the primary email address of the selected contact, or the empty string if an email address is unavailable.")
  @Description("")
  String EmailAddressPropertyDescriptions();

  @DefaultMessage("The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is ''default'' (shaded 3-D look).")
  @Description("")
  String EmailPicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Whether the user can enter text into the EmailPicker. By default, this is true.")
  @Description("")
  String EmailPicker__EnabledPropertyDescriptions();

  @DefaultMessage("Whether the font for the text should be bold. By default, it is not.")
  @Description("")
  String EmailPicker__FontBoldPropertyDescriptions();

  @DefaultMessage("Whether the text should appear in italics. By default, it does not.")
  @Description("")
  String EmailPicker__FontItalicPropertyDescriptions();

  @DefaultMessage("The font size for the text. By default, it is 14.0 points.")
  @Description("")
  String EmailPicker__FontSizePropertyDescriptions();

  @DefaultMessage("The font for the text. The value can be changed in the Designer.")
  @Description("")
  String EmailPicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Event raised when the `EmailPicker` is selected for input, such as by the user touching it.")
  @Description("")
  String EmailPicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the EmailPicker as a percentage of the height of the Screen.")
  @Description("")
  String EmailPicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the EmailPicker, measured in pixels.")
  @Description("")
  String EmailPicker__HeightPropertyDescriptions();

  @DefaultMessage("Text that should appear faintly in the EmailPicker to provide a hint as to what the user should enter. This can only be seen if the Text property is empty.")
  @Description("")
  String EmailPicker__HintPropertyDescriptions();

  @DefaultMessage("Event raised when the EmailPicker is no longer selected for input, such as if the user touches a different text box.")
  @Description("")
  String EmailPicker__LostFocusEventDescriptions();

  @DefaultMessage("Sets the EmailPicker active.")
  @Description("")
  String EmailPicker__RequestFocusMethodDescriptions();

  @DefaultMessage("Whether the text should be left justified, centered, or right justified. By default, text is left justified.")
  @Description("")
  String EmailPicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black.")
  @Description("")
  String EmailPicker__TextColorPropertyDescriptions();

  @DefaultMessage("Returns the textbox contents.")
  @Description("")
  String EmailPicker__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the EmailPicker should be visible on the screen. Value is true if the EmailPicker is showing and false if hidden.")
  @Description("")
  String EmailPicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the EmailPicker as a percentage of the width of the Screen.")
  @Description("")
  String EmailPicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the EmailPicker, measured in pixels.")
  @Description("")
  String EmailPicker__WidthPropertyDescriptions();

  @DefaultMessage("Enable two-finger panning of the Map")
  @Description("")
  String EnablePanPropertyDescriptions();

  @DefaultMessage("Enable rotating the map based on the user''s orientation.")
  @Description("")
  String EnableRotationPropertyDescriptions();

  @DefaultMessage("Specifies whether to keep motor rotation at constant speed.")
  @Description("")
  String EnableSpeedRegulationPropertyDescriptions();

  @DefaultMessage("Set whether the user can zoom the map using touch gestures. This value does not affect whether the user can zoom using the zoom controls provided by <a href=\"#Map.ShowZoom\">ShowZoom</a>.")
  @Description("")
  String EnableZoomPropertyDescriptions();

  @DefaultMessage("The latitude of the end location.")
  @Description("")
  String EndLatitudePropertyDescriptions();

  @DefaultMessage("Set the end location.")
  @Description("")
  String EndLocationPropertyDescriptions();

  @DefaultMessage("The longitude of the end location.")
  @Description("")
  String EndLongitudePropertyDescriptions();

  @DefaultMessage("Event indicating that an error has occurred.")
  @Description("")
  String ErrorEventDescriptions();

  @DefaultMessage("Light level has gone above the range.")
  @Description("")
  String Ev3ColorSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the light level goes above the TopOfRange.")
  @Description("")
  String Ev3ColorSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Light level has gone below the range.")
  @Description("")
  String Ev3ColorSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the light level goes below the BottomOfRange.")
  @Description("")
  String Ev3ColorSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Called when the detected color has changed. The ColorChanged event will occur if the Mode property is set to \"color\" and the ColorChangedEventEnabled property is set to True.")
  @Description("")
  String Ev3ColorSensor__ColorChangedEventDescriptions();

  @DefaultMessage("Whether the ColorChanged event should fire when the Mode property is set to \"color\" and the detected color changes.")
  @Description("")
  String Ev3ColorSensor__ColorChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("It returns the light level in percentage, or -1 when the light level cannot be read.")
  @Description("")
  String Ev3ColorSensor__GetLightLevelMethodDescriptions();

  @DefaultMessage("Light level has gone within the range.")
  @Description("")
  String Ev3ColorSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String Ev3ColorSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Get the firmware version on EV3.")
  @Description("")
  String Ev3Commands__GetFirmwareVersionMethodDescriptions();

  @DefaultMessage("Keep the EV3 brick from shutdown for a period of time.")
  @Description("")
  String Ev3Commands__KeepAliveMethodDescriptions();

  @DefaultMessage("Whether to stop the motor before disconnecting.")
  @Description("")
  String Ev3Motors__StopBeforeDisconnectPropertyDescriptions();

  @DefaultMessage("Stop the motors of the robot.")
  @Description("")
  String Ev3Motors__StopMethodDescriptions();

  @DefaultMessage("Specifies the diameter of the wheels attached on motors.")
  @Description("")
  String Ev3Motors__WheelDiameterPropertyDescriptions();

  @DefaultMessage("Called when the touch sensor is pressed.")
  @Description("")
  String Ev3TouchSensor__PressedEventDescriptions();

  @DefaultMessage("Specifies whether the Pressed event should fire when the touch sensor is pressed.")
  @Description("")
  String Ev3TouchSensor__PressedEventEnabledPropertyDescriptions();

  @DefaultMessage("Called when the touch sensor is pressed.")
  @Description("")
  String Ev3TouchSensor__ReleasedEventDescriptions();

  @DefaultMessage("Draw a circle on the screen.")
  @Description("")
  String Ev3UI__DrawCircleMethodDescriptions();

  @DefaultMessage("Draw a line on the screen.")
  @Description("")
  String Ev3UI__DrawLineMethodDescriptions();

  @DefaultMessage("Draw a point on the screen.")
  @Description("")
  String Ev3UI__DrawPointMethodDescriptions();

  @DefaultMessage("Called when the detected distance has gone above the range.")
  @Description("")
  String Ev3UltrasonicSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the distance goes above the TopOfRange.")
  @Description("")
  String Ev3UltrasonicSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Called when the detected distance has gone below the range.")
  @Description("")
  String Ev3UltrasonicSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the distance goes below the BottomOfRange.")
  @Description("")
  String Ev3UltrasonicSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Called when the detected distance has gone within the range.")
  @Description("")
  String Ev3UltrasonicSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String Ev3UltrasonicSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Determines whether moves can extend beyond the canvas borders. Default is false. This should normally be false, and the property is provided for backwards compatibility.")
  @Description("")
  String ExtendMovesOutsideCanvasPropertyDescriptions();

  @DefaultMessage("Returns the extra key that will be passed to the activity.DEPRECATED: New code should use Extras property instead.")
  @Description("")
  String ExtraKeyPropertyDescriptions();

  @DefaultMessage("Returns the extra value that will be passed to the activity.DEPRECATED: New code should use Extras property instead.")
  @Description("")
  String ExtraValuePropertyDescriptions();

  @DefaultMessage("Specifies the list of key-value pairs that will be passed as extra data to the activity.")
  @Description("")
  String ExtrasPropertyDescriptions();

  @DefaultMessage("The user clicked on a map feature.")
  @Description("")
  String FeatureClickEventDescriptions();

  @DefaultMessage("The list of features placed on this FeatureCollection. This list also includes any features created by calls to FeatureFromDescription")
  @Description("")
  String FeatureCollection__FeaturesPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the FeatureCollection as a percentage of the height of the Screen.")
  @Description("")
  String FeatureCollection__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the FeatureCollection, measured in pixels.")
  @Description("")
  String FeatureCollection__HeightPropertyDescriptions();

  @DefaultMessage("Specifies the source URL used to populate the feature collection. If the feature collection was not loaded from a URL, this will be the empty string.")
  @Description("")
  String FeatureCollection__SourcePropertyDescriptions();

  @DefaultMessage("Specifies whether the FeatureCollection should be visible on the screen. Value is true if the FeatureCollection is showing and false if hidden.")
  @Description("")
  String FeatureCollection__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the FeatureCollection as a percentage of the width of the Screen.")
  @Description("")
  String FeatureCollection__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the FeatureCollection, measured in pixels.")
  @Description("")
  String FeatureCollection__WidthPropertyDescriptions();

  @DefaultMessage("The user dragged a map feature.")
  @Description("")
  String FeatureDragEventDescriptions();

  @DefaultMessage("Converts a feature description into an App Inventor map feature. Points are converted into")
  @Description("")
  String FeatureFromDescriptionMethodDescriptions();

  @DefaultMessage("The user long-pressed on a map feature.")
  @Description("")
  String FeatureLongClickEventDescriptions();

  @DefaultMessage("The user started dragging a map feature.")
  @Description("")
  String FeatureStartDragEventDescriptions();

  @DefaultMessage("The user stopped dragging a map feature.")
  @Description("")
  String FeatureStopDragEventDescriptions();

  @DefaultMessage("Loads a collection of features from the given string. If the string is not valid GeoJSON, the ErrorLoadingFeatureCollection error will be run with url = <string>.")
  @Description("")
  String FeaturesFromGeoJSONPropertyDescriptions();

  @DefaultMessage("Deletes a file from storage. Prefix the filename with / to delete a specific file in the SD card, for instance /myFile.txt. will delete the file /sdcard/myFile.txt. If the file does not begin with a /, then the file located in the programs private storage will be deleted. Starting the file with // is an error because assets files cannot be deleted.")
  @Description("")
  String File__DeleteMethodDescriptions();

  @DefaultMessage("Event indicating that the contents from the file have been read.")
  @Description("")
  String File__GotTextEventDescriptions();

  @DefaultMessage("Allows app to access files from the root of the external storage directory (legacy mode).")
  @Description("")
  String File__LegacyModePropertyDescriptions();

  @DefaultMessage("The opacity of the interior of the map feature.")
  @Description("")
  String FillOpacityPropertyDescriptions();

  @DefaultMessage("Fill the screen with a color.")
  @Description("")
  String FillScreenMethodDescriptions();

  @DefaultMessage("Remove the tag from Firebase")
  @Description("")
  String FirebaseDB__ClearTagMethodDescriptions();

  @DefaultMessage("Indicates that the data in the Firebase has changed. Launches an event with the tag and value that have been updated.")
  @Description("")
  String FirebaseDB__DataChangedEventDescriptions();

  @DefaultMessage("Event triggered by the \"RemoveFirst\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.")
  @Description("")
  String FirebaseDB__FirstRemovedEventDescriptions();

  @DefaultMessage("GetValue asks Firebase to get the value stored under the given tag. It will pass valueIfTagNotThere to GotValue if there is no value stored under the tag.")
  @Description("")
  String FirebaseDB__GetValueMethodDescriptions();

  @DefaultMessage("Indicates that a GetValue request has succeeded.")
  @Description("")
  String FirebaseDB__GotValueEventDescriptions();

  @DefaultMessage("Asks Firebase to store the given value under the given tag.")
  @Description("")
  String FirebaseDB__StoreValueMethodDescriptions();

  @DefaultMessage("Indicates that the communication with the Firebase signaled an error.")
  @Description("")
  String FirebaseErrorEventDescriptions();

  @DefaultMessage("Specifies the token for the default Firebase.")
  @Description("")
  String FirebaseTokenPropertyDescriptions();

  @DefaultMessage("Gets the URL for this FirebaseDB.")
  @Description("")
  String FirebaseURLPropertyDescriptions();

  @DefaultMessage("Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history.")
  @Description("")
  String FollowLinksPropertyDescriptions();

  @DefaultMessage("Starts following a user.")
  @Description("")
  String FollowMethodDescriptions();

  @DefaultMessage("This property contains a list of the followers of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestFollowers</code> method.</li> <li> Wait for the <code>FollowersReceived</code> event.</li></ol>The value of this property will then be set to the list of followers (and maintain its value until any subsequent call to <code>RequestFollowers</code>).")
  @Description("")
  String FollowersPropertyDescriptions();

  @DefaultMessage("This event is raised when all of the followers of the logged-in user requested through <code>RequestFollowers</code> have been retrieved. A list of the followers can then be found in the <code>followers</code> parameter or the <code>Followers</code> property.")
  @Description("")
  String FollowersReceivedEventDescriptions();

  @DefaultMessage("Forget end-users login credentials. Has no effect on service authentication")
  @Description("")
  String ForgetLoginMethodDescriptions();

  @DefaultMessage("Text representing the date of an instant in the specified pattern")
  @Description("")
  String FormatDateMethodDescriptions();

  @DefaultMessage("Returns text representing the date and time of an instant in the specified pattern")
  @Description("")
  String FormatDateTimeMethodDescriptions();

  @DefaultMessage("Text representing the time of an instant")
  @Description("")
  String FormatTimeMethodDescriptions();

  @DefaultMessage("This property contains the 20 most recent messages of users being followed. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Specify users to follow with one or more calls to the <code>Follow</code> method.</li> <li> Call the <code>RequestFriendTimeline</code> method.</li> <li> Wait for the <code>FriendTimelineReceived</code> event.</li> </ol>The value of this property will then be set to the list of messages (and maintain its value until any subsequent call to <code>RequestFriendTimeline</code>.")
  @Description("")
  String FriendTimelinePropertyDescriptions();

  @DefaultMessage("This event is raised when the messages requested through <code>RequestFriendTimeline</code> have been retrieved. The <code>timeline</code> parameter and the <code>Timeline</code> property will contain a list of lists, where each sub-list contains a status update of the form (username message)")
  @Description("")
  String FriendTimelineReceivedEventDescriptions();

  @DefaultMessage("Returns whether the VideoPlayer''s video is currently being shown in fullscreen mode or not.")
  @Description("")
  String FullScreenPropertyDescriptions();

  @DefaultMessage("Indicates that a function call completed.")
  @Description("")
  String FunctionCompletedEventDescriptions();

  @DefaultMessage("Setter for the app developer''s API key.")
  @Description("")
  String FusiontablesControl__ApiKeyPropertyDescriptions();

  @DefaultMessage("This event has been deprecated.")
  @Description("")
  String GPSAvailableEventDescriptions();

  @DefaultMessage("This event has been deprecated.")
  @Description("")
  String GPSLostEventDescriptions();

  @DefaultMessage("Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list.")
  @Description("")
  String GameClient__SendMessageMethodDescriptions();

  @DefaultMessage("Set the URL of the game server.")
  @Description("")
  String GameClient__ServiceURLPropertyDescriptions();

  @DefaultMessage("The email address that is being used as the player id for this game client. At present, users must set this manually in oder to join a game. But this property will change in the future so that is set automatically, and users will not be able to change it.")
  @Description("")
  String GameClient__UserEmailAddressPropertyDescriptions();

  @DefaultMessage("Indicates that an error occurred while communicating with the web server.")
  @Description("")
  String GameClient__WebServiceErrorEventDescriptions();

  @DefaultMessage("The game name for this application. The same game ID can have one or more game instances.")
  @Description("")
  String GameIdPropertyDescriptions();

  @DefaultMessage("The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True.")
  @Description("")
  String GenerateColorPropertyDescriptions();

  @DefaultMessage("Whether the light sensor should generate light.")
  @Description("")
  String GenerateLightPropertyDescriptions();

  @DefaultMessage("Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.")
  @Description("")
  String GetBackgroundPixelColorMethodDescriptions();

  @DefaultMessage("Get the battery current.")
  @Description("")
  String GetBatteryCurrentMethodDescriptions();

  @DefaultMessage("Get the battery level for the robot. Returns the voltage in millivolts.")
  @Description("")
  String GetBatteryLevelMethodDescriptions();

  @DefaultMessage("Get the battery voltage.")
  @Description("")
  String GetBatteryVoltageMethodDescriptions();

  @DefaultMessage("Get the brick name of the robot.")
  @Description("")
  String GetBrickNameMethodDescriptions();

  @DefaultMessage("It returns the color code from 0 to 7 corresponding to no color, black, blue, green, yellow, red, white and brown.")
  @Description("")
  String GetColorCodeMethodDescriptions();

  @DefaultMessage("Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.")
  @Description("")
  String GetColorMethodDescriptions();

  @DefaultMessage("Return the color name in one of \"No Color\", \"Black\", \"Blue\", \"Green\", \"Yellow\", \"Red\", \"White\", \"Brown\".")
  @Description("")
  String GetColorNameMethodDescriptions();

  @DefaultMessage("Get the name of currently running program on the robot.")
  @Description("")
  String GetCurrentProgramNameMethodDescriptions();

  @DefaultMessage("Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.")
  @Description("")
  String GetDistanceMethodDescriptions();

  @DefaultMessage("Returns duration of the video in milliseconds.")
  @Description("")
  String GetDurationMethodDescriptions();

  @DefaultMessage("Get the firmware build on EV3.")
  @Description("")
  String GetFirmwareBuildMethodDescriptions();

  @DefaultMessage("Get the hardware version of EV3.")
  @Description("")
  String GetHardwareVersionMethodDescriptions();

  @DefaultMessage("Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String GetInputValuesMethodDescriptions();

  @DefaultMessage("Return the app that installed us")
  @Description("")
  String GetInstallerMethodDescriptions();

  @DefaultMessage("Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.")
  @Description("")
  String GetInstanceListsMethodDescriptions();

  @DefaultMessage("Retrieves messages of the specified type.")
  @Description("")
  String GetMessagesMethodDescriptions();

  @DefaultMessage("Performs an HTTP GET request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String GetMethodDescriptions();

  @DefaultMessage("Returns the instant in time measured as milliseconds since 1970.")
  @Description("")
  String GetMillisMethodDescriptions();

  @DefaultMessage("Get the OS build on EV3.")
  @Description("")
  String GetOSBuildMethodDescriptions();

  @DefaultMessage("Get the OS version on EV3.")
  @Description("")
  String GetOSVersionMethodDescriptions();

  @DefaultMessage("Reads the output state of a motor on the robot.")
  @Description("")
  String GetOutputStateMethodDescriptions();

  @DefaultMessage("Gets the color of the specified point.")
  @Description("")
  String GetPixelColorMethodDescriptions();

  @DefaultMessage("Gets all the rows from a specified fusion table. The tableId field is the id of therequired fusion table. The columns field is a comma-separeted list of the columns to retrieve.")
  @Description("")
  String GetRowsMethodDescriptions();

  @DefaultMessage("Gets all the rows from a fusion table that meet certain conditions. The tableId field isthe id of the required fusion table. The columns field is a comma-separeted list of the columns toretrieve. The conditions field specifies what rows to retrieve from the table, for example the rows in whicha particular column value is not null.")
  @Description("")
  String GetRowsWithConditionsMethodDescriptions();

  @DefaultMessage("Returns the current angle or rotation speed based on current mode, or -1 if the value cannot be read from sensor.")
  @Description("")
  String GetSensorValueMethodDescriptions();

  @DefaultMessage("Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.")
  @Description("")
  String GetSoundLevelMethodDescriptions();

  @DefaultMessage("Get the current tacho count.")
  @Description("")
  String GetTachoCountMethodDescriptions();

  @DefaultMessage("Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.")
  @Description("")
  String GetTagListMethodDescriptions();

  @DefaultMessage("Return a list of all the tags in the data store.")
  @Description("")
  String GetTagsMethodDescriptions();

  @DefaultMessage("Asks the user to speak, and converts the speech to text. Signals the")
  @Description("")
  String GetTextMethodDescriptions();

  @DefaultMessage("Return the our VersionName property")
  @Description("")
  String GetVersionNameMethodDescriptions();

  @DefaultMessage("Returns the IP address of the phone in the form of a String")
  @Description("")
  String GetWifiIpAddressMethodDescriptions();

  @DefaultMessage("Go back to the previous page in the history list. Does nothing if there is no previous page.")
  @Description("")
  String GoBackMethodDescriptions();

  @DefaultMessage("Go forward to the next page in the history list. Does nothing if there is no next page.")
  @Description("")
  String GoForwardMethodDescriptions();

  @DefaultMessage("Loads the home URL page. This happens automatically when the home URL is changed.")
  @Description("")
  String GoHomeMethodDescriptions();

  @DefaultMessage("Load the page at the given URL.")
  @Description("")
  String GoToUrlMethodDescriptions();

  @DefaultMessage("If true, then SendMessage will attempt to send messages over Wifi using Google Voice. This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account. If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component.")
  @Description("")
  String GoogleVoiceEnabledPropertyDescriptions();

  @DefaultMessage("Event confirming that the Voting service received the ballot.")
  @Description("")
  String GotBallotConfirmationEventDescriptions();

  @DefaultMessage("Event indicating that a ballot was retrieved from the Web service and that the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set. This is always preceded by a call to the method <code>RequestBallot</code>.")
  @Description("")
  String GotBallotEventDescriptions();

  @DefaultMessage("Event indicating that classification has finished successfully. Result is of the form [[class1, confidence1], [class2, confidence2], ..., [class10, confidence10]].")
  @Description("")
  String GotClassificationEventDescriptions();

  @DefaultMessage("Event triggered when the Openrouteservice returns the directions.")
  @Description("")
  String GotDirectionsEventDescriptions();

  @DefaultMessage("A GeoJSON document was successfully read from url. The features specified in the document are provided as a list in features.")
  @Description("")
  String GotFeaturesEventDescriptions();

  @DefaultMessage("Event indicating that a request has finished.")
  @Description("")
  String GotFileEventDescriptions();

  @DefaultMessage("Indicates that a new message has been received.")
  @Description("")
  String GotMessageEventDescriptions();

  @DefaultMessage("Indicates that the Fusion Tables query has finished processing, with a result. The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.")
  @Description("")
  String GotResultEventDescriptions();

  @DefaultMessage("Event triggered when the Yandex.Translate service returns the translated text. This event also provides a response code for error handling. If the responseCode is not 200, then something went wrong with the call, and the translation will not be available.")
  @Description("")
  String GotTranslationEventDescriptions();

  @DefaultMessage("Indicates that the gyroscope sensor data has changed. The timestamp parameter is the time in nanoseconds at which the event occurred.")
  @Description("")
  String GyroscopeChangedEventDescriptions();

  @DefaultMessage("Indicates whether a gyroscope sensor is available.")
  @Description("")
  String GyroscopeSensor__AvailablePropertyDescriptions();

  @DefaultMessage("Enabled property getter method.")
  @Description("")
  String GyroscopeSensor__EnabledPropertyDescriptions();

  @DefaultMessage("Returns the content of the Label as HTML. This is only useful if the HTMLFormat property is true.")
  @Description("")
  String HTMLContentPropertyDescriptions();

  @DefaultMessage("If true, then this label will show html text else it will show plain text. Note: Not all HTML is supported.")
  @Description("")
  String HTMLFormatPropertyDescriptions();

  @DefaultMessage("If `true")
  @Description("")
  String HasAccuracyPropertyDescriptions();

  @DefaultMessage("If `true")
  @Description("")
  String HasAltitudePropertyDescriptions();

  @DefaultMessage("If `true")
  @Description("")
  String HasLongitudeLatitudePropertyDescriptions();

  @DefaultMessage("Reports whether or not the label appears with margins. All four margins (left, right, top, bottom) are the same. This property has no effect in the designer, where labels are always shown with margins.")
  @Description("")
  String HasMarginsPropertyDescriptions();

  @DefaultMessage("Hide the infobox if it is shown. If the infobox is not visible this function has no effect.")
  @Description("")
  String HideInfoboxMethodDescriptions();

  @DefaultMessage("Returns `true")
  @Description("")
  String HighByteFirstPropertyDescriptions();

  @DefaultMessage("Constructs holes in a polygon from a given list of coordinates per hole.")
  @Description("")
  String HolePointsFromStringPropertyDescriptions();

  @DefaultMessage("Specifies the points of any holes in the `Polygon`. The `HolePoints` property is a list of lists, with each sublist containing `(latitude, longitude)` points representing a hole.")
  @Description("")
  String HolePointsPropertyDescriptions();

  @DefaultMessage("URL of the page the WebViewer should initially open to. Setting this will load the page.")
  @Description("")
  String HomeUrlPropertyDescriptions();

  @DefaultMessage("A number that encodes how contents of the HorizontalArrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement''s width is automatic.")
  @Description("")
  String HorizontalArrangement__AlignHorizontalPropertyDescriptions();

  @DefaultMessage("A number that encodes how the contents of the HorizontalArrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement''s height is automatic.")
  @Description("")
  String HorizontalArrangement__AlignVerticalPropertyDescriptions();

  @DefaultMessage("Returns the background color of the HorizontalArrangement")
  @Description("")
  String HorizontalArrangement__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the HorizontalArrangement as a percentage of the height of the Screen.")
  @Description("")
  String HorizontalArrangement__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the HorizontalArrangement, measured in pixels.")
  @Description("")
  String HorizontalArrangement__HeightPropertyDescriptions();

  @DefaultMessage("Returns the path of the background image of the `HorizontalArrangement`.")
  @Description("")
  String HorizontalArrangement__ImagePropertyDescriptions();

  @DefaultMessage("Specifies whether the HorizontalArrangement should be visible on the screen. Value is true if the HorizontalArrangement is showing and false if hidden.")
  @Description("")
  String HorizontalArrangement__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the HorizontalArrangement as a percentage of the width of the Screen.")
  @Description("")
  String HorizontalArrangement__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the HorizontalArrangement, measured in pixels.")
  @Description("")
  String HorizontalArrangement__WidthPropertyDescriptions();

  @DefaultMessage("A number that encodes how contents of the HorizontalScrollArrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement''s width is automatic.")
  @Description("")
  String HorizontalScrollArrangement__AlignHorizontalPropertyDescriptions();

  @DefaultMessage("A number that encodes how the contents of the HorizontalScrollArrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement''s height is automatic.")
  @Description("")
  String HorizontalScrollArrangement__AlignVerticalPropertyDescriptions();

  @DefaultMessage("Returns the background color of the HorizontalScrollArrangement")
  @Description("")
  String HorizontalScrollArrangement__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the HorizontalScrollArrangement as a percentage of the height of the Screen.")
  @Description("")
  String HorizontalScrollArrangement__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the HorizontalScrollArrangement, measured in pixels.")
  @Description("")
  String HorizontalScrollArrangement__HeightPropertyDescriptions();

  @DefaultMessage("Returns the path of the background image of the `HorizontalScrollArrangement`.")
  @Description("")
  String HorizontalScrollArrangement__ImagePropertyDescriptions();

  @DefaultMessage("Specifies whether the HorizontalScrollArrangement should be visible on the screen. Value is true if the HorizontalScrollArrangement is showing and false if hidden.")
  @Description("")
  String HorizontalScrollArrangement__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the HorizontalScrollArrangement as a percentage of the width of the Screen.")
  @Description("")
  String HorizontalScrollArrangement__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the HorizontalScrollArrangement, measured in pixels.")
  @Description("")
  String HorizontalScrollArrangement__WidthPropertyDescriptions();

  @DefaultMessage("Returns the hour of the day (0-23) from the instant.")
  @Description("")
  String HourMethodDescriptions();

  @DefaultMessage("The hour of the last time set using the time picker. The hour is in a 24 hour format. If the last time set was 11:53 pm, this property will return 23.")
  @Description("")
  String HourPropertyDescriptions();

  @DefaultMessage("Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &#39;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.")
  @Description("")
  String HtmlTextDecodeMethodDescriptions();

  @DefaultMessage("Called when a change is detected in the ambient air humidity (expressed as a percentage).")
  @Description("")
  String HumidityChangedEventDescriptions();

  @DefaultMessage("The relative ambient humidity as a percentage, if the sensor is available and enabled.")
  @Description("")
  String HumidityPropertyDescriptions();

  @DefaultMessage("Specifies whether or not the device has the hardware to support the Hygrometer component.")
  @Description("")
  String Hygrometer__AvailablePropertyDescriptions();

  @DefaultMessage("If enabled, then device will listen for changes.")
  @Description("")
  String Hygrometer__EnabledPropertyDescriptions();

  @DefaultMessage("The image used for your App''s display icon should be a square png or jpeg image with dimensions up to 1024x1024 pixels. Larger images may cause compiling or installing the app to fail. The build server will generate images of standard dimensions for Android devices.")
  @Description("")
  String IconPropertyDescriptions();

  @DefaultMessage("Determine whether or not to ignore SSL errors. Set to true to ignore errors. Use this to accept self signed certificates from websites.")
  @Description("")
  String IgnoreSslErrorsPropertyDescriptions();

  @DefaultMessage("Specifies the image shown for the `Marker`. If set to the empty string \"\", then the default marker icon will be used.")
  @Description("")
  String ImageAssetPropertyDescriptions();

  @DefaultMessage("Event to be raised after the `ImagePicker` activity returns its result and the properties have been filled in.")
  @Description("")
  String ImagePicker__AfterPickingEventDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String ImagePicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Event to raise when the `ImagePicker` is clicked or the picker is shown using the")
  @Description("")
  String ImagePicker__BeforePickingEventDescriptions();

  @DefaultMessage("If set, user can tap ImagePicker to cause action.")
  @Description("")
  String ImagePicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, ImagePicker text is displayed in bold.")
  @Description("")
  String ImagePicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, ImagePicker text is displayed in italics.")
  @Description("")
  String ImagePicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for ImagePicker text.")
  @Description("")
  String ImagePicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for ImagePicker text.")
  @Description("")
  String ImagePicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the ImagePicker so it is now possible to click it.")
  @Description("")
  String ImagePicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the ImagePicker as a percentage of the height of the Screen.")
  @Description("")
  String ImagePicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the ImagePicker, measured in pixels.")
  @Description("")
  String ImagePicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String ImagePicker__ImagePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the ImagePicker so it is now no longer possible to click it.")
  @Description("")
  String ImagePicker__LostFocusEventDescriptions();

  @DefaultMessage("Opens the ImagePicker, as though the user clicked on it.")
  @Description("")
  String ImagePicker__OpenMethodDescriptions();

  @DefaultMessage("Path to the file containing the image that was selected.")
  @Description("")
  String ImagePicker__SelectionPropertyDescriptions();

  @DefaultMessage("Returns the style of the `ImagePicker`.")
  @Description("")
  String ImagePicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a ImagePicker that has an image as background.")
  @Description("")
  String ImagePicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String ImagePicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String ImagePicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on ImagePicker.")
  @Description("")
  String ImagePicker__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the ImagePicker was pressed down.")
  @Description("")
  String ImagePicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the ImagePicker has been released.")
  @Description("")
  String ImagePicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the ImagePicker should be visible on the screen. Value is true if the ImagePicker is showing and false if hidden.")
  @Description("")
  String ImagePicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ImagePicker as a percentage of the width of the Screen.")
  @Description("")
  String ImagePicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ImagePicker, measured in pixels.")
  @Description("")
  String ImagePicker__WidthPropertyDescriptions();

  @DefaultMessage("Makes the ImageSprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.")
  @Description("")
  String ImageSprite__BounceMethodDescriptions();

  @DefaultMessage("Indicates whether a collision has been registered between this ImageSprite and the passed sprite (Ball or ImageSprite).")
  @Description("")
  String ImageSprite__CollidingWithMethodDescriptions();

  @DefaultMessage("Event handler called when a ImageSprite is dragged. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the ImageSprite won''t actually move anywhere in response to the Dragged event unless MoveTo is explicitly called. For smooth movement, each of its coordinates should be set to the sum of its initial value and the difference between its current and previous values.")
  @Description("")
  String ImageSprite__DraggedEventDescriptions();

  @DefaultMessage("Event handler called when the ImageSprite reaches an edge of the screen. If Bounce is then called with that edge, the ImageSprite will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north (1), northeast (2), east (3), southeast (4), south (-1), southwest (-2), west (-3), and northwest (-4).")
  @Description("")
  String ImageSprite__EdgeReachedEventDescriptions();

  @DefaultMessage("Controls whether the ImageSprite moves and can be interacted with through collisions, dragging, touching, and flinging.")
  @Description("")
  String ImageSprite__EnabledPropertyDescriptions();

  @DefaultMessage("Event handler called when a fling gesture (quick swipe) is made on an enabled ImageSprite. This provides the x and y coordinates of the start of the fling (relative to the upper left of the canvas), the speed (pixels per millisecond), the heading (0-360 degrees), and the x and y velocity components of the fling''s vector.")
  @Description("")
  String ImageSprite__FlungEventDescriptions();

  @DefaultMessage("Returns the ImageSprite''s heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.")
  @Description("")
  String ImageSprite__HeadingPropertyDescriptions();

  @DefaultMessage("The height of the ImageSprite in pixels.")
  @Description("")
  String ImageSprite__HeightPropertyDescriptions();

  @DefaultMessage("The interval in milliseconds at which the ImageSprite''s position is updated. For example, if the interval is 50 and the speed is 10, then every 50 milliseconds the sprite will move 10 pixels in the heading direction.")
  @Description("")
  String ImageSprite__IntervalPropertyDescriptions();

  @DefaultMessage("Moves the ImageSprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the ImageSprite is too wide to fit on the canvas, this aligns the left side of the ImageSprite with the left side of the canvas. If the ImageSprite is too tall to fit on the canvas, this aligns the top side of the ImageSprite with the top side of the canvas.")
  @Description("")
  String ImageSprite__MoveIntoBoundsMethodDescriptions();

  @DefaultMessage("Moves the ImageSprite so that its left top corner is at the specified x and y coordinates.")
  @Description("")
  String ImageSprite__MoveToMethodDescriptions();

  @DefaultMessage("The picture that determines the ImageSprite''s appearance.")
  @Description("")
  String ImageSprite__PicturePropertyDescriptions();

  @DefaultMessage("Sets the heading of the ImageSprite toward the point with the coordinates (x, y).")
  @Description("")
  String ImageSprite__PointInDirectionMethodDescriptions();

  @DefaultMessage("Turns the ImageSprite to point towards a designated target sprite (Ball or ImageSprite). The new heading will be parallel to the line joining the centerpoints of the two sprites.")
  @Description("")
  String ImageSprite__PointTowardsMethodDescriptions();

  @DefaultMessage("The number of pixels that the ImageSprite should move every interval, if enabled.")
  @Description("")
  String ImageSprite__SpeedPropertyDescriptions();

  @DefaultMessage("Event handler called when the user begins touching an enabled ImageSprite (placing their finger on a ImageSprite and leaving it there). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.")
  @Description("")
  String ImageSprite__TouchDownEventDescriptions();

  @DefaultMessage("Event handler called when the user stops touching an enabled ImageSprite (lifting their finger after a TouchDown event). This provides the x and y coordinates of the touch, relative to the upper left of the canvas.")
  @Description("")
  String ImageSprite__TouchUpEventDescriptions();

  @DefaultMessage("Event handler called when the user touches an enabled ImageSprite and then immediately lifts their finger. The provided x and y coordinates are relative to the upper left of the canvas.")
  @Description("")
  String ImageSprite__TouchedEventDescriptions();

  @DefaultMessage("Whether the ImageSprite is visible.")
  @Description("")
  String ImageSprite__VisiblePropertyDescriptions();

  @DefaultMessage("The width of the ImageSprite in pixels.")
  @Description("")
  String ImageSprite__WidthPropertyDescriptions();

  @DefaultMessage("The horizontal coordinate of the left edge of the ImageSprite, increasing as the ImageSprite moves right.")
  @Description("")
  String ImageSprite__XPropertyDescriptions();

  @DefaultMessage("The vertical coordinate of the top edge of the ImageSprite, increasing as the ImageSprite moves down.")
  @Description("")
  String ImageSprite__YPropertyDescriptions();

  @DefaultMessage("How the `ImageSprite` should be layered relative to other")
  @Description("")
  String ImageSprite__ZPropertyDescriptions();

  @DefaultMessage("An event that occurs when an image is clicked.")
  @Description("")
  String Image__ClickEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the Image as a percentage of the height of the Screen.")
  @Description("")
  String Image__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Image, measured in pixels.")
  @Description("")
  String Image__HeightPropertyDescriptions();

  @DefaultMessage("Returns the path of the image''s picture.")
  @Description("")
  String Image__PicturePropertyDescriptions();

  @DefaultMessage("Specifies whether the Image should be visible on the screen. Value is true if the Image is showing and false if hidden.")
  @Description("")
  String Image__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Image as a percentage of the width of the Screen.")
  @Description("")
  String Image__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Image, measured in pixels.")
  @Description("")
  String Image__WidthPropertyDescriptions();

  @DefaultMessage("Event indicating that an incoming phone call is answered. phoneNumber is the incoming call phone number.")
  @Description("")
  String IncomingCallAnsweredEventDescriptions();

  @DefaultMessage("Indicates that something has occurred which the player should know about.")
  @Description("")
  String InfoEventDescriptions();

  @DefaultMessage("The Initialize event is run when the Screen starts and is only run once per screen.")
  @Description("")
  String InitializeEventDescriptions();

  @DefaultMessage("Initializes serial connection.")
  @Description("")
  String InitializeSerialMethodDescriptions();

  @DefaultMessage("Gets or sets the input mode for classification. Valid values are \"Video\" (the default) and \"Image\".")
  @Description("")
  String InputModePropertyDescriptions();

  @DefaultMessage("Inserts a row into the specified fusion table. The tableId field is the id of thefusion table. The columns is a comma-separated list of the columns to insert values into. The values field specifies what values to insert into each column.")
  @Description("")
  String InsertRowMethodDescriptions();

  @DefaultMessage("Return the ACRA Installation ID")
  @Description("")
  String InstallationIdMethodDescriptions();

  @DefaultMessage("Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.")
  @Description("")
  String InstanceIdChangedEventDescriptions();

  @DefaultMessage("The game instance id. Taken together,the game ID and the instance ID uniquely identify the game.")
  @Description("")
  String InstanceIdPropertyDescriptions();

  @DefaultMessage("An invalid coordinate was supplied during a maps operation. The message parameter will have more details about the issue.")
  @Description("")
  String InvalidPointEventDescriptions();

  @DefaultMessage("Invites a player to this game instance.")
  @Description("")
  String InviteMethodDescriptions();

  @DefaultMessage("Indicates that a user has been invited to this game instance.")
  @Description("")
  String InvitedEventDescriptions();

  @DefaultMessage("The set of game instances to which this player has been invited but has not yet joined. To ensure current values are returned, first invoke GetInstanceLists.")
  @Description("")
  String InvitedInstancesPropertyDescriptions();

  @DefaultMessage("Returns true if this BluetoothServer component is accepting an incoming connection.")
  @Description("")
  String IsAcceptingPropertyDescriptions();

  @DefaultMessage("This event is raised after the program calls <code>Authorize</code> if the authorization was successful. It is also called after a call to <code>CheckAuthorized</code> if we already have a valid access token. After this event has been raised, any other method for this component can be called.")
  @Description("")
  String IsAuthorizedEventDescriptions();

  @DefaultMessage("On devices with API level 14 (LEVEL_ICE_CREAM_SANDWICH) or higher, this property returned is accurate. But on old devices with API level lower than 14, it may not return the current state of connection(e.g., it might be disconnected but you may not know until you attempt to read/write the socket.")
  @Description("")
  String IsConnectedPropertyDescriptions();

  @DefaultMessage("Checks whether the Bluetooth device with the specified address is paired.")
  @Description("")
  String IsDevicePairedMethodDescriptions();

  @DefaultMessage("Returns true when the Serial has been initialized.")
  @Description("")
  String IsInitializedPropertyDescriptions();

  @DefaultMessage("Returns true when the Serial connection is open.")
  @Description("")
  String IsOpenPropertyDescriptions();

  @DefaultMessage("Reports whether the media is playing")
  @Description("")
  String IsPlayingPropertyDescriptions();

  @DefaultMessage("Returns true if the touch sensor is pressed.")
  @Description("")
  String IsPressedMethodDescriptions();

  @DefaultMessage("The background color of the ListPicker items.")
  @Description("")
  String ItemBackgroundColorPropertyDescriptions();

  @DefaultMessage("The text color of the ListPicker items.")
  @Description("")
  String ItemTextColorPropertyDescriptions();

  @DefaultMessage("The set of game instances in which this player is participating. To ensure current values are returned, first invoke GetInstanceLists.")
  @Description("")
  String JoinedInstancesPropertyDescriptions();

  @DefaultMessage("Returns the value of a built-in type (i.e., boolean, number, text, list, dictionary) in its JavaScript Object Notation representation. If the value cannot be represented as JSON, the Screen''s ErrorOccurred event will be run, if any, and the Web component will return the empty string.")
  @Description("")
  String JsonObjectEncodeMethodDescriptions();

  @DefaultMessage("Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list `[x, y, z]` decodes to a list `(x y z)`, A JSON object with key A and value B, (denoted as `")
  @Description("")
  String JsonTextDecodeMethodDescriptions();

  @DefaultMessage("Decodes the given JSON encoded value to produce a corresponding App Inventor value. A JSON list [x, y, z] decodes to a list (x y z). A JSON Object with name A and value B, denoted as \\")
  @Description("")
  String JsonTextDecodeWithDictionariesMethodDescriptions();

  @DefaultMessage("Returns value of keepRunningWhenOnPause")
  @Description("")
  String KeepRunningWhenOnPausePropertyDescriptions();

  @DefaultMessage("Specifies the path of the private key file. This key file is used to get access to the FusionTables API.")
  @Description("")
  String KeyFilePropertyDescriptions();

  @DefaultMessage("Returns the label''s background color as an alpha-red-green-blue integer.")
  @Description("")
  String Label__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Returns true if the label''s text should be bold. If bold has been requested, this property will return true, even if the font does not support bold.")
  @Description("")
  String Label__FontBoldPropertyDescriptions();

  @DefaultMessage("Returns true if the label''s text should be italic. If italic has been requested, this property will return true, even if the font does not support italic.")
  @Description("")
  String Label__FontItalicPropertyDescriptions();

  @DefaultMessage("Returns the label''s text''s font size, measured in sp(scale-independent pixels).")
  @Description("")
  String Label__FontSizePropertyDescriptions();

  @DefaultMessage("Returns the label''s text''s font face as default, serif, sans serif, or monospace.")
  @Description("")
  String Label__FontTypefacePropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Label as a percentage of the height of the Screen.")
  @Description("")
  String Label__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Label, measured in pixels.")
  @Description("")
  String Label__HeightPropertyDescriptions();

  @DefaultMessage("Returns the alignment of the label''s text: center, normal (e.g., left-justified if text is written left to right), or opposite (e.g., right-justified if text is written left to right).")
  @Description("")
  String Label__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Returns the label''s text color as an alpha-red-green-blue integer.")
  @Description("")
  String Label__TextColorPropertyDescriptions();

  @DefaultMessage("Returns the text displayed by the label.")
  @Description("")
  String Label__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the Label should be visible on the screen. Value is true if the Label is showing and false if hidden.")
  @Description("")
  String Label__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Label as a percentage of the width of the Screen.")
  @Description("")
  String Label__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Label, measured in pixels.")
  @Description("")
  String Label__WidthPropertyDescriptions();

  @DefaultMessage("Returns the content of the most recently received tag.")
  @Description("")
  String LastMessagePropertyDescriptions();

  @DefaultMessage("Derives latitude of given address")
  @Description("")
  String LatitudeFromAddressMethodDescriptions();

  @DefaultMessage("The game''s leader. At any time, each game instance has only one leader, but the leader may change with time. Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server.")
  @Description("")
  String LeaderPropertyDescriptions();

  @DefaultMessage("Leaves the current instance.")
  @Description("")
  String LeaveInstanceMethodDescriptions();

  @DefaultMessage("Called when a change is detected in the light level.")
  @Description("")
  String LightChangedEventDescriptions();

  @DefaultMessage("Specifies whether or not the device has the hardware to support the LightSensor component.")
  @Description("")
  String LightSensor__AvailablePropertyDescriptions();

  @DefaultMessage("If enabled, then device will listen for changes.")
  @Description("")
  String LightSensor__EnabledPropertyDescriptions();

  @DefaultMessage("The user clicked on the LineString.")
  @Description("")
  String LineString__ClickEventDescriptions();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the LineString.")
  @Description("")
  String LineString__DescriptionPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between a LineString and a latitude, longitude point.")
  @Description("")
  String LineString__DistanceToPointMethodDescriptions();

  @DefaultMessage("The user dragged the LineString.")
  @Description("")
  String LineString__DragEventDescriptions();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the LineString by long-pressing and then dragging the LineString to a new location.")
  @Description("")
  String LineString__DraggablePropertyDescriptions();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the LineString.")
  @Description("")
  String LineString__EnableInfoboxPropertyDescriptions();

  @DefaultMessage("The user long-pressed on the LineString. This event will only trigger if Draggable is false.")
  @Description("")
  String LineString__LongClickEventDescriptions();

  @DefaultMessage("Set the points of the LineString from a specially-coded character string of the form: [[latitude1, longitude1], [latitude2, longitude2], ...]")
  @Description("")
  String LineString__PointsFromStringPropertyDescriptions();

  @DefaultMessage("The list of points, as pairs of latitudes and longitudes, in the `LineString`.")
  @Description("")
  String LineString__PointsPropertyDescriptions();

  @DefaultMessage("Show the infobox for the LineString. This will show the infobox even if EnableInfobox is set to false.")
  @Description("")
  String LineString__ShowInfoboxMethodDescriptions();

  @DefaultMessage("The paint color used to outline the LineString.")
  @Description("")
  String LineString__StrokeColorPropertyDescriptions();

  @DefaultMessage("Sets or gets the width of the stroke used to outline the `LineString`.")
  @Description("")
  String LineString__StrokeWidthPropertyDescriptions();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the LineString.")
  @Description("")
  String LineString__TitlePropertyDescriptions();

  @DefaultMessage("Returns the type of the map feature. For LineString, this returns the text \"LineString\".")
  @Description("")
  String LineString__TypePropertyDescriptions();

  @DefaultMessage("Specifies whether the LineString should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String LineString__VisiblePropertyDescriptions();

  @DefaultMessage("The width of lines drawn on the canvas.")
  @Description("")
  String LineWidthPropertyDescriptions();

  @DefaultMessage("Returns a list containing the names of matching files found on the robot.")
  @Description("")
  String ListFilesMethodDescriptions();

  @DefaultMessage("Event to be raised after the `ListPicker` activity returns its result and the properties have been filled in.")
  @Description("")
  String ListPicker__AfterPickingEventDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String ListPicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Event to raise when the `ListPicker` is clicked or the picker is shown using the")
  @Description("")
  String ListPicker__BeforePickingEventDescriptions();

  @DefaultMessage("Set the list of choices from a string of comma-separated values.")
  @Description("")
  String ListPicker__ElementsFromStringPropertyDescriptions();

  @DefaultMessage("Specifies the list of choices to display.")
  @Description("")
  String ListPicker__ElementsPropertyDescriptions();

  @DefaultMessage("If set, user can tap ListPicker to cause action.")
  @Description("")
  String ListPicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, ListPicker text is displayed in bold.")
  @Description("")
  String ListPicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, ListPicker text is displayed in italics.")
  @Description("")
  String ListPicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for ListPicker text.")
  @Description("")
  String ListPicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for ListPicker text.")
  @Description("")
  String ListPicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the ListPicker so it is now possible to click it.")
  @Description("")
  String ListPicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the ListPicker as a percentage of the height of the Screen.")
  @Description("")
  String ListPicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the ListPicker, measured in pixels.")
  @Description("")
  String ListPicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String ListPicker__ImagePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the ListPicker so it is now no longer possible to click it.")
  @Description("")
  String ListPicker__LostFocusEventDescriptions();

  @DefaultMessage("Opens the ListPicker, as though the user clicked on it.")
  @Description("")
  String ListPicker__OpenMethodDescriptions();

  @DefaultMessage("The index of the currently selected item, starting at 1. If no item is selected, the value will be 0. If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text.")
  @Description("")
  String ListPicker__SelectionIndexPropertyDescriptions();

  @DefaultMessage("The selected item. When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value. If the value does not appear, SelectionIndex will be set to 0.")
  @Description("")
  String ListPicker__SelectionPropertyDescriptions();

  @DefaultMessage("Returns the style of the `ListPicker`.")
  @Description("")
  String ListPicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a ListPicker that has an image as background.")
  @Description("")
  String ListPicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Returns current state of ShowFilterBar indicating if Search Filter Bar will be displayed on ListPicker or not")
  @Description("")
  String ListPicker__ShowFilterBarPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String ListPicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String ListPicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on ListPicker.")
  @Description("")
  String ListPicker__TextPropertyDescriptions();

  @DefaultMessage("Optional title displayed at the top of the list of choices.")
  @Description("")
  String ListPicker__TitlePropertyDescriptions();

  @DefaultMessage("Indicates that the ListPicker was pressed down.")
  @Description("")
  String ListPicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the ListPicker has been released.")
  @Description("")
  String ListPicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the ListPicker should be visible on the screen. Value is true if the ListPicker is showing and false if hidden.")
  @Description("")
  String ListPicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ListPicker as a percentage of the width of the Screen.")
  @Description("")
  String ListPicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ListPicker, measured in pixels.")
  @Description("")
  String ListPicker__WidthPropertyDescriptions();

  @DefaultMessage("Simple event to be raised after the an element has been chosen in the list. The selected element is available in the Selection property.")
  @Description("")
  String ListView__AfterPickingEventDescriptions();

  @DefaultMessage("The color of the listview background.")
  @Description("")
  String ListView__BackgroundColorPropertyDescriptions();

  @DefaultMessage("The TextView elements specified as a string with the items separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list.")
  @Description("")
  String ListView__ElementsFromStringPropertyDescriptions();

  @DefaultMessage("List of text elements to show in the ListView. This will signal an error if the elements are not text strings.")
  @Description("")
  String ListView__ElementsPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the ListView as a percentage of the height of the Screen.")
  @Description("")
  String ListView__HeightPercentPropertyDescriptions();

  @DefaultMessage("Determines the height of the list on the view.")
  @Description("")
  String ListView__HeightPropertyDescriptions();

  @DefaultMessage("The index of the currently selected item, starting at 1. If no item is selected, the value will be 0. If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListView, SelectionIndex will be set to 0, and Selection will be set to the empty text.")
  @Description("")
  String ListView__SelectionIndexPropertyDescriptions();

  @DefaultMessage("Returns the text last selected in the ListView.")
  @Description("")
  String ListView__SelectionPropertyDescriptions();

  @DefaultMessage("Sets visibility of ShowFilterBar. True will show the bar, False will hide it.")
  @Description("")
  String ListView__ShowFilterBarPropertyDescriptions();

  @DefaultMessage("The text color of the listview items.")
  @Description("")
  String ListView__TextColorPropertyDescriptions();

  @DefaultMessage("Specifies whether the ListView should be visible on the screen. Value is true if the ListView is showing and false if hidden.")
  @Description("")
  String ListView__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ListView as a percentage of the width of the Screen.")
  @Description("")
  String ListView__WidthPercentPropertyDescriptions();

  @DefaultMessage("Determines the width of the list on the view.")
  @Description("")
  String ListView__WidthPropertyDescriptions();

  @DefaultMessage("An error was encountered while processing a GeoJSON document at the given url. The responseCode parameter will contain an HTTP status code and the errorMessage parameter will contain a detailed error message.")
  @Description("")
  String LoadErrorEventDescriptions();

  @DefaultMessage("<p>Load a feature collection in <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> format from the given url. On success, the event GotFeatures will be raised with the given url and a list of the features parsed from the GeoJSON as a list of (key, value) pairs. On failure, the LoadError event will be raised with any applicable HTTP response code and error message.</p>")
  @Description("")
  String LoadFromURLMethodDescriptions();

  @DefaultMessage("Setter for the loading dialog''s message.")
  @Description("")
  String LoadingDialogMessagePropertyDescriptions();

  @DefaultMessage("Indicates that a new location has been detected.")
  @Description("")
  String LocationChangedEventDescriptions();

  @DefaultMessage("Uses the provided LocationSensor for user location data rather than the built-in location provider.")
  @Description("")
  String LocationSensorPropertyDescriptions();

  @DefaultMessage("Indicates whether the user has specified that the sensor should listen for location changes and raise the corresponding events.")
  @Description("")
  String LocationSensor__EnabledPropertyDescriptions();

  @DefaultMessage("The most recently available latitude value in degrees reported to 5 decimal places. If no value is available, 0 will be returned. Latitude is a value between 90 (north) and -90 (south), where 0 marks the Equator.")
  @Description("")
  String LocationSensor__LatitudePropertyDescriptions();

  @DefaultMessage("The most recent available longitude value in degrees reported to 5 decimal places. If no value is available, 0 will be returned. Longitude is a value between 180 (east) and -180 (west), where 0 marks the Prime Meridian.")
  @Description("")
  String LocationSensor__LongitudePropertyDescriptions();

  @DefaultMessage("Writes an error message to the Android system log. See the Google Android documentation for how to access the log.")
  @Description("")
  String LogErrorMethodDescriptions();

  @DefaultMessage("Writes an information message to the Android log.")
  @Description("")
  String LogInfoMethodDescriptions();

  @DefaultMessage("Writes a warning message to the Android log. See the Google Android documentation for how to access the log.")
  @Description("")
  String LogWarningMethodDescriptions();

  @DefaultMessage("Twitter''s API no longer supports login via username and password. Use the Authorize call instead.")
  @Description("")
  String LoginMethodDescriptions();

  @DefaultMessage("The user long-pressed at a point on the map.")
  @Description("")
  String LongPressAtPointEventDescriptions();

  @DefaultMessage("Derives longitude of given address")
  @Description("")
  String LongitudeFromAddressMethodDescriptions();

  @DefaultMessage("If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing.")
  @Description("")
  String LoopPropertyDescriptions();

  @DefaultMessage("Returns the count of available bytes to read.")
  @Description("")
  String LsGetStatusMethodDescriptions();

  @DefaultMessage("Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String LsReadMethodDescriptions();

  @DefaultMessage("Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String LsWriteMethodDescriptions();

  @DefaultMessage("The most recent light level, in lux, if the sensor is available and enabled.")
  @Description("")
  String LuxPropertyDescriptions();

  @DefaultMessage("Triggers when magnetic field has changed, setting the new values in parameters.")
  @Description("")
  String MagneticChangedEventDescriptions();

  @DefaultMessage("Indicates that there is a magnetic field sensor in the device and it is available.")
  @Description("")
  String MagneticFieldSensor__AvailablePropertyDescriptions();

  @DefaultMessage("Indicates whether or not the magnetic field sensor is enabled and working.")
  @Description("")
  String MagneticFieldSensor__EnabledPropertyDescriptions();

  @DefaultMessage("Indicates the maximum range the magnetic sensor can reach.")
  @Description("")
  String MagneticFieldSensor__MaximumRangePropertyDescriptions();

  @DefaultMessage("Returns a number between 0 and 1 indicating how much the device is tilted. It gives the magnitude of the force that would be felt by a ball rolling on the surface of the device. For the angle of tilt, use")
  @Description("")
  String MagnitudePropertyDescriptions();

  @DefaultMessage("Returns an instant in time specified by year, month, date in UTC.Valid values for the month field are 1-12 and 1-31 for the day field.")
  @Description("")
  String MakeDateMethodDescriptions();

  @DefaultMessage("Returns an instant in time specified by the milliseconds since 1970 in UTC.")
  @Description("")
  String MakeInstantFromMillisMethodDescriptions();

  @DefaultMessage("Returns an instant in time specified by year, month, date, hour, minute, second in UTC.")
  @Description("")
  String MakeInstantFromPartsMethodDescriptions();

  @DefaultMessage("Returns an instant in time specified by MM/dd/YYYY hh:mm:ss or MM/dd/YYYY or hh:mm.")
  @Description("")
  String MakeInstantMethodDescriptions();

  @DefaultMessage("Asks the server to create a new instance of this game.")
  @Description("")
  String MakeNewInstanceMethodDescriptions();

  @DefaultMessage("Directly initiates a phone call using the number in the PhoneNumber property.")
  @Description("")
  String MakePhoneCallDirectMethodDescriptions();

  @DefaultMessage("Launches the default dialer app set to start a phone call usingthe number in the PhoneNumber property.")
  @Description("")
  String MakePhoneCallMethodDescriptions();

  @DefaultMessage("Returns an instant in time specified by hour, minute, second in UTC.")
  @Description("")
  String MakeTimeMethodDescriptions();

  @DefaultMessage("Set the type of map tile used for the base tile layer. Valid values are: 1. Roads 2. Aerial 3. Terrain")
  @Description("")
  String MapTypePropertyDescriptions();

  @DefaultMessage("The list of features placed on this Map. This list also includes any features created by calls to FeatureFromDescription")
  @Description("")
  String Map__FeaturesPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Map as a percentage of the height of the Screen.")
  @Description("")
  String Map__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Map, measured in pixels.")
  @Description("")
  String Map__HeightPropertyDescriptions();

  @DefaultMessage("The latitude of the center of the map.")
  @Description("")
  String Map__LatitudePropertyDescriptions();

  @DefaultMessage("The longitude of the center of the map.")
  @Description("")
  String Map__LongitudePropertyDescriptions();

  @DefaultMessage("Save the contents of the Map to the specified path.")
  @Description("")
  String Map__SaveMethodDescriptions();

  @DefaultMessage("Specifies whether the Map should be visible on the screen. Value is true if the Map is showing and false if hidden.")
  @Description("")
  String Map__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Map as a percentage of the width of the Screen.")
  @Description("")
  String Map__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Map, measured in pixels.")
  @Description("")
  String Map__WidthPropertyDescriptions();

  @DefaultMessage("The user clicked on the Marker.")
  @Description("")
  String Marker__ClickEventDescriptions();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the Marker.")
  @Description("")
  String Marker__DescriptionPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between a Marker and a latitude, longitude point.")
  @Description("")
  String Marker__DistanceToPointMethodDescriptions();

  @DefaultMessage("The user dragged the Marker.")
  @Description("")
  String Marker__DragEventDescriptions();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the Marker by long-pressing and then dragging the Marker to a new location.")
  @Description("")
  String Marker__DraggablePropertyDescriptions();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the Marker.")
  @Description("")
  String Marker__EnableInfoboxPropertyDescriptions();

  @DefaultMessage("The paint color used to fill in the Marker.")
  @Description("")
  String Marker__FillColorPropertyDescriptions();

  @DefaultMessage("Specifies the `Marker`''s vertical height as a percentage of the [`Screen`''s `Height`](userinterface.html#Screen.Height).")
  @Description("")
  String Marker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the `Marker`''s vertical height, measured in pixels.")
  @Description("")
  String Marker__HeightPropertyDescriptions();

  @DefaultMessage("Sets or gets the latitude of the `Marker`, in degrees, with positive values representing north of the equator and negative values representing south of the equator. To update the `Latitude` and")
  @Description("")
  String Marker__LatitudePropertyDescriptions();

  @DefaultMessage("The user long-pressed on the Marker. This event will only trigger if Draggable is false.")
  @Description("")
  String Marker__LongClickEventDescriptions();

  @DefaultMessage("Sets or gets the longitude of the `Marker`, in degrees, with positive values representing east of the prime meridian and negative values representing west of the prime meridian. To update the")
  @Description("")
  String Marker__LongitudePropertyDescriptions();

  @DefaultMessage("Set the location of the marker.")
  @Description("")
  String Marker__SetLocationMethodDescriptions();

  @DefaultMessage("Show the infobox for the Marker. This will show the infobox even if EnableInfobox is set to false.")
  @Description("")
  String Marker__ShowInfoboxMethodDescriptions();

  @DefaultMessage("The paint color used to outline the Marker.")
  @Description("")
  String Marker__StrokeColorPropertyDescriptions();

  @DefaultMessage("The width of the stroke used to outline the Marker.")
  @Description("")
  String Marker__StrokeWidthPropertyDescriptions();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the Marker.")
  @Description("")
  String Marker__TitlePropertyDescriptions();

  @DefaultMessage("Return the type of the map feature. For Marker, this returns the text \"Marker\".")
  @Description("")
  String Marker__TypePropertyDescriptions();

  @DefaultMessage("Specifies whether the Marker should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String Marker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the `Marker` as a percentage of the [`Screen`''s `Width`](userinterface.html#Screen.Width).")
  @Description("")
  String Marker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the `Marker`, measured in pixels.")
  @Description("")
  String Marker__WidthPropertyDescriptions();

  @DefaultMessage("Sets the maximum value of slider. Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value. Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.")
  @Description("")
  String MaxValuePropertyDescriptions();

  @DefaultMessage("Returns the URL of the MediaStore web service.")
  @Description("")
  String MediaStore__ServiceURLPropertyDescriptions();

  @DefaultMessage("Indicates that the communication with the Web service signaled an error")
  @Description("")
  String MediaStore__WebServiceErrorEventDescriptions();

  @DefaultMessage("Indicates that a MediaStored server request has succeeded.")
  @Description("")
  String MediaStoredEventDescriptions();

  @DefaultMessage("This property contains a list of mentions of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestMentions</code> method.</li> <li> Wait for the <code>MentionsReceived</code> event.</li></ol>The value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to <code>RequestMentions</code>).")
  @Description("")
  String MentionsPropertyDescriptions();

  @DefaultMessage("This event is raised when the mentions of the logged-in user requested through <code>RequestMentions</code> have been retrieved. A list of the mentions can then be found in the <code>mentions</code> parameter or the <code>Mentions</code> property.")
  @Description("")
  String MentionsReceivedEventDescriptions();

  @DefaultMessage("The message that will be sent when the SendMessage method is called.")
  @Description("")
  String MessagePropertyDescriptions();

  @DefaultMessage("Read a message from a mailbox (1-10) on the robot.")
  @Description("")
  String MessageReadMethodDescriptions();

  @DefaultMessage("Event that''s raised when a text message is received by the phone. **Using this block will add [dangerous permissions](//developer.android.com/guide/topics/permissions/overview#dangerous_permissions) that will require additional approval if your app is submitted to the Google Play Store.**")
  @Description("")
  String MessageReceivedEventDescriptions();

  @DefaultMessage("Write a message to a mailbox (1-10) on the robot.")
  @Description("")
  String MessageWriteMethodDescriptions();

  @DefaultMessage("Sets the minimum value of slider. Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value. Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.")
  @Description("")
  String MinValuePropertyDescriptions();

  @DefaultMessage("Returns the minute of the hour (0-59) from the instant.")
  @Description("")
  String MinuteMethodDescriptions();

  @DefaultMessage("The minute of the last time set using the time picker")
  @Description("")
  String MinutePropertyDescriptions();

  @DefaultMessage("Specifies the mode of the sensor.")
  @Description("")
  String ModePropertyDescriptions();

  @DefaultMessage("Gets all of the labels from this model. Only valid after ClassifierReady is signaled.")
  @Description("")
  String ModelLabelsPropertyDescriptions();

  @DefaultMessage("Returns the name of the Month that was last picked using the DatePicker, in textual format.")
  @Description("")
  String MonthInTextPropertyDescriptions();

  @DefaultMessage("Returns the month of the year represented as a number from 1 to 12).")
  @Description("")
  String MonthMethodDescriptions();

  @DefaultMessage("Returns the name of the month from the instant, e.g., January, February, March...")
  @Description("")
  String MonthNameMethodDescriptions();

  @DefaultMessage("the number of the Month that was last picked using the DatePicker. Note that months start in 1 = January, 12 = December.")
  @Description("")
  String MonthPropertyDescriptions();

  @DefaultMessage("The motor ports that the motors are connected to. The ports are specified by a sequence of port letters.")
  @Description("")
  String MotorPortsPropertyDescriptions();

  @DefaultMessage("Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.")
  @Description("")
  String MoveBackwardIndefinitelyMethodDescriptions();

  @DefaultMessage("Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.")
  @Description("")
  String MoveBackwardMethodDescriptions();

  @DefaultMessage("Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.")
  @Description("")
  String MoveForwardIndefinitelyMethodDescriptions();

  @DefaultMessage("Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.")
  @Description("")
  String MoveForwardMethodDescriptions();

  @DefaultMessage("This property has been deprecated.")
  @Description("")
  String MovingPropertyDescriptions();

  @DefaultMessage("If true, then this text box accepts multiple lines of input, which are entered using the return key. For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard. The app should call the HideKeyboard method to hide the keyboard for a mutiline text box.")
  @Description("")
  String MultiLinePropertyDescriptions();

  @DefaultMessage("Namespace for storing data.")
  @Description("")
  String NamespacePropertyDescriptions();

  @DefaultMessage("API Key for Open Route Service.")
  @Description("")
  String Navigation__ApiKeyPropertyDescriptions();

  @DefaultMessage("The language to use for textual directions.")
  @Description("")
  String Navigation__LanguagePropertyDescriptions();

  @DefaultMessage("Reserved for future use in case we decide to run our own service some day.")
  @Description("")
  String Navigation__ServiceURLPropertyDescriptions();

  @DefaultMessage("Indicates that a new instance was successfully created after calling MakeNewInstance.")
  @Description("")
  String NewInstanceMadeEventDescriptions();

  @DefaultMessage("Indicates that this game has a new leader as specified through SetLeader")
  @Description("")
  String NewLeaderEventDescriptions();

  @DefaultMessage("Event handler called when a pair of sprites (Balls and ImageSprites) are no longer colliding.")
  @Description("")
  String NoLongerCollidingWithEventDescriptions();

  @DefaultMessage("Event indicating that the service has no open poll.")
  @Description("")
  String NoOpenPollEventDescriptions();

  @DefaultMessage("The north edge of the rectangle, in decimal degrees north of the equator.")
  @Description("")
  String NorthLatitudePropertyDescriptions();

  @DefaultMessage("Specifies the length of time that the alert is shown -- either \"short\" or \"long\".")
  @Description("")
  String NotifierLengthPropertyDescriptions();

  @DefaultMessage("Specifies the background color for alerts (not dialogs).")
  @Description("")
  String Notifier__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Specifies the text color for alerts (not dialogs).")
  @Description("")
  String Notifier__TextColorPropertyDescriptions();

  @DefaultMessage("Returns the current instant in time read from phone''s clock.")
  @Description("")
  String NowMethodDescriptions();

  @DefaultMessage("If true, then this text box accepts only numbers as keyboard input. Numbers can include a decimal point and an optional leading minus sign. This applies to keyboard input only. Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.")
  @Description("")
  String NumbersOnlyPropertyDescriptions();

  @DefaultMessage("Light level has gone above the range. The AboveRange event will not occur if the DetectColor property is set to True or if the AboveRangeEventEnabled property is set to False.")
  @Description("")
  String NxtColorSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the DetectColor property is set to False and the light level goes above the TopOfRange.")
  @Description("")
  String NxtColorSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Light level has gone below the range. The BelowRange event will not occur if the DetectColor property is set to True or if the BelowRangeEventEnabled property is set to False.")
  @Description("")
  String NxtColorSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the DetectColor property is set to False and the light level goes below the BottomOfRange.")
  @Description("")
  String NxtColorSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.")
  @Description("")
  String NxtColorSensor__ColorChangedEventDescriptions();

  @DefaultMessage("Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes.")
  @Description("")
  String NxtColorSensor__ColorChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True.")
  @Description("")
  String NxtColorSensor__GetLightLevelMethodDescriptions();

  @DefaultMessage("Light level has gone within the range. The WithinRange event will not occur if the DetectColor property is set to True or if the WithinRangeEventEnabled property is set to False.")
  @Description("")
  String NxtColorSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the DetectColor property is set to False and the light level goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String NxtColorSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.")
  @Description("")
  String NxtDirectCommands__GetFirmwareVersionMethodDescriptions();

  @DefaultMessage("Keep Alive. Returns the current sleep time limit in milliseconds.")
  @Description("")
  String NxtDirectCommands__KeepAliveMethodDescriptions();

  @DefaultMessage("Whether to stop the drive motors before disconnecting.")
  @Description("")
  String NxtDrive__StopBeforeDisconnectPropertyDescriptions();

  @DefaultMessage("Stop the drive motors of the robot.")
  @Description("")
  String NxtDrive__StopMethodDescriptions();

  @DefaultMessage("The diameter of the wheels used for driving.")
  @Description("")
  String NxtDrive__WheelDiameterPropertyDescriptions();

  @DefaultMessage("Light level has gone above the range.")
  @Description("")
  String NxtLightSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the light level goes above the TopOfRange.")
  @Description("")
  String NxtLightSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Light level has gone below the range.")
  @Description("")
  String NxtLightSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the light level goes below the BottomOfRange.")
  @Description("")
  String NxtLightSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.")
  @Description("")
  String NxtLightSensor__GetLightLevelMethodDescriptions();

  @DefaultMessage("Light level has gone within the range.")
  @Description("")
  String NxtLightSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String NxtLightSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Sound level has gone above the range.")
  @Description("")
  String NxtSoundSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the sound level goes above the TopOfRange.")
  @Description("")
  String NxtSoundSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Sound level has gone below the range.")
  @Description("")
  String NxtSoundSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the sound level goes below the BottomOfRange.")
  @Description("")
  String NxtSoundSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Sound level has gone within the range.")
  @Description("")
  String NxtSoundSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the sound level goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String NxtSoundSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Touch sensor has been pressed.")
  @Description("")
  String NxtTouchSensor__PressedEventDescriptions();

  @DefaultMessage("Whether the Pressed event should fire when the touch sensor is pressed.")
  @Description("")
  String NxtTouchSensor__PressedEventEnabledPropertyDescriptions();

  @DefaultMessage("Touch sensor has been released.")
  @Description("")
  String NxtTouchSensor__ReleasedEventDescriptions();

  @DefaultMessage("Distance has gone above the range.")
  @Description("")
  String NxtUltrasonicSensor__AboveRangeEventDescriptions();

  @DefaultMessage("Whether the AboveRange event should fire when the distance goes above the TopOfRange.")
  @Description("")
  String NxtUltrasonicSensor__AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Distance has gone below the range.")
  @Description("")
  String NxtUltrasonicSensor__BelowRangeEventDescriptions();

  @DefaultMessage("Whether the BelowRange event should fire when the distance goes below the BottomOfRange.")
  @Description("")
  String NxtUltrasonicSensor__BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Distance has gone within the range.")
  @Description("")
  String NxtUltrasonicSensor__WithinRangeEventDescriptions();

  @DefaultMessage("Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String NxtUltrasonicSensor__WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("Returns true if the `Switch` is on.")
  @Description("")
  String OnPropertyDescriptions();

  @DefaultMessage("This event is fired when the \"settings\" menu item is selected (only available in the Companion App, defined in ReplForm.java).")
  @Description("")
  String OnSettingsEventDescriptions();

  @DefaultMessage("The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none")
  @Description("")
  String OpenScreenAnimationPropertyDescriptions();

  @DefaultMessage("Opens serial connection. Returns true when opened.")
  @Description("")
  String OpenSerialMethodDescriptions();

  @DefaultMessage("Called when the orientation has changed.")
  @Description("")
  String OrientationChangedEventDescriptions();

  @DefaultMessage("Indicates whether the orientation sensor is present on the device.")
  @Description("")
  String OrientationSensor__AvailablePropertyDescriptions();

  @DefaultMessage("Specifies whether the orientation sensor is enabled.")
  @Description("")
  String OrientationSensor__EnabledPropertyDescriptions();

  @DefaultMessage("Returns the pitch angle of the device. To return meaningful values the sensor must be enabled.")
  @Description("")
  String OrientationSensor__PitchPropertyDescriptions();

  @DefaultMessage("Whether the x- and y-coordinates should represent the center of the Ball (true) or its left and top edges (false).")
  @Description("")
  String OriginAtCenterPropertyDescriptions();

  @DefaultMessage("This event is signaled when another player has started (and the current player is playing or paused, but not stopped).")
  @Description("")
  String OtherPlayerStartedEventDescriptions();

  @DefaultMessage("Event raised when another screen has closed and control has returned to this screen.")
  @Description("")
  String OtherScreenClosedEventDescriptions();

  @DefaultMessage("When a page is finished loading this event is run.")
  @Description("")
  String PageLoadedEventDescriptions();

  @DefaultMessage("Pans the map center to the given latitude and longitude and adjust the zoom level to the specified zoom.")
  @Description("")
  String PanToMethodDescriptions();

  @DefaultMessage("The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is ''default'' (shaded 3-D look).")
  @Description("")
  String PasswordTextBox__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Whether the user can enter text into the PasswordTextBox. By default, this is true.")
  @Description("")
  String PasswordTextBox__EnabledPropertyDescriptions();

  @DefaultMessage("Whether the font for the text should be bold. By default, it is not.")
  @Description("")
  String PasswordTextBox__FontBoldPropertyDescriptions();

  @DefaultMessage("Whether the text should appear in italics. By default, it does not.")
  @Description("")
  String PasswordTextBox__FontItalicPropertyDescriptions();

  @DefaultMessage("The font size for the text. By default, it is 14.0 points.")
  @Description("")
  String PasswordTextBox__FontSizePropertyDescriptions();

  @DefaultMessage("The font for the text. The value can be changed in the Designer.")
  @Description("")
  String PasswordTextBox__FontTypefacePropertyDescriptions();

  @DefaultMessage("Event raised when the PasswordTextBox is selected for input, such as by the user touching it.")
  @Description("")
  String PasswordTextBox__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the PasswordTextBox as a percentage of the height of the Screen.")
  @Description("")
  String PasswordTextBox__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the PasswordTextBox, measured in pixels.")
  @Description("")
  String PasswordTextBox__HeightPropertyDescriptions();

  @DefaultMessage("Text that should appear faintly in the PasswordTextBox to provide a hint as to what the user should enter. This can only be seen if the Text property is empty.")
  @Description("")
  String PasswordTextBox__HintPropertyDescriptions();

  @DefaultMessage("Event raised when the PasswordTextBox is no longer selected for input, such as if the user touches a different text box.")
  @Description("")
  String PasswordTextBox__LostFocusEventDescriptions();

  @DefaultMessage("Sets the PasswordTextBox active.")
  @Description("")
  String PasswordTextBox__RequestFocusMethodDescriptions();

  @DefaultMessage("Whether the text should be left justified, centered, or right justified. By default, text is left justified.")
  @Description("")
  String PasswordTextBox__TextAlignmentPropertyDescriptions();

  @DefaultMessage("The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black.")
  @Description("")
  String PasswordTextBox__TextColorPropertyDescriptions();

  @DefaultMessage("Returns the textbox contents.")
  @Description("")
  String PasswordTextBox__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the PasswordTextBox should be visible on the screen. Value is true if the PasswordTextBox is showing and false if hidden.")
  @Description("")
  String PasswordTextBox__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the PasswordTextBox as a percentage of the width of the Screen.")
  @Description("")
  String PasswordTextBox__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the PasswordTextBox, measured in pixels.")
  @Description("")
  String PasswordTextBox__WidthPropertyDescriptions();

  @DefaultMessage("Visibility of password.")
  @Description("")
  String PasswordVisiblePropertyDescriptions();

  @DefaultMessage("The approximate distance traveled in meters.")
  @Description("")
  String Pedometer__DistancePropertyDescriptions();

  @DefaultMessage("Pause counting of steps and distance.")
  @Description("")
  String Pedometer__PauseMethodDescriptions();

  @DefaultMessage("Resumes counting, synonym of Start.")
  @Description("")
  String Pedometer__ResumeMethodDescriptions();

  @DefaultMessage("Saves the pedometer state to the phone. Permits permits accumulation of steps and distance between invocations of an App that uses the pedometer. Different Apps will have their own saved state.")
  @Description("")
  String Pedometer__SaveMethodDescriptions();

  @DefaultMessage("Start counting steps")
  @Description("")
  String Pedometer__StartMethodDescriptions();

  @DefaultMessage("Stop counting steps")
  @Description("")
  String Pedometer__StopMethodDescriptions();

  @DefaultMessage("Event to handle when the app user has denied a needed permission.")
  @Description("")
  String PermissionDeniedEventDescriptions();

  @DefaultMessage("Event to handle when the app user has granted a needed permission. This event is only run when permission is granted in response to the AskForPermission method.")
  @Description("")
  String PermissionGrantedEventDescriptions();

  @DefaultMessage("If true, variables will retain their values when off-line and the App exits. Values will be uploaded to Firebase the next time the App is run while connected to the network. This is useful for applications which will gather data while not connected to the network. Note: AppendValue and RemoveFirst will not work correctly when off-line, they require a network connection.<br/><br/> <i>Note</i>: If you set Persist on any Firebase component, on any screen, it makes all Firebase components on all screens persistent. This is a limitation of the low level Firebase library. Also be aware that if you want to set persist to true, you should do so before connecting the Companion for incremental development.")
  @Description("")
  String PersistPropertyDescriptions();

  @DefaultMessage("Event indicating that a phone call has ended. If status is 1, incoming call is missed or rejected; if status is 2, incoming call is answered before hanging up; if status is 3, outgoing call is hung up. phoneNumber is the ended call phone number.")
  @Description("")
  String PhoneCallEndedEventDescriptions();

  @DefaultMessage("Event indicating that a phonecall has started. If status is 1, incoming call is ringing; if status is 2, outgoing call is dialled. phoneNumber is the incoming/outgoing phone number.")
  @Description("")
  String PhoneCallStartedEventDescriptions();

  @DefaultMessage("PhoneNumber property getter method.")
  @Description("")
  String PhoneCall__PhoneNumberPropertyDescriptions();

  @DefaultMessage("Returns a list of phone numbers associated with the selected contact.")
  @Description("")
  String PhoneNumberListPropertyDescriptions();

  @DefaultMessage("Event to be raised after the `ContactPicker` activity returns its result and the properties have been filled in.")
  @Description("")
  String PhoneNumberPicker__AfterPickingEventDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String PhoneNumberPicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Event to raise when the `ContactPicker` is clicked or the picker is shown using the")
  @Description("")
  String PhoneNumberPicker__BeforePickingEventDescriptions();

  @DefaultMessage("If set, user can tap ContactPicker to cause action.")
  @Description("")
  String PhoneNumberPicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, ContactPicker text is displayed in bold.")
  @Description("")
  String PhoneNumberPicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, ContactPicker text is displayed in italics.")
  @Description("")
  String PhoneNumberPicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for ContactPicker text.")
  @Description("")
  String PhoneNumberPicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for ContactPicker text.")
  @Description("")
  String PhoneNumberPicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the ContactPicker so it is now possible to click it.")
  @Description("")
  String PhoneNumberPicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the ContactPicker as a percentage of the height of the Screen.")
  @Description("")
  String PhoneNumberPicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the ContactPicker, measured in pixels.")
  @Description("")
  String PhoneNumberPicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String PhoneNumberPicker__ImagePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the ContactPicker so it is now no longer possible to click it.")
  @Description("")
  String PhoneNumberPicker__LostFocusEventDescriptions();

  @DefaultMessage("Opens the ContactPicker, as though the user clicked on it.")
  @Description("")
  String PhoneNumberPicker__OpenMethodDescriptions();

  @DefaultMessage("Returns the primary phone number associated with the selected contact, or the empty string if no phone number is associated with the contact.")
  @Description("")
  String PhoneNumberPicker__PhoneNumberPropertyDescriptions();

  @DefaultMessage("Returns a picture URI for the selected contact, which can be used to retrieve the contact''s photo and other fields.")
  @Description("")
  String PhoneNumberPicker__PicturePropertyDescriptions();

  @DefaultMessage("Returns the style of the `ContactPicker`.")
  @Description("")
  String PhoneNumberPicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a ContactPicker that has an image as background.")
  @Description("")
  String PhoneNumberPicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String PhoneNumberPicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String PhoneNumberPicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on ContactPicker.")
  @Description("")
  String PhoneNumberPicker__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the ContactPicker was pressed down.")
  @Description("")
  String PhoneNumberPicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the ContactPicker has been released.")
  @Description("")
  String PhoneNumberPicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the ContactPicker should be visible on the screen. Value is true if the ContactPicker is showing and false if hidden.")
  @Description("")
  String PhoneNumberPicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ContactPicker as a percentage of the width of the Screen.")
  @Description("")
  String PhoneNumberPicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the ContactPicker, measured in pixels.")
  @Description("")
  String PhoneNumberPicker__WidthPropertyDescriptions();

  @DefaultMessage("The platform the app is running on, for example \"Android\" or \"iOS\".")
  @Description("")
  String PlatformPropertyDescriptions();

  @DefaultMessage("The dotted version number of the platform, such as 4.2.2 or 10.0. This is platform specific and there is no guarantee that it has a particular format.")
  @Description("")
  String PlatformVersionPropertyDescriptions();

  @DefaultMessage("Plays the sound specified by the Source property.")
  @Description("")
  String PlayMethodDescriptions();

  @DefaultMessage("If true, the player will pause playing when leaving the current screen; if false (default option), the player continues playing whenever the current screen is displaying or not.")
  @Description("")
  String PlayOnlyInForegroundPropertyDescriptions();

  @DefaultMessage("Play a sound file on the robot.")
  @Description("")
  String PlaySoundFileMethodDescriptions();

  @DefaultMessage("Make the robot play a tone.")
  @Description("")
  String PlayToneMethodDescriptions();

  @DefaultMessage("The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.")
  @Description("")
  String PlayerErrorEventDescriptions();

  @DefaultMessage("Indicates that a new player has joined this game instance.")
  @Description("")
  String PlayerJoinedEventDescriptions();

  @DefaultMessage("Indicates that a player has left this game instance.")
  @Description("")
  String PlayerLeftEventDescriptions();

  @DefaultMessage("Indicates that the media has reached the end")
  @Description("")
  String Player__CompletedEventDescriptions();

  @DefaultMessage("Suspends playing the media if it is playing.")
  @Description("")
  String Player__PauseMethodDescriptions();

  @DefaultMessage("Returns the path to the audio source")
  @Description("")
  String Player__SourcePropertyDescriptions();

  @DefaultMessage("Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning.")
  @Description("")
  String Player__StartMethodDescriptions();

  @DefaultMessage("Stops playing the media and seeks to the beginning of the song.")
  @Description("")
  String Player__StopMethodDescriptions();

  @DefaultMessage("Vibrates for specified number of milliseconds.")
  @Description("")
  String Player__VibrateMethodDescriptions();

  @DefaultMessage("Sets the volume to a number between 0 and 100")
  @Description("")
  String Player__VolumePropertyDescriptions();

  @DefaultMessage("The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server.")
  @Description("")
  String PlayersPropertyDescriptions();

  @DefaultMessage("The user clicked on the Polygon.")
  @Description("")
  String Polygon__ClickEventDescriptions();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the Polygon.")
  @Description("")
  String Polygon__DescriptionPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between a Polygon and a latitude, longitude point.")
  @Description("")
  String Polygon__DistanceToPointMethodDescriptions();

  @DefaultMessage("The user dragged the Polygon.")
  @Description("")
  String Polygon__DragEventDescriptions();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the Polygon by long-pressing and then dragging the Polygon to a new location.")
  @Description("")
  String Polygon__DraggablePropertyDescriptions();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the Polygon.")
  @Description("")
  String Polygon__EnableInfoboxPropertyDescriptions();

  @DefaultMessage("The paint color used to fill in the Polygon.")
  @Description("")
  String Polygon__FillColorPropertyDescriptions();

  @DefaultMessage("The user long-pressed on the Polygon. This event will only trigger if Draggable is false.")
  @Description("")
  String Polygon__LongClickEventDescriptions();

  @DefaultMessage("Constructs a polygon from the given list of coordinates.")
  @Description("")
  String Polygon__PointsFromStringPropertyDescriptions();

  @DefaultMessage("Specifies the Points used for drawing the `Polygon`. The Points are specified as a list of lists containing latitude and longitude values, such as `[[lat1, long1], [lat2, long2], ...]`.")
  @Description("")
  String Polygon__PointsPropertyDescriptions();

  @DefaultMessage("Show the infobox for the Polygon. This will show the infobox even if EnableInfobox is set to false.")
  @Description("")
  String Polygon__ShowInfoboxMethodDescriptions();

  @DefaultMessage("The paint color used to outline the Polygon.")
  @Description("")
  String Polygon__StrokeColorPropertyDescriptions();

  @DefaultMessage("The width of the stroke used to outline the Polygon.")
  @Description("")
  String Polygon__StrokeWidthPropertyDescriptions();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the Polygon.")
  @Description("")
  String Polygon__TitlePropertyDescriptions();

  @DefaultMessage("Returns the type of the feature. For polygons, this returns the text \"Polygon\".")
  @Description("")
  String Polygon__TypePropertyDescriptions();

  @DefaultMessage("Specifies whether the Polygon should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String Polygon__VisiblePropertyDescriptions();

  @DefaultMessage("Indicates that position of the slider thumb has changed.")
  @Description("")
  String PositionChangedEventDescriptions();

  @DefaultMessage("Performs an HTTP POST request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostFileMethodDescriptions();

  @DefaultMessage("Asks the Web service to store the given media file.")
  @Description("")
  String PostMediaMethodDescriptions();

  @DefaultMessage("Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostTextMethodDescriptions();

  @DefaultMessage("Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostTextWithEncodingMethodDescriptions();

  @DefaultMessage("This is the primary color used for darker elements in Material UI.")
  @Description("")
  String PrimaryColorDarkPropertyDescriptions();

  @DefaultMessage("This is the primary color used for Material UI elements, such as the ActionBar.")
  @Description("")
  String PrimaryColorPropertyDescriptions();

  @DefaultMessage("Writes given data to serial, and appends a new line at the end.")
  @Description("")
  String PrintSerialMethodDescriptions();

  @DefaultMessage("Sets the ProjectBucket for this FirebaseDB.")
  @Description("")
  String ProjectBucketPropertyDescriptions();

  @DefaultMessage("Gets the ProjectID for this CloudDB project.")
  @Description("")
  String ProjectIDPropertyDescriptions();

  @DefaultMessage("Text with the current title for the Spinner window")
  @Description("")
  String PromptPropertyDescriptions();

  @DefaultMessage("If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted.")
  @Description("")
  String PromptforPermissionPropertyDescriptions();

  @DefaultMessage("The device will not change the service provider. It is possible for a device to switch service providers when the current provider is unable to provide adequate location information. `ProviderLocked` is a Boolean value: true/false. Set to `true")
  @Description("")
  String ProviderLockedPropertyDescriptions();

  @DefaultMessage("Indicates the source of the location information. If there is no provider, the string \"NO PROVIDER\" is returned. This is useful primarily for debugging.")
  @Description("")
  String ProviderNamePropertyDescriptions();

  @DefaultMessage("Triggered when distance (in cm) of the object to the device changes.")
  @Description("")
  String ProximityChangedEventDescriptions();

  @DefaultMessage("Reports whether or not the device has a proximity sensor.")
  @Description("")
  String ProximitySensor__AvailablePropertyDescriptions();

  @DefaultMessage("Returns the distance from the object to the device")
  @Description("")
  String ProximitySensor__DistancePropertyDescriptions();

  @DefaultMessage("If true, the sensor will generate events. Otherwise, no events are generated.")
  @Description("")
  String ProximitySensor__EnabledPropertyDescriptions();

  @DefaultMessage("Reports the Maximum Range of the device''s ProximitySensor")
  @Description("")
  String ProximitySensor__MaximumRangePropertyDescriptions();

  @DefaultMessage("The set of game instances that have been marked public. To ensure current values are returned, first invoke")
  @Description("")
  String PublicInstancesPropertyDescriptions();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutFileMethodDescriptions();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutTextMethodDescriptions();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutTextWithEncodingMethodDescriptions();

  @DefaultMessage("The query to send to the Fusion Tables API. <p>For legal query formats and examples, see the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API v2.0 reference manual</a>.</p> <p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them.</p>")
  @Description("")
  String QueryPropertyDescriptions();

  @DefaultMessage("Reads text from a file in storage. Prefix the filename with / to read from a specific file on the SD card. for instance /myFile.txt will read the file /sdcard/myFile.txt. To read assets packaged with an application (also works for the Companion) start the filename with // (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from /sdcard/AppInventor/data for the Companion.")
  @Description("")
  String ReadFromMethodDescriptions();

  @DefaultMessage("Returns true if in read mode, false if in write mode.")
  @Description("")
  String ReadModePropertyDescriptions();

  @DefaultMessage("Whether the TextBox is read-only. By default, this is true.")
  @Description("")
  String ReadOnlyPropertyDescriptions();

  @DefaultMessage("Reads data from serial.")
  @Description("")
  String ReadSerialMethodDescriptions();

  @DefaultMessage("Map has been initialized and is ready for user interaction.")
  @Description("")
  String ReadyEventDescriptions();

  @DefaultMessage("Receive a signed 1-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned1ByteNumberMethodDescriptions();

  @DefaultMessage("Receive a signed 2-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned2ByteNumberMethodDescriptions();

  @DefaultMessage("Receive a signed 4-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned4ByteNumberMethodDescriptions();

  @DefaultMessage("Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveSignedBytesMethodDescriptions();

  @DefaultMessage("Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveTextMethodDescriptions();

  @DefaultMessage("Receive an unsigned 1-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned1ByteNumberMethodDescriptions();

  @DefaultMessage("Receive a unsigned 2-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned2ByteNumberMethodDescriptions();

  @DefaultMessage("Receive a unsigned 4-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned4ByteNumberMethodDescriptions();

  @DefaultMessage("Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveUnsignedBytesMethodDescriptions();

  @DefaultMessage("If set to 1 (OFF) no messages will be received. If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification. Selecting the notification will bring up the app and signal the MessageReceived event. Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens. As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed.")
  @Description("")
  String ReceivingEnabledPropertyDescriptions();

  @DefaultMessage("Records a video, then raises the")
  @Description("")
  String RecordVideoMethodDescriptions();

  @DefaultMessage("The user clicked on the Rectangle.")
  @Description("")
  String Rectangle__ClickEventDescriptions();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the Rectangle.")
  @Description("")
  String Rectangle__DescriptionPropertyDescriptions();

  @DefaultMessage("Compute the distance, in meters, between a Rectangle and a latitude, longitude point.")
  @Description("")
  String Rectangle__DistanceToPointMethodDescriptions();

  @DefaultMessage("The user dragged the Rectangle.")
  @Description("")
  String Rectangle__DragEventDescriptions();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the Rectangle by long-pressing and then dragging the Rectangle to a new location.")
  @Description("")
  String Rectangle__DraggablePropertyDescriptions();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the Rectangle.")
  @Description("")
  String Rectangle__EnableInfoboxPropertyDescriptions();

  @DefaultMessage("The paint color used to fill in the Rectangle.")
  @Description("")
  String Rectangle__FillColorPropertyDescriptions();

  @DefaultMessage("The user long-pressed on the Rectangle. This event will only trigger if Draggable is false.")
  @Description("")
  String Rectangle__LongClickEventDescriptions();

  @DefaultMessage("Show the infobox for the Rectangle. This will show the infobox even if EnableInfobox is set to false.")
  @Description("")
  String Rectangle__ShowInfoboxMethodDescriptions();

  @DefaultMessage("The paint color used to outline the Rectangle.")
  @Description("")
  String Rectangle__StrokeColorPropertyDescriptions();

  @DefaultMessage("The width of the stroke used to outline the Rectangle.")
  @Description("")
  String Rectangle__StrokeWidthPropertyDescriptions();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the Rectangle.")
  @Description("")
  String Rectangle__TitlePropertyDescriptions();

  @DefaultMessage("Returns the type of the feature. For rectangles, this returns the text \"Rectangle\".")
  @Description("")
  String Rectangle__TypePropertyDescriptions();

  @DefaultMessage("Specifies whether the Rectangle should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String Rectangle__VisiblePropertyDescriptions();

  @DefaultMessage("The Redis Server port to use. Defaults to 6381")
  @Description("")
  String RedisPortPropertyDescriptions();

  @DefaultMessage("The Redis Server to use to store data. A setting of \"DEFAULT\" means that the MIT server will be used.")
  @Description("")
  String RedisServerPropertyDescriptions();

  @DefaultMessage("The requested minimum time in milliseconds between changes in readings being reported. Android is not guaranteed to honor the request. Setting this property has no effect on pre-Gingerbread devices.")
  @Description("")
  String RefreshTimePropertyDescriptions();

  @DefaultMessage("Whether the Released event should fire when the touch sensor is released.")
  @Description("")
  String ReleasedEventEnabledPropertyDescriptions();

  @DefaultMessage("Reload the current page.")
  @Description("")
  String ReloadMethodDescriptions();

  @DefaultMessage("Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.")
  @Description("")
  String RemoveFirstFromListMethodDescriptions();

  @DefaultMessage("Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.")
  @Description("")
  String RemoveFirstMethodDescriptions();

  @DefaultMessage("Send a request for a ballot to the Web service specified by the property <code>ServiceURL</code>. When the completes, one of the following events will be raised: <code>GotBallot</code>, <code>NoOpenPoll</code>, or <code>WebServiceError</code>.")
  @Description("")
  String RequestBallotMethodDescriptions();

  @DefaultMessage("Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the <code>DirectMessagesReceived</code> event and set the <code>DirectMessages</code> property to the list of messages.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String RequestDirectMessagesMethodDescriptions();

  @DefaultMessage("Request directions from the routing service.")
  @Description("")
  String RequestDirectionsMethodDescriptions();

  @DefaultMessage("Gets who is following you.")
  @Description("")
  String RequestFollowersMethodDescriptions();

  @DefaultMessage("Gets the most recent 20 messages in the user''s timeline.")
  @Description("")
  String RequestFriendTimelineMethodDescriptions();

  @DefaultMessage("The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values.")
  @Description("")
  String RequestHeadersPropertyDescriptions();

  @DefaultMessage("Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the <code>MentionsReceived</code> event and set the <code>Mentions</code> property to the list of mentions.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String RequestMentionsMethodDescriptions();

  @DefaultMessage("By providing a target language to translate to (for instance, ''es'' for Spanish, ''en'' for English, or ''ru'' for Russian), and a word or sentence to translate, this method will request a translation to the Yandex.Translate service.Once the text is translated by the external service, the event GotTranslation will be executed.Note: Yandex.Translate will attempt to detect the source language. You can also specify prepending it to the language translation. I.e., es-ru will specify Spanish to Russian translation.")
  @Description("")
  String RequestTranslationMethodDescriptions();

  @DefaultMessage("Reset the scaled value of an input sensor on the robot.")
  @Description("")
  String ResetInputScaledValueMethodDescriptions();

  @DefaultMessage("Resets the step counter, distance measure and time running.")
  @Description("")
  String ResetMethodDescriptions();

  @DefaultMessage("Reset motor position.")
  @Description("")
  String ResetMotorPositionMethodDescriptions();

  @DefaultMessage("Set the current tacho count to zero.")
  @Description("")
  String ResetTachoCountMethodDescriptions();

  @DefaultMessage("Returns the name of the activity that corresponds to this ActivityStarter, or an empty string if no corresponding activity can be found.")
  @Description("")
  String ResolveActivityMethodDescriptions();

  @DefaultMessage("Content of the last response as a dictionary.")
  @Description("")
  String ResponseContentPropertyDescriptions();

  @DefaultMessage("The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated.")
  @Description("")
  String ResponseFileNamePropertyDescriptions();

  @DefaultMessage("Returns the name that will be used to retrieve a result from the activity.")
  @Description("")
  String ResultNamePropertyDescriptions();

  @DefaultMessage("Returns the MIME type from the activity.")
  @Description("")
  String ResultTypePropertyDescriptions();

  @DefaultMessage("Returns the URI from the activity.")
  @Description("")
  String ResultUriPropertyDescriptions();

  @DefaultMessage("Set whether the direction of motors is reversed or not.")
  @Description("")
  String ReverseDirectionPropertyDescriptions();

  @DefaultMessage("Returns the roll angle of the device. To return meaningful values the sensor must be enabled.")
  @Description("")
  String RollPropertyDescriptions();

  @DefaultMessage("Rotate the motors in a distance.")
  @Description("")
  String RotateInDistanceMethodDescriptions();

  @DefaultMessage("Rotate the motors in a period of time.")
  @Description("")
  String RotateInDurationMethodDescriptions();

  @DefaultMessage("Rotate the motors in a number of tacho counts.")
  @Description("")
  String RotateInTachoCountsMethodDescriptions();

  @DefaultMessage("Start to rotate the motors.")
  @Description("")
  String RotateIndefinitelyMethodDescriptions();

  @DefaultMessage("Rotate the motors at the same speed for a distance in cm.")
  @Description("")
  String RotateSyncInDistanceMethodDescriptions();

  @DefaultMessage("Rotate the motors at the same speed in a period of time.")
  @Description("")
  String RotateSyncInDurationMethodDescriptions();

  @DefaultMessage("Rotate the motors at the same speed in a number of tacho counts.")
  @Description("")
  String RotateSyncInTachoCountsMethodDescriptions();

  @DefaultMessage("Start to rotate the motors at the same speed.")
  @Description("")
  String RotateSyncIndefinitelyMethodDescriptions();

  @DefaultMessage("Whether the image should rotate to match the ImageSprite''s heading. The sprite rotates around its centerpoint.")
  @Description("")
  String RotatesPropertyDescriptions();

  @DefaultMessage("Specifies the angle, in degrees, at which the image picture appears rotated.")
  @Description("")
  String RotationAnglePropertyDescriptions();

  @DefaultMessage("Sets or gets the rotation of the map in decimal degrees if any")
  @Description("")
  String RotationPropertyDescriptions();

  @DefaultMessage("Row property getter method.")
  @Description("")
  String RowPropertyDescriptions();

  @DefaultMessage("Rows property getter method.")
  @Description("")
  String RowsPropertyDescriptions();

  @DefaultMessage("Run JavaScript in the current page.")
  @Description("")
  String RunJavaScriptMethodDescriptions();

  @DefaultMessage("Property for Running")
  @Description("")
  String RunningPropertyDescriptions();

  @DefaultMessage("Saves a picture of this Canvas to the device''s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.")
  @Description("")
  String SaveAsMethodDescriptions();

  @DefaultMessage("Saves text to a file. If the filename begins with a slash (/) the file is written to the sdcard. For example writing to /myFile.txt will write the file to /sdcard/myFile.txt. If the filename does not start with a slash, it will be written in the programs private data directory where it will not be accessible to other programs on the phone. There is a special exception for the AI Companion where these files are written to /sdcard/AppInventor/data to facilitate debugging. Note that this block will overwrite a file if it already exists.If you want to add content to a file use the append block.")
  @Description("")
  String SaveFileMethodDescriptions();

  @DefaultMessage("Whether the response should be saved in a file.")
  @Description("")
  String SaveResponsePropertyDescriptions();

  @DefaultMessage("Specifies the path to the file where the recording should be stored. If this property is the empty string, then starting a recording will create a file in an appropriate location. If the property is not the empty string, it should specify a complete path to a file in an existing directory, including a file name with the extension .3gp.")
  @Description("")
  String SavedRecordingPropertyDescriptions();

  @DefaultMessage("Specifies whether the image should be resized to match the size of the ImageView.")
  @Description("")
  String ScalePictureToFitPropertyDescriptions();

  @DefaultMessage("Specifies the units used for the scale overlay. 1 (the default) will give metric units (km, m) whereas 2 will give imperial units (mi, ft).")
  @Description("")
  String ScaleUnitsPropertyDescriptions();

  @DefaultMessage("This property determines how the picture scales according to the Height or Width of the Image. Scale proportionally (0) preserves the picture aspect ratio. Scale to fit (1) matches the Image area, even if the aspect ratio changes.")
  @Description("")
  String ScalingPropertyDescriptions();

  @DefaultMessage("Screen orientation changed")
  @Description("")
  String ScreenOrientationChangedEventDescriptions();

  @DefaultMessage("The requested screen orientation, specified as a text value. Commonly used values are landscape, portrait, sensor, user and unspecified. See the Android developer documentation for ActivityInfo.Screen_Orientation for the complete list of possible settings.")
  @Description("")
  String ScreenOrientationPropertyDescriptions();

  @DefaultMessage("A number that encodes how contents of the screen are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned.")
  @Description("")
  String Screen__AlignHorizontalPropertyDescriptions();

  @DefaultMessage("A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable.")
  @Description("")
  String Screen__AlignVerticalPropertyDescriptions();

  @DefaultMessage("BackgroundColor property getter method.")
  @Description("")
  String Screen__BackgroundColorPropertyDescriptions();

  @DefaultMessage("The screen background image.")
  @Description("")
  String Screen__BackgroundImagePropertyDescriptions();

  @DefaultMessage("Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default.")
  @Description("")
  String Screen__ErrorOccurredEventDescriptions();

  @DefaultMessage("Screen height (y-size).")
  @Description("")
  String Screen__HeightPropertyDescriptions();

  @DefaultMessage("Hide the onscreen soft keyboard.")
  @Description("")
  String Screen__HideKeyboardMethodDescriptions();

  @DefaultMessage("The caption for the form, which apears in the title bar")
  @Description("")
  String Screen__TitlePropertyDescriptions();

  @DefaultMessage("Screen width (x-size).")
  @Description("")
  String Screen__WidthPropertyDescriptions();

  @DefaultMessage("When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device.")
  @Description("")
  String ScrollablePropertyDescriptions();

  @DefaultMessage("Get the current Android SDK Level")
  @Description("")
  String SdkLevelMethodDescriptions();

  @DefaultMessage("This property, which is initially empty, is set to a list of search results after the program: <ol><li>Calls the <code>SearchTwitter</code> method.</li> <li>Waits for the <code>SearchSuccessful</code> event.</li></ol>The value of the property will then be the same as the parameter to <code>SearchSuccessful</code>. Note that it is not necessary to call the <code>Authorize</code> method before calling <code>SearchTwitter</code>.")
  @Description("")
  String SearchResultsPropertyDescriptions();

  @DefaultMessage("This event is raised when the results of the search requested through <code>SearchSuccessful</code> have been retrieved. A list of the results can then be found in the <code>results</code> parameter or the <code>Results</code> property.")
  @Description("")
  String SearchSuccessfulEventDescriptions();

  @DefaultMessage("This searches Twitter for the given String query.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String SearchTwitterMethodDescriptions();

  @DefaultMessage("Returns the second of the minute (0-59) from the instant.")
  @Description("")
  String SecondMethodDescriptions();

  @DefaultMessage("Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.")
  @Description("")
  String SecurePropertyDescriptions();

  @DefaultMessage("Seeks to the requested time (specified in milliseconds) in the video. If the video is paused, the frame shown will not be updated by the seek. The player can jump only to key frames in the video, so seeking to times that differ by short intervals may not actually move to different frames.")
  @Description("")
  String SeekToMethodDescriptions();

  @DefaultMessage("The color of the item when it is selected.")
  @Description("")
  String SelectionColorPropertyDescriptions();

  @DefaultMessage("Send a 1-byte number to the connected Bluetooth device.")
  @Description("")
  String Send1ByteNumberMethodDescriptions();

  @DefaultMessage("Send a 2-byte number to the connected Bluetooth device.")
  @Description("")
  String Send2ByteNumberMethodDescriptions();

  @DefaultMessage("Send a 4-byte number to the connected Bluetooth device.")
  @Description("")
  String Send4ByteNumberMethodDescriptions();

  @DefaultMessage("Send a completed ballot to the Web service. This should not be called until the properties <code>UserId</code> and <code>UserChoice</code> have been set by the application.")
  @Description("")
  String SendBallotMethodDescriptions();

  @DefaultMessage("Send a list of byte values to the connected Bluetooth device.")
  @Description("")
  String SendBytesMethodDescriptions();

  @DefaultMessage("Send a text message. **Using this block will add [dangerous permissions](https://developer.android.com/guide/topics/permissions/overview#dangerous_permissions) that will require additional approval if your app is submitted to the Google Play Store.**")
  @Description("")
  String SendMessageDirectMethodDescriptions();

  @DefaultMessage("Send the query to the Fusiontables server.")
  @Description("")
  String SendQueryMethodDescriptions();

  @DefaultMessage("Send text to the connected Bluetooth device.")
  @Description("")
  String SendTextMethodDescriptions();

  @DefaultMessage("A number that encodes how sensitive the accelerometer is. The choices are: 1 = weak, 2 = moderate, 3 = strong.")
  @Description("")
  String SensitivityPropertyDescriptions();

  @DefaultMessage("The sensor port that the sensor is connected to.")
  @Description("")
  String SensorPortPropertyDescriptions();

  @DefaultMessage("Called then the sensor value changed.")
  @Description("")
  String SensorValueChangedEventDescriptions();

  @DefaultMessage("Whether the SensorValueChanged event should fire when the sensor value changed.")
  @Description("")
  String SensorValueChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("Indicates that a server command failed.")
  @Description("")
  String ServerCommandFailureEventDescriptions();

  @DefaultMessage("Sends the specified command to the game server.")
  @Description("")
  String ServerCommandMethodDescriptions();

  @DefaultMessage("Indicates that a server command returned successfully.")
  @Description("")
  String ServerCommandSuccessEventDescriptions();

  @DefaultMessage("The Service Account Email Address when service account authentication is in use.")
  @Description("")
  String ServiceAccountEmailPropertyDescriptions();

  @DefaultMessage("The URL of the game server.")
  @Description("")
  String ServiceUrlPropertyDescriptions();

  @DefaultMessage("Make the sensor read the light level without reflected light.")
  @Description("")
  String SetAmbientModeMethodDescriptions();

  @DefaultMessage("Measures the orientation of the sensor.")
  @Description("")
  String SetAngleModeMethodDescriptions();

  @DefaultMessage("Sets the color of the specified point. This differs from DrawPoint by having an argument for color.")
  @Description("")
  String SetBackgroundPixelColorMethodDescriptions();

  @DefaultMessage("Set the brick name of the robot.")
  @Description("")
  String SetBrickNameMethodDescriptions();

  @DefaultMessage("Moves the Rectangle so that it is centered on the given latitude and longitude while attempting to maintain the width and height of the Rectangle as measured from the center to the edges.")
  @Description("")
  String SetCenterMethodDescriptions();

  @DefaultMessage("Measure the distance in centimeters.")
  @Description("")
  String SetCmUnitMethodDescriptions();

  @DefaultMessage("Enter the color detection mode.")
  @Description("")
  String SetColorModeMethodDescriptions();

  @DefaultMessage("Allows the user to set the date from the instant to be displayed when the date picker opens.")
  @Description("")
  String SetDateToDisplayFromInstantMethodDescriptions();

  @DefaultMessage("Allows the user to set the date to be displayed when the date picker opens.Valid values for the month field are 1-12 and 1-31 for the day field.")
  @Description("")
  String SetDateToDisplayMethodDescriptions();

  @DefaultMessage("Measure the distance in inches.")
  @Description("")
  String SetInchUnitMethodDescriptions();

  @DefaultMessage("Configure an input sensor on the robot.")
  @Description("")
  String SetInputModeMethodDescriptions();

  @DefaultMessage("Sets InstanceId and joins the specified instance.")
  @Description("")
  String SetInstanceMethodDescriptions();

  @DefaultMessage("Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.")
  @Description("")
  String SetLeaderMethodDescriptions();

  @DefaultMessage("Sets the output state of a motor on the robot.")
  @Description("")
  String SetOutputStateMethodDescriptions();

  @DefaultMessage("Measures the angular velocity of the sensor.")
  @Description("")
  String SetRateModeMethodDescriptions();

  @DefaultMessage("Make the sensor read the light level with reflected light.")
  @Description("")
  String SetReflectedModeMethodDescriptions();

  @DefaultMessage("Set the time from the instant to be shown in the Time Picker dialog. Current time is shown by default.")
  @Description("")
  String SetTimeToDisplayFromInstantMethodDescriptions();

  @DefaultMessage("Set the time to be shown in the Time Picker popup. Current time is shown by default.")
  @Description("")
  String SetTimeToDisplayMethodDescriptions();

  @DefaultMessage("Indicates the device started being shaken or continues to be shaken.")
  @Description("")
  String ShakingEventDescriptions();

  @DefaultMessage("Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.")
  @Description("")
  String ShareFileMethodDescriptions();

  @DefaultMessage("Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to choose one from the list. The selected app will open with the file and message inserted on it.")
  @Description("")
  String ShareFileWithMessageMethodDescriptions();

  @DefaultMessage("Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.")
  @Description("")
  String ShareMessageMethodDescriptions();

  @DefaultMessage("Display a temporary notification.")
  @Description("")
  String ShowAlertMethodDescriptions();

  @DefaultMessage("Shows a dialog box with two buttons, from which the user can choose. If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event. The \"choice\" parameter to AfterChoosing will be the text on the button that was pressed, or \"Cancel\" if the CANCEL button was pressed.")
  @Description("")
  String ShowChooseDialogMethodDescriptions();

  @DefaultMessage("Show a compass on the map. If the device provides a digital compass, orientation changes will be used to rotate the compass icon.")
  @Description("")
  String ShowCompassPropertyDescriptions();

  @DefaultMessage("If false, lists will be converted to strings using Lisp notation, i.e., as symbols separated by spaces, e.g., (a 1 b2 (c d). If true, lists will appear as in Json or Python, e.g. [\"a\", 1, \"b\", 2, [\"c\", \"d\"]]. This property appears only in Screen 1, and the value for Screen 1 determines the behavior for all screens. The property defaults to \"true\" meaning that the App Inventor programmer must explicitly set it to \"false\" if Lisp syntax is desired. In older versions of App Inventor, this setting defaulted to false. Older projects should not have been affected by this default settings update.")
  @Description("")
  String ShowListsAsJsonPropertyDescriptions();

  @DefaultMessage("Setter for the loading dialog''s visibility.")
  @Description("")
  String ShowLoadingDialogPropertyDescriptions();

  @DefaultMessage("Display an alert dialog with a single button that dismisses the alert.")
  @Description("")
  String ShowMessageDialogMethodDescriptions();

  @DefaultMessage("Shows a dialog box where the user can enter password (input is masked), after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering password will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the entered password, or \"Cancel\" if CANCEL button was pressed.")
  @Description("")
  String ShowPasswordDialogMethodDescriptions();

  @DefaultMessage("Shows a dialog box with an optional title and message (use empty strings if they are not wanted). This dialog box contains a spinning artifact to indicate that the program is working. It cannot be canceled by the user but must be dismissed by the App Inventor Program by using the DismissProgressDialog block.")
  @Description("")
  String ShowProgressDialogMethodDescriptions();

  @DefaultMessage("Shows or hides a scale overlay on the")
  @Description("")
  String ShowScalePropertyDescriptions();

  @DefaultMessage("Gets whether or not the shadow of the Marker is shown.")
  @Description("")
  String ShowShadowPropertyDescriptions();

  @DefaultMessage("The status bar is the topmost bar on the screen. This property reports whether the status bar is visible.")
  @Description("")
  String ShowStatusBarPropertyDescriptions();

  @DefaultMessage("Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the text that was entered, or \"Cancel\" if the CANCEL button was pressed.")
  @Description("")
  String ShowTextDialogMethodDescriptions();

  @DefaultMessage("Shows or hides an icon indicating the user''s current location on the")
  @Description("")
  String ShowUserPropertyDescriptions();

  @DefaultMessage("Shows or hides an icon indicating the user''s current location on the")
  @Description("")
  String ShowZoomPropertyDescriptions();

  @DefaultMessage("This event is run when a raw step is detected.")
  @Description("")
  String SimpleStepEventDescriptions();

  @DefaultMessage("The number of simple steps taken since the pedometer has started.")
  @Description("")
  String SimpleStepsPropertyDescriptions();

  @DefaultMessage("If set to fixed, screen layouts will be created for a single fixed-size screen and autoscaled. If set to responsive, screen layouts will use the actual resolution of the device. See the documentation on responsive design in App Inventor for more information. This property appears on Screen1 only and controls the sizing for all screens in the app.")
  @Description("")
  String SizingPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Slider as a percentage of the height of the Screen.")
  @Description("")
  String Slider__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies whether the Slider should be visible on the screen. Value is true if the Slider is showing and false if hidden.")
  @Description("")
  String Slider__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Slider as a percentage of the width of the Screen.")
  @Description("")
  String Slider__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Slider, measured in pixels.")
  @Description("")
  String Slider__WidthPropertyDescriptions();

  @DefaultMessage("The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead.")
  @Description("")
  String SoundErrorEventDescriptions();

  @DefaultMessage("Starts recording.")
  @Description("")
  String SoundRecorder__StartMethodDescriptions();

  @DefaultMessage("Stops recording.")
  @Description("")
  String SoundRecorder__StopMethodDescriptions();

  @DefaultMessage("The minimum interval, in milliseconds, between sounds. If you play a sound, all further Play() calls will be ignored until the interval has elapsed.")
  @Description("")
  String Sound__MinimumIntervalPropertyDescriptions();

  @DefaultMessage("Pauses playing the sound if it is being played.")
  @Description("")
  String Sound__PauseMethodDescriptions();

  @DefaultMessage("Resumes playing the sound after a pause.")
  @Description("")
  String Sound__ResumeMethodDescriptions();

  @DefaultMessage("The name of the sound file. Only certain formats are supported. See http://developer.android.com/guide/appendix/media-formats.html.")
  @Description("")
  String Sound__SourcePropertyDescriptions();

  @DefaultMessage("Stops playing the sound if it is being played.")
  @Description("")
  String Sound__StopMethodDescriptions();

  @DefaultMessage("Vibrates for the specified number of milliseconds.")
  @Description("")
  String Sound__VibrateMethodDescriptions();

  @DefaultMessage("The south edge of the rectangle, in decimal degrees north of the equator.")
  @Description("")
  String SouthLatitudePropertyDescriptions();

  @DefaultMessage("Speaks the given message.")
  @Description("")
  String SpeakMethodDescriptions();

  @DefaultMessage("Sets the SpeechRate for TextToSpeech. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it.")
  @Description("")
  String SpeechRatePropertyDescriptions();

  @DefaultMessage("Returns the last text produced by the recognizer.")
  @Description("")
  String SpeechRecognizer__ResultPropertyDescriptions();

  @DefaultMessage("Function used to forcefully stop listening speech in cases where SpeechRecognizer cannot stop automatically. This function works only when the")
  @Description("")
  String SpeechRecognizer__StopMethodDescriptions();

  @DefaultMessage("Sets the Spinner list to the elements passed in the comma-separated string")
  @Description("")
  String Spinner__ElementsFromStringPropertyDescriptions();

  @DefaultMessage("returns a list of text elements to be picked from.")
  @Description("")
  String Spinner__ElementsPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Spinner as a percentage of the height of the Screen.")
  @Description("")
  String Spinner__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Spinner, measured in pixels.")
  @Description("")
  String Spinner__HeightPropertyDescriptions();

  @DefaultMessage("The index of the currently selected item, starting at 1. If no item is selected, the value will be 0.")
  @Description("")
  String Spinner__SelectionIndexPropertyDescriptions();

  @DefaultMessage("Returns the current selected item in the spinner")
  @Description("")
  String Spinner__SelectionPropertyDescriptions();

  @DefaultMessage("Specifies whether the Spinner should be visible on the screen. Value is true if the Spinner is showing and false if hidden.")
  @Description("")
  String Spinner__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Spinner as a percentage of the width of the Screen.")
  @Description("")
  String Spinner__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Spinner, measured in pixels.")
  @Description("")
  String Spinner__WidthPropertyDescriptions();

  @DefaultMessage("Start the activity corresponding to this ActivityStarter.")
  @Description("")
  String StartActivityMethodDescriptions();

  @DefaultMessage("Method for StartContinuousClassification")
  @Description("")
  String StartContinuousClassificationMethodDescriptions();

  @DefaultMessage("The user started a drag operation.")
  @Description("")
  String StartDragEventDescriptions();

  @DefaultMessage("The latitude of the start location.")
  @Description("")
  String StartLatitudePropertyDescriptions();

  @DefaultMessage("Set the start location.")
  @Description("")
  String StartLocationPropertyDescriptions();

  @DefaultMessage("The longitude of the start location.")
  @Description("")
  String StartLongitudePropertyDescriptions();

  @DefaultMessage("Start execution of a previously downloaded program on the robot.")
  @Description("")
  String StartProgramMethodDescriptions();

  @DefaultMessage("This event has been deprecated.")
  @Description("")
  String StartedMovingEventDescriptions();

  @DefaultMessage("Indicates that the recorder has started, and can be stopped.")
  @Description("")
  String StartedRecordingEventDescriptions();

  @DefaultMessage("Indicates that the status of the location provider service has changed, such as when a provider is lost or a new provider starts being used.")
  @Description("")
  String StatusChangedEventDescriptions();

  @DefaultMessage("Stop accepting an incoming connection.")
  @Description("")
  String StopAcceptingMethodDescriptions();

  @DefaultMessage("Method for StopContinuousClassification")
  @Description("")
  String StopContinuousClassificationMethodDescriptions();

  @DefaultMessage("The duration in milliseconds of idleness (no steps detected) after which to go into a \"stopped\" state")
  @Description("")
  String StopDetectionTimeoutPropertyDescriptions();

  @DefaultMessage("The user stopped a drag operation.")
  @Description("")
  String StopDragEventDescriptions();

  @DefaultMessage("Stops following a user.")
  @Description("")
  String StopFollowingMethodDescriptions();

  @DefaultMessage("Stop loading a page.")
  @Description("")
  String StopLoadingMethodDescriptions();

  @DefaultMessage("Stop execution of the currently running program on the robot.")
  @Description("")
  String StopProgramMethodDescriptions();

  @DefaultMessage("Stop any sound on the robot.")
  @Description("")
  String StopSoundMethodDescriptions();

  @DefaultMessage("Stop sound playback.")
  @Description("")
  String StopSoundPlaybackMethodDescriptions();

  @DefaultMessage("This event has been deprecated.")
  @Description("")
  String StoppedMovingEventDescriptions();

  @DefaultMessage("Indicates that the recorder has stopped, and can be started again.")
  @Description("")
  String StoppedRecordingEventDescriptions();

  @DefaultMessage("Set the average stride length in meters.")
  @Description("")
  String StrideLengthPropertyDescriptions();

  @DefaultMessage("The opacity of the stroke used to outline the map feature.")
  @Description("")
  String StrokeOpacityPropertyDescriptions();

  @DefaultMessage("The background color of the Switch as an alpha-red-green-blue integer.")
  @Description("")
  String Switch__BackgroundColorPropertyDescriptions();

  @DefaultMessage("User change the state of the `Switch` from On to Off or back.")
  @Description("")
  String Switch__ChangedEventDescriptions();

  @DefaultMessage("True if the Switch is active and clickable.")
  @Description("")
  String Switch__EnabledPropertyDescriptions();

  @DefaultMessage("Set to true if the text of the Switch should be bold.")
  @Description("")
  String Switch__FontBoldPropertyDescriptions();

  @DefaultMessage("Set to true if the text of the Switch should be italic.")
  @Description("")
  String Switch__FontItalicPropertyDescriptions();

  @DefaultMessage("Specifies the text font size of the Switch in scale-independent pixels.")
  @Description("")
  String Switch__FontSizePropertyDescriptions();

  @DefaultMessage("Specifies the text font face of the Switch.")
  @Description("")
  String Switch__FontTypefacePropertyDescriptions();

  @DefaultMessage("Switch became the focused component.")
  @Description("")
  String Switch__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the Switch as a percentage of the height of the Screen.")
  @Description("")
  String Switch__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the Switch, measured in pixels.")
  @Description("")
  String Switch__HeightPropertyDescriptions();

  @DefaultMessage("Switch stopped being the focused component.")
  @Description("")
  String Switch__LostFocusEventDescriptions();

  @DefaultMessage("Specifies the text color of the Switch as an alpha-red-green-blue integer.")
  @Description("")
  String Switch__TextColorPropertyDescriptions();

  @DefaultMessage("Specifies the text displayed by the Switch.")
  @Description("")
  String Switch__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the Switch should be visible on the screen. Value is true if the Switch is showing and false if hidden.")
  @Description("")
  String Switch__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Switch as a percentage of the width of the Screen.")
  @Description("")
  String Switch__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the Switch, measured in pixels.")
  @Description("")
  String Switch__WidthPropertyDescriptions();

  @DefaultMessage("Returns the phone''s internal time.")
  @Description("")
  String SystemTimeMethodDescriptions();

  @DefaultMessage("Specifies the vertical height of the TableArrangement as a percentage of the height of the Screen.")
  @Description("")
  String TableArrangement__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the TableArrangement, measured in pixels.")
  @Description("")
  String TableArrangement__HeightPropertyDescriptions();

  @DefaultMessage("Specifies whether the TableArrangement should be visible on the screen. Value is true if the TableArrangement is showing and false if hidden.")
  @Description("")
  String TableArrangement__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TableArrangement as a percentage of the width of the Screen.")
  @Description("")
  String TableArrangement__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TableArrangement, measured in pixels.")
  @Description("")
  String TableArrangement__WidthPropertyDescriptions();

  @DefaultMessage("Called when the tacho count has changed.")
  @Description("")
  String TachoCountChangedEventDescriptions();

  @DefaultMessage("Whether the TachoCountChanged event should fire when the angle is changed.")
  @Description("")
  String TachoCountChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.")
  @Description("")
  String TagListEventDescriptions();

  @DefaultMessage("Indicates that a new tag has been detected. Currently this is only a plain text tag, as specified in the manifest.")
  @Description("")
  String TagReadEventDescriptions();

  @DefaultMessage("Indicates that a tag has come into range of the NFC sensor and has been written.")
  @Description("")
  String TagWrittenEventDescriptions();

  @DefaultMessage("Takes a picture, then raises the")
  @Description("")
  String TakePictureMethodDescriptions();

  @DefaultMessage("The user tapped at a point on the map.")
  @Description("")
  String TapAtPointEventDescriptions();

  @DefaultMessage("Property for MinimumInterval")
  @Description("")
  String TeachableMachine__MinimumIntervalPropertyDescriptions();

  @DefaultMessage("Called when a change is detected in the temperature (in degrees Celsius).")
  @Description("")
  String TemperatureChangedEventDescriptions();

  @DefaultMessage("The temperature in degrees Celsius, if the sensor is available and enabled")
  @Description("")
  String TemperaturePropertyDescriptions();

  @DefaultMessage("The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is ''default'' (shaded 3-D look).")
  @Description("")
  String TextBox__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Whether the user can enter text into the TextBox. By default, this is true.")
  @Description("")
  String TextBox__EnabledPropertyDescriptions();

  @DefaultMessage("Whether the font for the text should be bold. By default, it is not.")
  @Description("")
  String TextBox__FontBoldPropertyDescriptions();

  @DefaultMessage("Whether the text should appear in italics. By default, it does not.")
  @Description("")
  String TextBox__FontItalicPropertyDescriptions();

  @DefaultMessage("The font size for the text. By default, it is 14.0 points.")
  @Description("")
  String TextBox__FontSizePropertyDescriptions();

  @DefaultMessage("The font for the text. The value can be changed in the Designer.")
  @Description("")
  String TextBox__FontTypefacePropertyDescriptions();

  @DefaultMessage("Event raised when the TextBox is selected for input, such as by the user touching it.")
  @Description("")
  String TextBox__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the TextBox as a percentage of the height of the Screen.")
  @Description("")
  String TextBox__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the TextBox, measured in pixels.")
  @Description("")
  String TextBox__HeightPropertyDescriptions();

  @DefaultMessage("Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.")
  @Description("")
  String TextBox__HideKeyboardMethodDescriptions();

  @DefaultMessage("Text that should appear faintly in the TextBox to provide a hint as to what the user should enter. This can only be seen if the Text property is empty.")
  @Description("")
  String TextBox__HintPropertyDescriptions();

  @DefaultMessage("Event raised when the TextBox is no longer selected for input, such as if the user touches a different text box.")
  @Description("")
  String TextBox__LostFocusEventDescriptions();

  @DefaultMessage("Sets the TextBox active.")
  @Description("")
  String TextBox__RequestFocusMethodDescriptions();

  @DefaultMessage("Whether the text should be left justified, centered, or right justified. By default, text is left justified.")
  @Description("")
  String TextBox__TextAlignmentPropertyDescriptions();

  @DefaultMessage("The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black.")
  @Description("")
  String TextBox__TextColorPropertyDescriptions();

  @DefaultMessage("Returns the textbox contents.")
  @Description("")
  String TextBox__TextPropertyDescriptions();

  @DefaultMessage("Specifies whether the TextBox should be visible on the screen. Value is true if the TextBox is showing and false if hidden.")
  @Description("")
  String TextBox__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TextBox as a percentage of the width of the Screen.")
  @Description("")
  String TextBox__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TextBox, measured in pixels.")
  @Description("")
  String TextBox__WidthPropertyDescriptions();

  @DefaultMessage("Event raised when the user canceled ShowTextDialog.")
  @Description("")
  String TextInputCanceledEventDescriptions();

  @DefaultMessage("The text size of the listview items.")
  @Description("")
  String TextSizePropertyDescriptions();

  @DefaultMessage("Sets the language for TextToSpeech. This changes the way that words are pronounced, not the actual language that is spoken. For example setting the language to and speaking English text with sound like someone speaking English with a Frernch accent.")
  @Description("")
  String TextToSpeech__LanguagePropertyDescriptions();

  @DefaultMessage("Sets the Pitch for TextToSpeech The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values raise it.")
  @Description("")
  String TextToSpeech__PitchPropertyDescriptions();

  @DefaultMessage("Returns `true")
  @Description("")
  String TextToSpeech__ResultPropertyDescriptions();

  @DefaultMessage("Returns the content of the text that''s going to be written to the tag.")
  @Description("")
  String TextToWritePropertyDescriptions();

  @DefaultMessage("Sets the phone number to send the text message to when the SendMessage function is called.")
  @Description("")
  String Texting__PhoneNumberPropertyDescriptions();

  @DefaultMessage("Launch the phone''s default text messaging app with the message and phone number prepopulated.")
  @Description("")
  String Texting__SendMessageMethodDescriptions();

  @DefaultMessage("Sets the theme used by the application.")
  @Description("")
  String ThemePropertyDescriptions();

  @DefaultMessage("Specifies whether or not the device has the hardware to support the Thermometer component.")
  @Description("")
  String Thermometer__AvailablePropertyDescriptions();

  @DefaultMessage("If enabled, then device will listen for changes.")
  @Description("")
  String Thermometer__EnabledPropertyDescriptions();

  @DefaultMessage("Returns the `Switch`''s thumb color (button that toggles back and forth) when the switch is ON/Checked")
  @Description("")
  String ThumbColorActivePropertyDescriptions();

  @DefaultMessage("Returns the `Switch`''s thumb color (button that toggles back and forth) when the switch is Off/Unchecked")
  @Description("")
  String ThumbColorInactivePropertyDescriptions();

  @DefaultMessage("Sets whether or not to display the slider thumb.")
  @Description("")
  String ThumbEnabledPropertyDescriptions();

  @DefaultMessage("Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue.")
  @Description("")
  String ThumbPositionPropertyDescriptions();

  @DefaultMessage("Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after.")
  @Description("")
  String TimeIntervalPropertyDescriptions();

  @DefaultMessage("Returns the button''s background color")
  @Description("")
  String TimePicker__BackgroundColorPropertyDescriptions();

  @DefaultMessage("If set, user can tap TimePicker to cause action.")
  @Description("")
  String TimePicker__EnabledPropertyDescriptions();

  @DefaultMessage("If set, TimePicker text is displayed in bold.")
  @Description("")
  String TimePicker__FontBoldPropertyDescriptions();

  @DefaultMessage("If set, TimePicker text is displayed in italics.")
  @Description("")
  String TimePicker__FontItalicPropertyDescriptions();

  @DefaultMessage("Point size for TimePicker text.")
  @Description("")
  String TimePicker__FontSizePropertyDescriptions();

  @DefaultMessage("Font family for TimePicker text.")
  @Description("")
  String TimePicker__FontTypefacePropertyDescriptions();

  @DefaultMessage("Indicates the cursor moved over the TimePicker so it is now possible to click it.")
  @Description("")
  String TimePicker__GotFocusEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the TimePicker as a percentage of the height of the Screen.")
  @Description("")
  String TimePicker__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the TimePicker, measured in pixels.")
  @Description("")
  String TimePicker__HeightPropertyDescriptions();

  @DefaultMessage("Image to display on button.")
  @Description("")
  String TimePicker__ImagePropertyDescriptions();

  @DefaultMessage("The instant of the last time set using the time picker")
  @Description("")
  String TimePicker__InstantPropertyDescriptions();

  @DefaultMessage("Launches the TimePicker dialog.")
  @Description("")
  String TimePicker__LaunchPickerMethodDescriptions();

  @DefaultMessage("Indicates the cursor moved away from the TimePicker so it is now no longer possible to click it.")
  @Description("")
  String TimePicker__LostFocusEventDescriptions();

  @DefaultMessage("Returns the style of the `TimePicker`.")
  @Description("")
  String TimePicker__ShapePropertyDescriptions();

  @DefaultMessage("Specifies if a visual feedback should be shown for a TimePicker that has an image as background.")
  @Description("")
  String TimePicker__ShowFeedbackPropertyDescriptions();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String TimePicker__TextAlignmentPropertyDescriptions();

  @DefaultMessage("Color for button text.")
  @Description("")
  String TimePicker__TextColorPropertyDescriptions();

  @DefaultMessage("Text to display on TimePicker.")
  @Description("")
  String TimePicker__TextPropertyDescriptions();

  @DefaultMessage("Indicates that the TimePicker was pressed down.")
  @Description("")
  String TimePicker__TouchDownEventDescriptions();

  @DefaultMessage("Indicates that the TimePicker has been released.")
  @Description("")
  String TimePicker__TouchUpEventDescriptions();

  @DefaultMessage("Specifies whether the TimePicker should be visible on the screen. Value is true if the TimePicker is showing and false if hidden.")
  @Description("")
  String TimePicker__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TimePicker as a percentage of the width of the Screen.")
  @Description("")
  String TimePicker__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the TimePicker, measured in pixels.")
  @Description("")
  String TimePicker__WidthPropertyDescriptions();

  @DefaultMessage("Event indicating that a request has timed out.")
  @Description("")
  String TimedOutEventDescriptions();

  @DefaultMessage("The number of milliseconds that a web request will wait for a response before giving up. If set to 0, then there is no time limit on how long the request will wait.")
  @Description("")
  String TimeoutPropertyDescriptions();

  @DefaultMessage("Will fire even when application is not showing on the screen if true")
  @Description("")
  String TimerAlwaysFiresPropertyDescriptions();

  @DefaultMessage("Fires timer if true")
  @Description("")
  String TimerEnabledPropertyDescriptions();

  @DefaultMessage("The Timer event runs when the timer has gone off.")
  @Description("")
  String TimerEventDescriptions();

  @DefaultMessage("Interval between timer events in ms")
  @Description("")
  String TimerIntervalPropertyDescriptions();

  @DefaultMessage("Clear the entry with the given tag.")
  @Description("")
  String TinyDB__ClearTagMethodDescriptions();

  @DefaultMessage("Retrieve the value stored under the given tag. If there''s no such tag, then return valueIfTagNotThere.")
  @Description("")
  String TinyDB__GetValueMethodDescriptions();

  @DefaultMessage("Store the given value under the given tag. The storage persists on the phone when the app is restarted.")
  @Description("")
  String TinyDB__StoreValueMethodDescriptions();

  @DefaultMessage("Sends a request to the Web service to get the value stored under the given tag. The Web service must decide what to return if there is no value stored under the tag. This component accepts whatever is returned.")
  @Description("")
  String TinyWebDB__GetValueMethodDescriptions();

  @DefaultMessage("Indicates that a GetValue server request has succeeded.")
  @Description("")
  String TinyWebDB__GotValueEventDescriptions();

  @DefaultMessage("The URL of the web service database.")
  @Description("")
  String TinyWebDB__ServiceURLPropertyDescriptions();

  @DefaultMessage("Asks the Web service to store the given value under the given tag")
  @Description("")
  String TinyWebDB__StoreValueMethodDescriptions();

  @DefaultMessage("Indicates that the communication with the Web service signaled an error.")
  @Description("")
  String TinyWebDB__WebServiceErrorEventDescriptions();

  @DefaultMessage("The title bar is the top gray bar on the screen. This property reports whether the title bar is visible.")
  @Description("")
  String TitleVisiblePropertyDescriptions();

  @DefaultMessage("Toggles between user-facing and environment-facing camera.")
  @Description("")
  String ToggleCameraFacingModeMethodDescriptions();

  @DefaultMessage("Toggle the direction of motors.")
  @Description("")
  String ToggleDirectionMethodDescriptions();

  @DefaultMessage("This field contains the authentication token used to login to the backed Redis server. For the \"DEFAULT\" server, do not edit this value, the system will fill it in for you. A system administrator may also provide a special value to you which can be used to share data between multiple projects from multiple people. If using your own Redis server, set a password in the server''s config and enter it here.")
  @Description("")
  String TokenPropertyDescriptions();

  @DefaultMessage("The top of the range used for the BelowRange, WithinRange, and AboveRange events.")
  @Description("")
  String TopOfRangePropertyDescriptions();

  @DefaultMessage("Returns the `Switch`''s track color")
  @Description("")
  String TrackColorActivePropertyDescriptions();

  @DefaultMessage("Color of the toggle track when switched off")
  @Description("")
  String TrackColorInactivePropertyDescriptions();

  @DefaultMessage("The transportation method used for determining the route.")
  @Description("")
  String TransportationMethodPropertyDescriptions();

  @DefaultMessage("Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.")
  @Description("")
  String TurnClockwiseIndefinitelyMethodDescriptions();

  @DefaultMessage("Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.")
  @Description("")
  String TurnCounterClockwiseIndefinitelyMethodDescriptions();

  @DefaultMessage("A URL to use to populate the Tutorial Sidebar while editing a project. Used as a teaching aid.")
  @Description("")
  String TutorialURLPropertyDescriptions();

  @DefaultMessage("This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String TweetMethodDescriptions();

  @DefaultMessage("This sends a tweet as the logged-in user with the specified Text and a path to the image to be uploaded, which will be trimmed if it exceeds 160 characters. If an image is not found or invalid, only the text will be tweeted.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String TweetWithImageMethodDescriptions();

  @DefaultMessage("TwitPicAPIkey property getter method.")
  @Description("")
  String TwitPic_API_KeyPropertyDescriptions();

  @DefaultMessage("If you are having difficulty with the Companion and you are switching between different Firebase accounts, you may need to use this function to clear internal Firebase caches. You can just use the \"Do It\" function on this block in the blocks editor. Note: You should not normally need to use this block as part of an application.")
  @Description("")
  String UnauthenticateMethodDescriptions();

  @DefaultMessage("Specifies the unit of distance.")
  @Description("")
  String UnitPropertyDescriptions();

  @DefaultMessage("Decodes the encoded text value so that the values aren''t URL encoded anymore.")
  @Description("")
  String UriDecodeMethodDescriptions();

  @DefaultMessage("Encodes the given text value so that it can be used in a URL.")
  @Description("")
  String UriEncodeMethodDescriptions();

  @DefaultMessage("The URL for the web request.")
  @Description("")
  String UrlPropertyDescriptions();

  @DefaultMessage("If true App Inventor will look for and use an external scanning program such as \"Bar Code Scanner.\"")
  @Description("")
  String UseExternalScannerPropertyDescriptions();

  @DefaultMessage("Returns true if the front-facing camera is to be used (when available)")
  @Description("")
  String UseFrontPropertyDescriptions();

  @DefaultMessage("This property has been deprecated.")
  @Description("")
  String UseGPSPropertyDescriptions();

  @DefaultMessage("If true, an app can retain their older behaviour.")
  @Description("")
  String UseLegacyPropertyDescriptions();

  @DefaultMessage("Set to true to use SSL to talk to CloudDB/Redis server. This should be set to True for the \"DEFAULT\" server.")
  @Description("")
  String UseSSLPropertyDescriptions();

  @DefaultMessage("Indicates whether a service account should be used for authentication")
  @Description("")
  String UseServiceAuthenticationPropertyDescriptions();

  @DefaultMessage("The ballot choice to send to the server, which must be set before <code>SendBallot</code> is called. This must be one of <code>BallotOptions</code>.")
  @Description("")
  String UserChoicePropertyDescriptions();

  @DefaultMessage("Indicates that the user email address has been set.")
  @Description("")
  String UserEmailAddressSetEventDescriptions();

  @DefaultMessage("A text identifying the voter that is sent to the Voting server along with the vote. This must be set before <code>SendBallot</code> is called.")
  @Description("")
  String UserIdPropertyDescriptions();

  @DefaultMessage("Returns the user''s latitude if ShowUser is enabled.")
  @Description("")
  String UserLatitudePropertyDescriptions();

  @DefaultMessage("Returns the user''s longitude if ShowUser is enabled.")
  @Description("")
  String UserLongitudePropertyDescriptions();

  @DefaultMessage("The user name of the authorized user. Empty if there is no authorized user.")
  @Description("")
  String UsernamePropertyDescriptions();

  @DefaultMessage("Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer.")
  @Description("")
  String UsesLocationPropertyDescriptions();

  @DefaultMessage("Event indicating that a StoreValue server request has succeeded.")
  @Description("")
  String ValueStoredEventDescriptions();

  @DefaultMessage("An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store.")
  @Description("")
  String VersionCodePropertyDescriptions();

  @DefaultMessage("A string which can be changed to allow Google Play Store users to distinguish between different versions of the App.")
  @Description("")
  String VersionNamePropertyDescriptions();

  @DefaultMessage("A number that encodes how contents of the VerticalArrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement''s width is automatic.")
  @Description("")
  String VerticalArrangement__AlignHorizontalPropertyDescriptions();

  @DefaultMessage("A number that encodes how the contents of the VerticalArrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement''s height is automatic.")
  @Description("")
  String VerticalArrangement__AlignVerticalPropertyDescriptions();

  @DefaultMessage("Returns the background color of the VerticalArrangement")
  @Description("")
  String VerticalArrangement__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the VerticalArrangement as a percentage of the height of the Screen.")
  @Description("")
  String VerticalArrangement__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the VerticalArrangement, measured in pixels.")
  @Description("")
  String VerticalArrangement__HeightPropertyDescriptions();

  @DefaultMessage("Returns the path of the background image of the `VerticalArrangement`.")
  @Description("")
  String VerticalArrangement__ImagePropertyDescriptions();

  @DefaultMessage("Specifies whether the VerticalArrangement should be visible on the screen. Value is true if the VerticalArrangement is showing and false if hidden.")
  @Description("")
  String VerticalArrangement__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the VerticalArrangement as a percentage of the width of the Screen.")
  @Description("")
  String VerticalArrangement__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the VerticalArrangement, measured in pixels.")
  @Description("")
  String VerticalArrangement__WidthPropertyDescriptions();

  @DefaultMessage("A number that encodes how contents of the VerticalScrollArrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement''s width is automatic.")
  @Description("")
  String VerticalScrollArrangement__AlignHorizontalPropertyDescriptions();

  @DefaultMessage("A number that encodes how the contents of the VerticalScrollArrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement''s height is automatic.")
  @Description("")
  String VerticalScrollArrangement__AlignVerticalPropertyDescriptions();

  @DefaultMessage("Returns the background color of the VerticalScrollArrangement")
  @Description("")
  String VerticalScrollArrangement__BackgroundColorPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the VerticalScrollArrangement as a percentage of the height of the Screen.")
  @Description("")
  String VerticalScrollArrangement__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the vertical height of the VerticalScrollArrangement, measured in pixels.")
  @Description("")
  String VerticalScrollArrangement__HeightPropertyDescriptions();

  @DefaultMessage("Returns the path of the background image of the `VerticalScrollArrangement`.")
  @Description("")
  String VerticalScrollArrangement__ImagePropertyDescriptions();

  @DefaultMessage("Specifies whether the VerticalScrollArrangement should be visible on the screen. Value is true if the VerticalScrollArrangement is showing and false if hidden.")
  @Description("")
  String VerticalScrollArrangement__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the VerticalScrollArrangement as a percentage of the width of the Screen.")
  @Description("")
  String VerticalScrollArrangement__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the VerticalScrollArrangement, measured in pixels.")
  @Description("")
  String VerticalScrollArrangement__WidthPropertyDescriptions();

  @DefaultMessage("The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.")
  @Description("")
  String VideoPlayerErrorEventDescriptions();

  @DefaultMessage("Indicates that the video has reached the end")
  @Description("")
  String VideoPlayer__CompletedEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the VideoPlayer as a percentage of the height of the Screen.")
  @Description("")
  String VideoPlayer__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the component''s vertical height, measured in pixels.")
  @Description("")
  String VideoPlayer__HeightPropertyDescriptions();

  @DefaultMessage("Pauses playback of the video. Playback can be resumed at the same location by calling the <code>Start</code> method.")
  @Description("")
  String VideoPlayer__PauseMethodDescriptions();

  @DefaultMessage("The \"path\" to the video. Usually, this will be the name of the video file, which should be added in the Designer.")
  @Description("")
  String VideoPlayer__SourcePropertyDescriptions();

  @DefaultMessage("Starts playback of the video.")
  @Description("")
  String VideoPlayer__StartMethodDescriptions();

  @DefaultMessage("Resets to start of video and pauses it if video was playing.")
  @Description("")
  String VideoPlayer__StopMethodDescriptions();

  @DefaultMessage("Specifies whether the VideoPlayer should be visible on the screen. Value is true if the VideoPlayer is showing and false if hidden.")
  @Description("")
  String VideoPlayer__VisiblePropertyDescriptions();

  @DefaultMessage("Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100.")
  @Description("")
  String VideoPlayer__VolumePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the VideoPlayer as a percentage of the width of the Screen.")
  @Description("")
  String VideoPlayer__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the component''s horizontal width, measured in pixels.")
  @Description("")
  String VideoPlayer__WidthPropertyDescriptions();

  @DefaultMessage("view a contact via its URI")
  @Description("")
  String ViewContactMethodDescriptions();

  @DefaultMessage("The URL of the Voting service")
  @Description("")
  String Voting__ServiceURLPropertyDescriptions();

  @DefaultMessage("The email address associated with this device. This property has been deprecated and always returns the empty text value.")
  @Description("")
  String Voting__UserEmailAddressPropertyDescriptions();

  @DefaultMessage("Event indicating that the communication with the Web service resulted in an error.")
  @Description("")
  String Voting__WebServiceErrorEventDescriptions();

  @DefaultMessage("This event is run when a walking step is detected. A walking step is a step that appears to be involved in forward motion.")
  @Description("")
  String WalkStepEventDescriptions();

  @DefaultMessage("the number of walk steps taken since the pedometer has started.")
  @Description("")
  String WalkStepsPropertyDescriptions();

  @DefaultMessage("Set whether or not we will use WebRTC to communicate with the server")
  @Description("")
  String WebRTCPropertyDescriptions();

  @DefaultMessage("When the JavaScript calls AppInventor.setWebViewString this event is run.")
  @Description("")
  String WebViewStringChangeEventDescriptions();

  @DefaultMessage("Gets the WebView''s String, which is viewable through Javascript in the WebView as the window.AppInventor object")
  @Description("")
  String WebViewStringPropertyDescriptions();

  @DefaultMessage("Property for WebViewer")
  @Description("")
  String WebViewerPropertyDescriptions();

  @DefaultMessage("Clear WebView cookies.")
  @Description("")
  String WebViewer__ClearCookiesMethodDescriptions();

  @DefaultMessage("When an error occurs this event is run.")
  @Description("")
  String WebViewer__ErrorOccurredEventDescriptions();

  @DefaultMessage("Specifies the vertical height of the WebViewer as a percentage of the height of the Screen.")
  @Description("")
  String WebViewer__HeightPercentPropertyDescriptions();

  @DefaultMessage("Specifies the `WebViewer`''s vertical height, measured in pixels.")
  @Description("")
  String WebViewer__HeightPropertyDescriptions();

  @DefaultMessage("Specifies whether the WebViewer should be visible on the screen. Value is true if the WebViewer is showing and false if hidden.")
  @Description("")
  String WebViewer__VisiblePropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the WebViewer as a percentage of the width of the Screen.")
  @Description("")
  String WebViewer__WidthPercentPropertyDescriptions();

  @DefaultMessage("Specifies the horizontal width of the `WebViewer`, measured in pixels.")
  @Description("")
  String WebViewer__WidthPropertyDescriptions();

  @DefaultMessage("Clears all cookies for this Web component.")
  @Description("")
  String Web__ClearCookiesMethodDescriptions();

  @DefaultMessage("Performs an HTTP DELETE request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String Web__DeleteMethodDescriptions();

  @DefaultMessage("Event indicating that a request has finished.")
  @Description("")
  String Web__GotTextEventDescriptions();

  @DefaultMessage("Returns the day of the week represented as a number from 1 (Sunday) to 7 (Saturday).")
  @Description("")
  String WeekdayMethodDescriptions();

  @DefaultMessage("Returns the name of the day of the week from the instant.")
  @Description("")
  String WeekdayNameMethodDescriptions();

  @DefaultMessage("The west edge of the rectangle, in decimal degrees east of the equator.")
  @Description("")
  String WestLongitudePropertyDescriptions();

  @DefaultMessage("Writes given data to serial.")
  @Description("")
  String WriteSerialMethodDescriptions();

  @DefaultMessage("Returns the write type for the NFC component. For this version of the component, it is always `1`.")
  @Description("")
  String WriteTypePropertyDescriptions();

  @DefaultMessage("Returns the acceleration in the X-dimension in SI units (m/s²). The sensor must be enabled to return meaningful values.")
  @Description("")
  String XAccelPropertyDescriptions();

  @DefaultMessage("The angular velocity around the X axis, in degrees per second.")
  @Description("")
  String XAngularVelocityPropertyDescriptions();

  @DefaultMessage("Decodes the given XML into a set of nested dictionaries that capture the structure and data contained in the XML. See the help for more details.")
  @Description("")
  String XMLTextDecodeAsDictionaryMethodDescriptions();

  @DefaultMessage("Decodes the given XML string to produce a dictionary structure. See the App Inventor documentation on \"Other topics, notes, and details\" for information.")
  @Description("")
  String XMLTextDecodeMethodDescriptions();

  @DefaultMessage("Indicates the field''s strength in the X-axis.")
  @Description("")
  String XStrengthPropertyDescriptions();

  @DefaultMessage("Returns the acceleration in the Y-dimension in SI units (m/s²). The sensor must be enabled to return meaningful values.")
  @Description("")
  String YAccelPropertyDescriptions();

  @DefaultMessage("The angular velocity around the Y axis, in degrees per second.")
  @Description("")
  String YAngularVelocityPropertyDescriptions();

  @DefaultMessage("Indicates the field''s strength in the Y-axis.")
  @Description("")
  String YStrengthPropertyDescriptions();

  @DefaultMessage("Set the API Key to use with Yandex. You do not need to set this if you are using the MIT system because MIT has its own key builtin. If set, the key provided here will be used instead")
  @Description("")
  String YandexTranslate__ApiKeyPropertyDescriptions();

  @DefaultMessage("The year")
  @Description("")
  String YearMethodDescriptions();

  @DefaultMessage("the Year that was last picked using the DatePicker")
  @Description("")
  String YearPropertyDescriptions();

  @DefaultMessage("Returns the acceleration in the Z-dimension in SI units (m/s²). The sensor must be enabled to return meaningful values.")
  @Description("")
  String ZAccelPropertyDescriptions();

  @DefaultMessage("The angular velocity around the Z axis, in degrees per second.")
  @Description("")
  String ZAngularVelocityPropertyDescriptions();

  @DefaultMessage("Indicates the field''s strength in the Z-axis.")
  @Description("")
  String ZStrengthPropertyDescriptions();

  @DefaultMessage("User has changed the zoom level of the map.")
  @Description("")
  String ZoomChangeEventDescriptions();

  @DefaultMessage("Specifies the zoom level of the map. Valid values of ZoomLevel are dependent on the tile provider and the latitude and longitude of the map. For example, zoom levels are more constrained over oceans than dense city centers to conserve space for storing tiles, so valid values may be 1-7 over ocean and 1-20 over cities. Tile providers may send warning or error tiles if the zoom level is too great for the server to support.")
  @Description("")
  String ZoomLevelPropertyDescriptions();

  @DefaultMessage("Causes an Exception, used to debug exception processing.")
  @Description("")
  String doFaultMethodDescriptions();

  @DefaultMessage("Downloads the URL and installs it as an Android Package via the installed browser")
  @Description("")
  String installURLMethodDescriptions();

  @DefaultMessage("Returns TRUE if the phone is on Wifi, FALSE otherwise")
  @Description("")
  String isConnectedMethodDescriptions();

  @DefaultMessage("Returns true if we are running in the emulator or USB Connection")
  @Description("")
  String isDirectMethodDescriptions();

  @DefaultMessage("Declare that we have loaded our initial assets and other assets should come from the sdcard")
  @Description("")
  String setAssetsLoadedMethodDescriptions();

  @DefaultMessage("Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server. Note: This code also starts the connection negotiation process if we are using WebRTC. This is a bit of a kludge...")
  @Description("")
  String setHmacSeedReturnCodeMethodDescriptions();

  @DefaultMessage("Really Exit the Application")
  @Description("")
  String shutdownMethodDescriptions();

  @DefaultMessage("Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!")
  @Description("")
  String startHTTPDMethodDescriptions();

  @DefaultMessage("Start the WebRTC engine")
  @Description("")
  String startWebRTCMethodDescriptions();


  /* Parameters */
  @DefaultMessage("XmlText")
  @Description("")
  String XmlTextParams();

  @DefaultMessage("absoluteStrength")
  @Description("")
  String absoluteStrengthParams();

  @DefaultMessage("address")
  @Description("")
  String addressParams();

  @DefaultMessage("altitude")
  @Description("")
  String altitudeParams();

  @DefaultMessage("angle")
  @Description("")
  String angleParams();

  @DefaultMessage("arguments")
  @Description("")
  String argumentsParams();

  @DefaultMessage("azimuth")
  @Description("")
  String azimuthParams();

  @DefaultMessage("bottom")
  @Description("")
  String bottomParams();

  @DefaultMessage("button1Text")
  @Description("")
  String button1TextParams();

  @DefaultMessage("button2Text")
  @Description("")
  String button2TextParams();

  @DefaultMessage("buttonText")
  @Description("")
  String buttonTextParams();

  @DefaultMessage("cancelable")
  @Description("")
  String cancelableParams();

  @DefaultMessage("centroid")
  @Description("")
  String centroidParams();

  @DefaultMessage("centroids")
  @Description("")
  String centroidsParams();

  @DefaultMessage("choice")
  @Description("")
  String choiceParams();

  @DefaultMessage("clip")
  @Description("")
  String clipParams();

  @DefaultMessage("color")
  @Description("")
  String colorParams();

  @DefaultMessage("columns")
  @Description("")
  String columnsParams();

  @DefaultMessage("command")
  @Description("")
  String commandParams();

  @DefaultMessage("component")
  @Description("")
  String componentParams();

  @DefaultMessage("conditions")
  @Description("")
  String conditionsParams();

  @DefaultMessage("contents")
  @Description("")
  String contentsParams();

  @DefaultMessage("count")
  @Description("")
  String countParams();

  @DefaultMessage("currentX")
  @Description("")
  String currentXParams();

  @DefaultMessage("currentY")
  @Description("")
  String currentYParams();

  @DefaultMessage("data")
  @Description("")
  String dataParams();

  @DefaultMessage("day")
  @Description("")
  String dayParams();

  @DefaultMessage("description")
  @Description("")
  String descriptionParams();

  @DefaultMessage("destination")
  @Description("")
  String destinationParams();

  @DefaultMessage("directions")
  @Description("")
  String directionsParams();

  @DefaultMessage("distance")
  @Description("")
  String distanceParams();

  @DefaultMessage("duration")
  @Description("")
  String durationParams();

  @DefaultMessage("durationMs")
  @Description("")
  String durationMsParams();

  @DefaultMessage("edge")
  @Description("")
  String edgeParams();

  @DefaultMessage("emailAddress")
  @Description("")
  String emailAddressParams();

  @DefaultMessage("encoding")
  @Description("")
  String encodingParams();

  @DefaultMessage("end")
  @Description("")
  String endParams();

  @DefaultMessage("errorCode")
  @Description("")
  String errorCodeParams();

  @DefaultMessage("errorMessage")
  @Description("")
  String errorMessageParams();

  @DefaultMessage("failingUrl")
  @Description("")
  String failingUrlParams();

  @DefaultMessage("feature")
  @Description("")
  String featureParams();

  @DefaultMessage("features")
  @Description("")
  String featuresParams();

  @DefaultMessage("file")
  @Description("")
  String fileParams();

  @DefaultMessage("fileName")
  @Description("")
  String fileNameParams();

  @DefaultMessage("fill")
  @Description("")
  String fillParams();

  @DefaultMessage("followers2")
  @Description("")
  String followers2Params();

  @DefaultMessage("frequencyHz")
  @Description("")
  String frequencyHzParams();

  @DefaultMessage("from")
  @Description("")
  String fromParams();

  @DefaultMessage("functionName")
  @Description("")
  String functionNameParams();

  @DefaultMessage("heading")
  @Description("")
  String headingParams();

  @DefaultMessage("height")
  @Description("")
  String heightParams();

  @DefaultMessage("hour")
  @Description("")
  String hourParams();

  @DefaultMessage("htmlText")
  @Description("")
  String htmlTextParams();

  @DefaultMessage("humidity")
  @Description("")
  String humidityParams();

  @DefaultMessage("iceServers")
  @Description("")
  String iceServersParams();

  @DefaultMessage("image")
  @Description("")
  String imageParams();

  @DefaultMessage("imagePath")
  @Description("")
  String imagePathParams();

  @DefaultMessage("instanceId")
  @Description("")
  String instanceIdParams();

  @DefaultMessage("instant")
  @Description("")
  String instantParams();

  @DefaultMessage("itemToAdd")
  @Description("")
  String itemToAddParams();

  @DefaultMessage("js")
  @Description("")
  String jsParams();

  @DefaultMessage("jsonObject")
  @Description("")
  String jsonObjectParams();

  @DefaultMessage("jsonText")
  @Description("")
  String jsonTextParams();

  @DefaultMessage("languageToTranslateTo")
  @Description("")
  String languageToTranslateToParams();

  @DefaultMessage("latitude")
  @Description("")
  String latitudeParams();

  @DefaultMessage("left")
  @Description("")
  String leftParams();

  @DefaultMessage("list")
  @Description("")
  String listParams();

  @DefaultMessage("locationName")
  @Description("")
  String locationNameParams();

  @DefaultMessage("longitude")
  @Description("")
  String longitudeParams();

  @DefaultMessage("lux")
  @Description("")
  String luxParams();

  @DefaultMessage("mailbox")
  @Description("")
  String mailboxParams();

  @DefaultMessage("makePublic")
  @Description("")
  String makePublicParams();

  @DefaultMessage("mapFeature")
  @Description("")
  String mapFeatureParams();

  @DefaultMessage("mediafile")
  @Description("")
  String mediafileParams();

  @DefaultMessage("mentions")
  @Description("")
  String mentionsParams();

  @DefaultMessage("message")
  @Description("")
  String messageParams();

  @DefaultMessage("messageText")
  @Description("")
  String messageTextParams();

  @DefaultMessage("messages")
  @Description("")
  String messagesParams();

  @DefaultMessage("millis")
  @Description("")
  String millisParams();

  @DefaultMessage("milliseconds")
  @Description("")
  String millisecondsParams();

  @DefaultMessage("millisecs")
  @Description("")
  String millisecsParams();

  @DefaultMessage("minute")
  @Description("")
  String minuteParams();

  @DefaultMessage("mode")
  @Description("")
  String modeParams();

  @DefaultMessage("month")
  @Description("")
  String monthParams();

  @DefaultMessage("motorPortLetter")
  @Description("")
  String motorPortLetterParams();

  @DefaultMessage("ms")
  @Description("")
  String msParams();

  @DefaultMessage("name")
  @Description("")
  String nameParams();

  @DefaultMessage("no")
  @Description("")
  String noParams();

  @DefaultMessage("notice")
  @Description("")
  String noticeParams();

  @DefaultMessage("number")
  @Description("")
  String numberParams();

  @DefaultMessage("numberOfBytes")
  @Description("")
  String numberOfBytesParams();

  @DefaultMessage("other")
  @Description("")
  String otherParams();

  @DefaultMessage("otherScreenName")
  @Description("")
  String otherScreenNameParams();

  @DefaultMessage("partial")
  @Description("")
  String partialParams();

  @DefaultMessage("path")
  @Description("")
  String pathParams();

  @DefaultMessage("pattern")
  @Description("")
  String patternParams();

  @DefaultMessage("permissionName")
  @Description("")
  String permissionNameParams();

  @DefaultMessage("phoneNumber")
  @Description("")
  String phoneNumberParams();

  @DefaultMessage("pitch")
  @Description("")
  String pitchParams();

  @DefaultMessage("playerEmail")
  @Description("")
  String playerEmailParams();

  @DefaultMessage("playerId")
  @Description("")
  String playerIdParams();

  @DefaultMessage("pointList")
  @Description("")
  String pointListParams();

  @DefaultMessage("points")
  @Description("")
  String pointsParams();

  @DefaultMessage("power")
  @Description("")
  String powerParams();

  @DefaultMessage("pressure")
  @Description("")
  String pressureParams();

  @DefaultMessage("prevX")
  @Description("")
  String prevXParams();

  @DefaultMessage("prevY")
  @Description("")
  String prevYParams();

  @DefaultMessage("programName")
  @Description("")
  String programNameParams();

  @DefaultMessage("provider")
  @Description("")
  String providerParams();

  @DefaultMessage("quantity")
  @Description("")
  String quantityParams();

  @DefaultMessage("query")
  @Description("")
  String queryParams();

  @DefaultMessage("radius")
  @Description("")
  String radiusParams();

  @DefaultMessage("regulationMode")
  @Description("")
  String regulationModeParams();

  @DefaultMessage("relative")
  @Description("")
  String relativeParams();

  @DefaultMessage("rendezvousServer")
  @Description("")
  String rendezvousServerParams();

  @DefaultMessage("response")
  @Description("")
  String responseParams();

  @DefaultMessage("responseCode")
  @Description("")
  String responseCodeParams();

  @DefaultMessage("responseContent")
  @Description("")
  String responseContentParams();

  @DefaultMessage("responseType")
  @Description("")
  String responseTypeParams();

  @DefaultMessage("result")
  @Description("")
  String resultParams();

  @DefaultMessage("right")
  @Description("")
  String rightParams();

  @DefaultMessage("roll")
  @Description("")
  String rollParams();

  @DefaultMessage("runState")
  @Description("")
  String runStateParams();

  @DefaultMessage("rxDataLength")
  @Description("")
  String rxDataLengthParams();

  @DefaultMessage("searchResults")
  @Description("")
  String searchResultsParams();

  @DefaultMessage("second")
  @Description("")
  String secondParams();

  @DefaultMessage("secure")
  @Description("")
  String secureParams();

  @DefaultMessage("seed")
  @Description("")
  String seedParams();

  @DefaultMessage("selection")
  @Description("")
  String selectionParams();

  @DefaultMessage("sender")
  @Description("")
  String senderParams();

  @DefaultMessage("sensorMode")
  @Description("")
  String sensorModeParams();

  @DefaultMessage("sensorPortLetter")
  @Description("")
  String sensorPortLetterParams();

  @DefaultMessage("sensorType")
  @Description("")
  String sensorTypeParams();

  @DefaultMessage("sensorValue")
  @Description("")
  String sensorValueParams();

  @DefaultMessage("serviceName")
  @Description("")
  String serviceNameParams();

  @DefaultMessage("simpleSteps")
  @Description("")
  String simpleStepsParams();

  @DefaultMessage("sound")
  @Description("")
  String soundParams();

  @DefaultMessage("source")
  @Description("")
  String sourceParams();

  @DefaultMessage("speed")
  @Description("")
  String speedParams();

  @DefaultMessage("start")
  @Description("")
  String startParams();

  @DefaultMessage("startAngle")
  @Description("")
  String startAngleParams();

  @DefaultMessage("startX")
  @Description("")
  String startXParams();

  @DefaultMessage("startY")
  @Description("")
  String startYParams();

  @DefaultMessage("status")
  @Description("")
  String statusParams();

  @DefaultMessage("sweepAngle")
  @Description("")
  String sweepAngleParams();

  @DefaultMessage("tableId")
  @Description("")
  String tableIdParams();

  @DefaultMessage("tachoCount")
  @Description("")
  String tachoCountParams();

  @DefaultMessage("tachoCounts")
  @Description("")
  String tachoCountsParams();

  @DefaultMessage("tachoLimit")
  @Description("")
  String tachoLimitParams();

  @DefaultMessage("tag")
  @Description("")
  String tagParams();

  @DefaultMessage("tagFromWebDB")
  @Description("")
  String tagFromWebDBParams();

  @DefaultMessage("target")
  @Description("")
  String targetParams();

  @DefaultMessage("temperature")
  @Description("")
  String temperatureParams();

  @DefaultMessage("text")
  @Description("")
  String textParams();

  @DefaultMessage("textToTranslate")
  @Description("")
  String textToTranslateParams();

  @DefaultMessage("thumbPosition")
  @Description("")
  String thumbPositionParams();

  @DefaultMessage("timeline")
  @Description("")
  String timelineParams();

  @DefaultMessage("timestamp")
  @Description("")
  String timestampParams();

  @DefaultMessage("title")
  @Description("")
  String titleParams();

  @DefaultMessage("top")
  @Description("")
  String topParams();

  @DefaultMessage("translation")
  @Description("")
  String translationParams();

  @DefaultMessage("turnRatio")
  @Description("")
  String turnRatioParams();

  @DefaultMessage("type")
  @Description("")
  String typeParams();

  @DefaultMessage("uri")
  @Description("")
  String uriParams();

  @DefaultMessage("url")
  @Description("")
  String urlParams();

  @DefaultMessage("useBrake")
  @Description("")
  String useBrakeParams();

  @DefaultMessage("useCenter")
  @Description("")
  String useCenterParams();

  @DefaultMessage("user")
  @Description("")
  String userParams();

  @DefaultMessage("uuid")
  @Description("")
  String uuidParams();

  @DefaultMessage("value")
  @Description("")
  String valueParams();

  @DefaultMessage("valueFromWebDB")
  @Description("")
  String valueFromWebDBParams();

  @DefaultMessage("valueToAdd")
  @Description("")
  String valueToAddParams();

  @DefaultMessage("valueToStore")
  @Description("")
  String valueToStoreParams();

  @DefaultMessage("values")
  @Description("")
  String valuesParams();

  @DefaultMessage("walkSteps")
  @Description("")
  String walkStepsParams();

  @DefaultMessage("width")
  @Description("")
  String widthParams();

  @DefaultMessage("wildcard")
  @Description("")
  String wildcardParams();

  @DefaultMessage("x")
  @Description("")
  String xParams();

  @DefaultMessage("x1")
  @Description("")
  String x1Params();

  @DefaultMessage("x2")
  @Description("")
  String x2Params();

  @DefaultMessage("xAccel")
  @Description("")
  String xAccelParams();

  @DefaultMessage("xAngularVelocity")
  @Description("")
  String xAngularVelocityParams();

  @DefaultMessage("xStrength")
  @Description("")
  String xStrengthParams();

  @DefaultMessage("xvel")
  @Description("")
  String xvelParams();

  @DefaultMessage("y")
  @Description("")
  String yParams();

  @DefaultMessage("y1")
  @Description("")
  String y1Params();

  @DefaultMessage("y2")
  @Description("")
  String y2Params();

  @DefaultMessage("yAccel")
  @Description("")
  String yAccelParams();

  @DefaultMessage("yAngularVelocity")
  @Description("")
  String yAngularVelocityParams();

  @DefaultMessage("yStrength")
  @Description("")
  String yStrengthParams();

  @DefaultMessage("year")
  @Description("")
  String yearParams();

  @DefaultMessage("yvel")
  @Description("")
  String yvelParams();

  @DefaultMessage("zAccel")
  @Description("")
  String zAccelParams();

  @DefaultMessage("zAngularVelocity")
  @Description("")
  String zAngularVelocityParams();

  @DefaultMessage("zStrength")
  @Description("")
  String zStrengthParams();

  @DefaultMessage("zoom")
  @Description("")
  String zoomParams();


  /* Component Categories */
  @DefaultMessage("Connectivity")
  @Description("")
  String connectivityComponentPallette();

  @DefaultMessage("Drawing and Animation")
  @Description("")
  String drawingAndAnimationComponentPallette();

  @DefaultMessage("Experimental")
  @Description("")
  String experimentalComponentPallette();

  @DefaultMessage("Extension")
  @Description("")
  String extensionComponentPallette();

  @DefaultMessage("For internal use only")
  @Description("")
  String forInternalUseOnlyComponentPallette();

  @DefaultMessage("LEGO® MINDSTORMS®")
  @Description("")
  String legoMindstormsComponentPallette();

  @DefaultMessage("Layout")
  @Description("")
  String layoutComponentPallette();

  @DefaultMessage("Maps")
  @Description("")
  String mapsComponentPallette();

  @DefaultMessage("Media")
  @Description("")
  String mediaComponentPallette();

  @DefaultMessage("Sensors")
  @Description("")
  String sensorsComponentPallette();

  @DefaultMessage("Social")
  @Description("")
  String socialComponentPallette();

  @DefaultMessage("Storage")
  @Description("")
  String storageComponentPallette();

  @DefaultMessage("User Interface")
  @Description("")
  String userInterfaceComponentPallette();


  /* Property Categories */
  @DefaultMessage("Appearance")
  @Description("")
  String AppearancePropertyCategory();

  @DefaultMessage("Behavior")
  @Description("")
  String BehaviorPropertyCategory();

  @DefaultMessage("Unspecified")
  @Description("")
  String UnspecifiedPropertyCategory();

}
